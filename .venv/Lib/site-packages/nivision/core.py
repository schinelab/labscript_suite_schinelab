import ctypes
import sys

# DLL and function type
if sys.platform.startswith('win'):
    _dll = ctypes.windll.nivision
    _dll2 = ctypes.windll.niimaqdx
    _functype = ctypes.WINFUNCTYPE
else:
    # XXX: load libstdc++.so.6.0.20 to work around crash loading libHALAthena.
    # This is due to multiple C++ libraries installed on the RoboRIO.
    try:
        _cpp_dll = ctypes.CDLL("/lib/libstdc++.so.6.0.20", mode=ctypes.RTLD_GLOBAL, use_errno=True)
    except OSError:
        pass
    _dll = ctypes.CDLL("libnivision.so")
    _dll2 = ctypes.CDLL("libniimaqdx.so")
    _functype = ctypes.CFUNCTYPE

#
# Mapping from imaq error codes to Python exceptions
#
class ImaqError(Exception):
    def __init__(self):
        self.code = imaqGetLastError()
        self.func = imaqGetLastErrorFunc()
    def __str__(self):
        if self.func:
            return "%s: %s: %s" % (self.func, self.code, imaqGetErrorText(self.code))
        else:
            return "%s: %s" % (self.code, imaqGetErrorText(self.code))

class ImaqDxError(ImaqError):
    def __init__(self, code):
        self.code = code
    def __str__(self):
        return "%s: %s" % (self.code, IMAQdxGetErrorString(self.code))

def RETFUNC(name, restype, *params, out=None, library=_dll,
        errcheck=None, handle_missing=True):
    prototype = _functype(restype, *tuple(param[1] for param in params))
    paramflags = []
    for param in params:
        if out is not None and param[0] in out:
            dir = 2
        else:
            dir = 1
        if len(param) == 3:
            paramflags.append((dir, param[0], param[2]))
        else:
            paramflags.append((dir, param[0]))
    try:
        func = prototype((name, library), tuple(paramflags))
        if errcheck is not None:
            func.errcheck = errcheck
    except AttributeError:
        if not handle_missing:
            raise
        def func(*args, **kwargs):
            raise NotImplementedError
    return func

def STDFUNC(name, *params, **kwargs):
    def errcheck(result, func, args):
        if result == 0:
            raise ImaqError
        return args

    kwargs.setdefault("errcheck", errcheck)
    return RETFUNC(name, ctypes.c_int, *params, **kwargs)

def STDPTRFUNC(name, restype, *params, **kwargs):
    def errcheck(result, func, args):
        if (result is None or result == 0
                or getattr(result, "value", 1) is None
                or getattr(result, "value", 1) == 0):
            raise ImaqError
        return args

    kwargs.setdefault("errcheck", errcheck)
    return RETFUNC(name, restype, *params, **kwargs)

def DXFUNC(name, *params, **kwargs):
    def errcheck(result, func, args):
        if result != 0:
            raise ImaqDxError(result)
        return args

    kwargs.setdefault("errcheck", errcheck)
    return RETFUNC(name, ctypes.c_uint, *params, **kwargs)

#
# Error Management functions
#
imaqClearError = STDFUNC("imaqClearError")

_imaqGetErrorText = STDPTRFUNC("imaqGetErrorText", ctypes.c_void_p,
        ("errorCode", ctypes.c_int), errcheck=None)
def imaqGetErrorText(errorCode):
    d = _imaqGetErrorText(errorCode)
    if d is None or d == 0:
        return "Unknown Error."
    s = ctypes.string_at(d)
    imaqDispose(d)
    return str(s, 'utf8')

imaqGetLastError = STDFUNC("imaqGetLastError", errcheck=None)

_imaqGetLastErrorFunc = STDPTRFUNC("imaqGetLastErrorFunc", ctypes.c_char_p,
        errcheck=None)
def imaqGetLastErrorFunc():
    return str(_imaqGetLastErrorFunc(), 'utf8')

_imaqSetError = STDFUNC("imaqSetError", ("errorCode", ctypes.c_int),
        ("function", ctypes.c_char_p), errcheck=None)
def imaqSetError(errorCode, function):
    if isinstance(function, str):
        b = function.encode('utf8')
    else:
        b = function
    return _imaqSetError(errorCode, b)

_IMAQdxGetErrorString = DXFUNC("IMAQdxGetErrorString", ("error", ctypes.c_uint),
        ("message", ctypes.c_char_p), ("messageLength", ctypes.c_uint32),
        errcheck=None, library=_dll2)
def IMAQdxGetErrorString(error):
    message = ctypes.create_string_buffer(256)
    _IMAQdxGetErrorString(error, message, 256)
    return ctypes.cast(message, ctypes.c_char_p).value.decode("utf-8")

#
# Memory Management functions
#
_imaqDispose = STDFUNC("imaqDispose", ("object", ctypes.c_void_p))
def imaqDispose(obj):
    if getattr(obj, "_contents", None) is not None:
        _imaqDispose(ctypes.byref(obj._contents))
        obj._contents = None
    if getattr(obj, "value", None) is not None:
        _imaqDispose(obj)
        obj.value = None

#
# Enumerated Types
#
class Enumeration(ctypes.c_uint):
    def __repr__(self):
        return "%s(%d)" % (self.__class__.__name__, self.value)
    def __eq__(self, other):
        return self.value == other.value
    def __ne__(self, other):
        return self.value != other.value
    def __hash__(self):
        return self.value
    @classmethod
    def from_param(cls, obj):
        if obj.__class__ != cls:
            raise ValueError("Cannot mix enumeration members")
        return ctypes.c_uint(obj.value)

#
# Memory Managed Types
#
class Disposed(ctypes.c_void_p):
    __del__ = imaqDispose

class ImaqArray:
    def __init__(self, ptr, length):
        self._contents = ptr
        self._length_ = length

    def __len__(self):
        return self._length_

    def __getitem__(self, key):
        if key < 0 or key > self._length_-1:
            raise IndexError
        return self._contents[key]

    def __setitem__(self, key, value):
        if key < 0 or key > self._length_-1:
            raise IndexError
        self._contents[key] = value

    def __delitem__(self, key):
        if key < 0 or key > self._length_-1:
            raise IndexError
        del self._contents[key] # will raise TypeError, but pass it down anyway

    def __repr__(self):
        return "ImaqArray(%s, %d)" % (self._contents, self._length_)

class DisposedArray(ImaqArray):
    def __repr__(self):
        return "DisposedArray(%s, %d)" % (self._contents, self._length_)

    __del__ = imaqDispose

class DisposedPointer:
    def __init__(self, ptr):
        self._contents = ptr.contents
    def __getattr__(self, name):
        return getattr(object.__getattribute__(self, "_contents"), name)
    def __setattr__(self, name, value):
        if name == "_contents":
            object.__setattr__(self, name, value)
        else:
            setattr(self._contents, name, value)
    def __repr__(self):
        return "DisposedPointer(%s)" % self._contents
    __del__ = imaqDispose

def iterableToArray(param, type):
    """Convert an iterable to a ctypes array of type.
    Returns tuple of array, length."""
    length = getattr(param, "_length_", None)
    if length is None:
        length = len(param)
        arr = (type*length)(*param)
    else:
        arr = param
    return arr, length

##############################################################################
# Opaque Structures
##############################################################################
class CharSet(Disposed): pass
class ClassifierSession(Disposed): pass
class Image(Disposed): pass
class MultipleGeometricPattern(Disposed): pass
class Overlay(Disposed): pass
class ROI(Disposed): pass
##############################################################################
# Manifest Constants
##############################################################################
IMAQ_DEFAULT_SHOW_COORDINATES = True
IMAQ_DEFAULT_MAX_ICONS_PER_LINE = 4
IMAQ_DEFAULT_BMP_COMPRESS = False
IMAQ_DEFAULT_PNG_QUALITY = 750
IMAQ_DEFAULT_JPEG_QUALITY = 750
IMAQ_ALL_CONTOURS = -1
IMAQ_ALL_WINDOWS = -1
IMAQ_SHIFT = 1
IMAQ_ALT = 2
IMAQ_CTRL = 4
IMAQ_CAPS_LOCK = 8
IMAQ_MODAL_DIALOG = -1
IMAQ_USE_DEFAULT_QUALITY = -1
IMAQ_ALL_SAMPLES = -1
IMAQ_ALL_OBJECTS = -1
IMAQ_ALL_CHARACTERS = -1
##############################################################################
# Predefined Valid Characters
##############################################################################
IMAQ_ANY_CHARACTER = b""
IMAQ_ALPHABETIC = b"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
IMAQ_ALPHANUMERIC = b"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
IMAQ_UPPERCASE_LETTERS = b"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
IMAQ_LOWERCASE_LETTERS = b"abcdefghijklmnopqrstuvwxyz"
IMAQ_DECIMAL_DIGITS = b"0123456789"
IMAQ_HEXADECIMAL_DIGITS = b"0123456789ABCDEFabcdef"
IMAQ_PATTERN = b"\xFF"
IMAQ_FORCE_SPACE = b" "
##############################################################################
# Error Codes
##############################################################################
ERR_SUCCESS = 0
ERR_SYSTEM_ERROR = -1074396160
ERR_OUT_OF_MEMORY = -1074396159
ERR_MEMORY_ERROR = -1074396158
ERR_UNREGISTERED = -1074396157
ERR_NEED_FULL_VERSION = -1074396156
ERR_UNINIT = -1074396155
ERR_IMAGE_TOO_SMALL = -1074396154
ERR_BARCODE_CODABAR = -1074396153
ERR_BARCODE_CODE39 = -1074396152
ERR_BARCODE_CODE93 = -1074396151
ERR_BARCODE_CODE128 = -1074396150
ERR_BARCODE_EAN8 = -1074396149
ERR_BARCODE_EAN13 = -1074396148
ERR_BARCODE_I25 = -1074396147
ERR_BARCODE_MSI = -1074396146
ERR_BARCODE_UPCA = -1074396145
ERR_BARCODE_CODE93_SHIFT = -1074396144
ERR_BARCODE_TYPE = -1074396143
ERR_BARCODE_INVALID = -1074396142
ERR_BARCODE_CODE128_FNC = -1074396141
ERR_BARCODE_CODE128_SET = -1074396140
ERR_ROLLBACK_RESOURCE_OUT_OF_MEMORY = -1074396139
ERR_ROLLBACK_NOT_SUPPORTED = -1074396138
ERR_DIRECTX_DLL_NOT_FOUND = -1074396137
ERR_DIRECTX_INVALID_FILTER_QUALITY = -1074396136
ERR_INVALID_BUTTON_LABEL = -1074396135
ERR_THREAD_INITIALIZING = -1074396134
ERR_THREAD_COULD_NOT_INITIALIZE = -1074396133
ERR_MASK_NOT_TEMPLATE_SIZE = -1074396132
ERR_NOT_RECT_OR_ROTATED_RECT = -1074396130
ERR_ROLLBACK_UNBOUNDED_INTERFACE = -1074396129
ERR_ROLLBACK_RESOURCE_CONFLICT_3 = -1074396128
ERR_ROLLBACK_RESOURCE_CONFLICT_2 = -1074396127
ERR_ROLLBACK_RESOURCE_CONFLICT_1 = -1074396126
ERR_INVALID_CONTRAST_THRESHOLD = -1074396125
ERR_INVALID_CALIBRATION_ROI_MODE = -1074396124
ERR_INVALID_CALIBRATION_MODE = -1074396123
ERR_DRAWTEXT_COLOR_MUST_BE_GRAYSCALE = -1074396122
ERR_SATURATION_THRESHOLD_OUT_OF_RANGE = -1074396121
ERR_NOT_IMAGE = -1074396120
ERR_CUSTOMDATA_INVALID_KEY = -1074396119
ERR_INVALID_STEP_SIZE = -1074396118
ERR_MATRIX_SIZE = -1074396117
ERR_CALIBRATION_INSF_POINTS = -1074396116
ERR_CALIBRATION_IMAGE_CORRECTED = -1074396115
ERR_CALIBRATION_INVALID_ROI = -1074396114
ERR_CALIBRATION_IMAGE_UNCALIBRATED = -1074396113
ERR_INCOMP_MATRIX_SIZE = -1074396112
ERR_CALIBRATION_FAILED_TO_FIND_GRID = -1074396111
ERR_CALIBRATION_INFO_VERSION = -1074396110
ERR_CALIBRATION_INVALID_SCALING_FACTOR = -1074396109
ERR_CALIBRATION_ERRORMAP = -1074396108
ERR_CALIBRATION_INFO_1 = -1074396107
ERR_CALIBRATION_INFO_2 = -1074396106
ERR_CALIBRATION_INFO_3 = -1074396105
ERR_CALIBRATION_INFO_4 = -1074396104
ERR_CALIBRATION_INFO_5 = -1074396103
ERR_CALIBRATION_INFO_6 = -1074396102
ERR_CALIBRATION_INFO_MICRO_PLANE = -1074396101
ERR_CALIBRATION_INFO_PERSPECTIVE_PROJECTION = -1074396100
ERR_CALIBRATION_INFO_SIMPLE_TRANSFORM = -1074396099
ERR_RESERVED_MUST_BE_NULL = -1074396098
ERR_INVALID_PARTICLE_PARAMETER_VALUE = -1074396097
ERR_NOT_AN_OBJECT = -1074396096
ERR_CALIBRATION_DUPLICATE_REFERENCE_POINT = -1074396095
ERR_ROLLBACK_RESOURCE_CANNOT_UNLOCK = -1074396094
ERR_ROLLBACK_RESOURCE_LOCKED = -1074396093
ERR_ROLLBACK_RESOURCE_NON_EMPTY_INITIALIZE = -1074396092
ERR_ROLLBACK_RESOURCE_UNINITIALIZED_ENABLE = -1074396091
ERR_ROLLBACK_RESOURCE_ENABLED = -1074396090
ERR_ROLLBACK_RESOURCE_REINITIALIZE = -1074396089
ERR_ROLLBACK_RESIZE = -1074396088
ERR_ROLLBACK_STOP_TIMER = -1074396087
ERR_ROLLBACK_START_TIMER = -1074396086
ERR_ROLLBACK_INIT_TIMER = -1074396085
ERR_ROLLBACK_DELETE_TIMER = -1074396084
ERR_ROLLBACK_TIMEOUT = -1074396083
ERR_PALETTE_NOT_SUPPORTED = -1074396082
ERR_BAD_PASSWORD = -1074396081
ERR_INVALID_IMAGE_TYPE = -1074396080
ERR_INVALID_METAFILE_HANDLE = -1074396079
ERR_INCOMP_TYPE = -1074396077
ERR_COORD_SYS_FIRST_AXIS = -1074396076
ERR_COORD_SYS_SECOND_AXIS = -1074396075
ERR_INCOMP_SIZE = -1074396074
ERR_MASK_OUTSIDE_IMAGE = -1074396073
ERR_INVALID_BORDER = -1074396072
ERR_INVALID_SCAN_DIRECTION = -1074396071
ERR_INVALID_FUNCTION = -1074396070
ERR_INVALID_COLOR_MODE = -1074396069
ERR_INVALID_ACTION = -1074396068
ERR_IMAGES_NOT_DIFF = -1074396067
ERR_INVALID_POINTSYMBOL = -1074396066
ERR_CANT_RESIZE_EXTERNAL = -1074396065
ERR_EXTERNAL_NOT_SUPPORTED = -1074396064
ERR_EXTERNAL_ALIGNMENT = -1074396063
ERR_INVALID_TOLERANCE = -1074396062
ERR_INVALID_WINDOW_SIZE = -1074396061
ERR_JPEG2000_LOSSLESS_WITH_FLOATING_POINT = -1074396060
ERR_INVALID_MAX_ITERATIONS = -1074396059
ERR_INVALID_ROTATION_MODE = -1074396058
ERR_INVALID_SEARCH_VECTOR_WIDTH = -1074396057
ERR_INVALID_MATRIX_MIRROR_MODE = -1074396056
ERR_INVALID_ASPECT_RATIO = -1074396055
ERR_INVALID_CELL_FILL_TYPE = -1074396054
ERR_INVALID_BORDER_INTEGRITY = -1074396053
ERR_INVALID_DEMODULATION_MODE = -1074396052
ERR_INVALID_CELL_FILTER_MODE = -1074396051
ERR_INVALID_ECC_TYPE = -1074396050
ERR_INVALID_MATRIX_POLARITY = -1074396049
ERR_INVALID_CELL_SAMPLE_SIZE = -1074396048
ERR_INVALID_LINEAR_AVERAGE_MODE = -1074396047
ERR_INVALID_2D_BARCODE_CONTRAST_FOR_ROI = -1074396046
ERR_INVALID_2D_BARCODE_SUBTYPE = -1074396045
ERR_INVALID_2D_BARCODE_SHAPE = -1074396044
ERR_INVALID_2D_BARCODE_CELL_SHAPE = -1074396043
ERR_INVALID_2D_BARCODE_CONTRAST = -1074396042
ERR_INVALID_2D_BARCODE_TYPE = -1074396041
ERR_DRIVER = -1074396040
ERR_IO_ERROR = -1074396039
ERR_FIND_COORDSYS_MORE_THAN_ONE_EDGE = -1074396038
ERR_TIMEOUT = -1074396037
ERR_INVALID_SKELETONMODE = -1074396036
ERR_TEMPLATEIMAGE_NOCIRCLE = -1074396035
ERR_TEMPLATEIMAGE_EDGEINFO = -1074396034
ERR_TEMPLATEDESCRIPTOR_LEARNSETUPDATA = -1074396033
ERR_TEMPLATEDESCRIPTOR_ROTATION_SEARCHSTRATEGY = -1074396032
ERR_INVALID_TETRAGON = -1074396031
ERR_TOO_MANY_CLASSIFICATION_SESSIONS = -1074396030
ERR_TIME_BOUNDED_EXECUTION_NOT_SUPPORTED = -1074396028
ERR_INVALID_COLOR_RESOLUTION = -1074396027
ERR_INVALID_PROCESS_TYPE_FOR_EDGE_DETECTION = -1074396026
ERR_INVALID_ANGLE_RANGE_FOR_STRAIGHT_EDGE = -1074396025
ERR_INVALID_MIN_COVERAGE_FOR_STRAIGHT_EDGE = -1074396024
ERR_INVALID_ANGLE_TOL_FOR_STRAIGHT_EDGE = -1074396023
ERR_INVALID_SEARCH_MODE_FOR_STRAIGHT_EDGE = -1074396022
ERR_INVALID_KERNEL_SIZE_FOR_EDGE_DETECTION = -1074396021
ERR_INVALID_GRADING_MODE = -1074396020
ERR_INVALID_THRESHOLD_PERCENTAGE = -1074396019
ERR_INVALID_EDGE_POLARITY_SEARCH_MODE = -1074396018
ERR_OPENING_NEWER_AIM_GRADING_DATA = -1074396017
ERR_NO_VIDEO_DRIVER = -1074396016
ERR_RPC_EXECUTE_IVB = -1074396015
ERR_INVALID_VIDEO_BLIT = -1074396014
ERR_INVALID_VIDEO_MODE = -1074396013
ERR_RPC_EXECUTE = -1074396012
ERR_RPC_BIND = -1074396011
ERR_INVALID_FRAME_NUMBER = -1074396010
ERR_DIRECTX = -1074396009
ERR_DIRECTX_NO_FILTER = -1074396008
ERR_DIRECTX_INCOMPATIBLE_COMPRESSION_FILTER = -1074396007
ERR_DIRECTX_UNKNOWN_COMPRESSION_FILTER = -1074396006
ERR_INVALID_AVI_SESSION = -1074396005
ERR_DIRECTX_CERTIFICATION_FAILURE = -1074396004
ERR_AVI_DATA_EXCEEDS_BUFFER_SIZE = -1074396003
ERR_INVALID_LINEGAUGEMETHOD = -1074396002
ERR_TOO_MANY_AVI_SESSIONS = -1074396001
ERR_FILE_FILE_HEADER = -1074396000
ERR_FILE_FILE_TYPE = -1074395999
ERR_FILE_COLOR_TABLE = -1074395998
ERR_FILE_ARGERR = -1074395997
ERR_FILE_OPEN = -1074395996
ERR_FILE_NOT_FOUND = -1074395995
ERR_FILE_TOO_MANY_OPEN = -1074395994
ERR_FILE_IO_ERR = -1074395993
ERR_FILE_PERMISSION = -1074395992
ERR_FILE_INVALID_TYPE = -1074395991
ERR_FILE_GET_INFO = -1074395990
ERR_FILE_READ = -1074395989
ERR_FILE_WRITE = -1074395988
ERR_FILE_EOF = -1074395987
ERR_FILE_FORMAT = -1074395986
ERR_FILE_OPERATION = -1074395985
ERR_FILE_INVALID_DATA_TYPE = -1074395984
ERR_FILE_NO_SPACE = -1074395983
ERR_INVALID_FRAMES_PER_SECOND = -1074395982
ERR_INSUFFICIENT_BUFFER_SIZE = -1074395981
ERR_COM_INITIALIZE = -1074395980
ERR_INVALID_PARTICLE_INFO = -1074395979
ERR_INVALID_PARTICLE_NUMBER = -1074395978
ERR_AVI_VERSION = -1074395977
ERR_NUMBER_OF_PALETTE_COLORS = -1074395976
ERR_AVI_TIMEOUT = -1074395975
ERR_UNSUPPORTED_JPEG2000_COLORSPACE_METHOD = -1074395974
ERR_JPEG2000_UNSUPPORTED_MULTIPLE_LAYERS = -1074395973
ERR_DIRECTX_ENUMERATE_FILTERS = -1074395972
ERR_INVALID_OFFSET = -1074395971
ERR_INIT = -1074395960
ERR_CREATE_WINDOW = -1074395959
ERR_WINDOW_ID = -1074395958
ERR_ARRAY_SIZE_MISMATCH = -1074395957
ERR_INVALID_QUALITY = -1074395956
ERR_INVALID_MAX_WAVELET_TRANSFORM_LEVEL = -1074395955
ERR_INVALID_QUANTIZATION_STEP_SIZE = -1074395954
ERR_INVALID_WAVELET_TRANSFORM_MODE = -1074395953
ERR_ROI_NOT_POINT = -1074395952
ERR_ROI_NOT_POINTS = -1074395951
ERR_ROI_NOT_LINE = -1074395950
ERR_ROI_NOT_ANNULUS = -1074395949
ERR_INVALID_MEASURE_PARTICLES_CALIBRATION_MODE = -1074395948
ERR_INVALID_PARTICLE_CLASSIFIER_THRESHOLD_TYPE = -1074395947
ERR_INVALID_DISTANCE = -1074395946
ERR_INVALID_PARTICLE_AREA = -1074395945
ERR_CLASS_NAME_NOT_FOUND = -1074395944
ERR_NUMBER_LABEL_LIMIT_EXCEEDED = -1074395943
ERR_INVALID_DISTANCE_LEVEL = -1074395942
ERR_INVALID_SVM_TYPE = -1074395941
ERR_INVALID_SVM_KERNEL = -1074395940
ERR_NO_SUPPORT_VECTOR_FOUND = -1074395939
ERR_COST_LABEL_NOT_FOUND = -1074395938
ERR_EXCEEDED_SVM_MAX_ITERATION = -1074395937
ERR_INVALID_SVM_PARAMETER = -1074395936
ERR_INVALID_IDENTIFICATION_SCORE = -1074395935
ERR_INVALID_TEXTURE_FEATURE = -1074395934
ERR_INVALID_COOCCURRENCE_LEVEL = -1074395933
ERR_INVALID_WAVELET_SUBBAND = -1074395932
ERR_INVALID_FINAL_STEP_SIZE = -1074395931
ERR_INVALID_ENERGY = -1074395930
ERR_INVALID_TEXTURE_LABEL = -1074395929
ERR_INVALID_WAVELET_TYPE = -1074395928
ERR_SAME_WAVELET_BANDS_SELECTED = -1074395927
ERR_IMAGE_SIZE_MISMATCH = -1074395926
ERR_NUMBER_CLASS = -1074395920
ERR_INVALID_LUCAS_KANADE_WINDOW_SIZE = -1074395888
ERR_INVALID_MATRIX_TYPE = -1074395887
ERR_INVALID_OPTICAL_FLOW_TERMINATION_CRITERIA_TYPE = -1074395886
ERR_LKP_NULL_PYRAMID = -1074395885
ERR_INVALID_PYRAMID_LEVEL = -1074395884
ERR_INVALID_LKP_KERNEL = -1074395883
ERR_INVALID_HORN_SCHUNCK_LAMBDA = -1074395882
ERR_INVALID_HORN_SCHUNCK_TYPE = -1074395881
ERR_PARTICLE = -1074395880
ERR_BAD_MEASURE = -1074395879
ERR_PROP_NODE_WRITE_NOT_SUPPORTED = -1074395878
ERR_COLORMODE_REQUIRES_CHANGECOLORSPACE2 = -1074395877
ERR_UNSUPPORTED_COLOR_MODE = -1074395876
ERR_BARCODE_PHARMACODE = -1074395875
ERR_BAD_INDEX = -1074395840
ERR_INVALID_COMPRESSION_RATIO = -1074395837
ERR_TOO_MANY_CONTOURS = -1074395801
ERR_PROTECTION = -1074395800
ERR_INTERNAL = -1074395799
ERR_INVALID_CUSTOM_SAMPLE = -1074395798
ERR_INVALID_CLASSIFIER_SESSION = -1074395797
ERR_INVALID_KNN_METHOD = -1074395796
ERR_K_TOO_LOW = -1074395795
ERR_K_TOO_HIGH = -1074395794
ERR_INVALID_OPERATION_ON_COMPACT_SESSION_ATTEMPTED = -1074395793
ERR_CLASSIFIER_SESSION_NOT_TRAINED = -1074395792
ERR_CLASSIFIER_INVALID_SESSION_TYPE = -1074395791
ERR_INVALID_DISTANCE_METRIC = -1074395790
ERR_OPENING_NEWER_CLASSIFIER_SESSION = -1074395789
ERR_NO_SAMPLES = -1074395788
ERR_INVALID_CLASSIFIER_TYPE = -1074395787
ERR_INVALID_PARTICLE_OPTIONS = -1074395786
ERR_NO_PARTICLE = -1074395785
ERR_INVALID_LIMITS = -1074395784
ERR_BAD_SAMPLE_INDEX = -1074395783
ERR_DESCRIPTION_TOO_LONG = -1074395782
ERR_CLASSIFIER_INVALID_ENGINE_TYPE = -1074395781
ERR_INVALID_PARTICLE_TYPE = -1074395780
ERR_CANNOT_COMPACT_UNTRAINED = -1074395779
ERR_INVALID_KERNEL_SIZE = -1074395778
ERR_INCOMPATIBLE_CLASSIFIER_TYPES = -1074395777
ERR_INVALID_USE_OF_COMPACT_SESSION_FILE = -1074395776
ERR_ROI_HAS_OPEN_CONTOURS = -1074395775
ERR_NO_LABEL = -1074395774
ERR_NO_DEST_IMAGE = -1074395773
ERR_INVALID_REGISTRATION_METHOD = -1074395772
ERR_OPENING_NEWER_INSPECTION_TEMPLATE = -1074395771
ERR_INVALID_INSPECTION_TEMPLATE = -1074395770
ERR_INVALID_EDGE_THICKNESS = -1074395769
ERR_INVALID_SCALE = -1074395768
ERR_INVALID_ALIGNMENT = -1074395767
ERR_DEPRECATED_FUNCTION = -1074395766
ERR_INVALID_NORMALIZATION_METHOD = -1074395763
ERR_INVALID_NIBLACK_DEVIATION_FACTOR = -1074395762
ERR_BOARD_NOT_FOUND = -1074395760
ERR_BOARD_NOT_OPEN = -1074395758
ERR_DLL_NOT_FOUND = -1074395757
ERR_DLL_FUNCTION_NOT_FOUND = -1074395756
ERR_TRIG_TIMEOUT = -1074395754
ERR_CONTOUR_INVALID_REFINEMENTS = -1074395746
ERR_TOO_MANY_CURVES = -1074395745
ERR_CONTOUR_INVALID_KERNEL_FOR_SMOOTHING = -1074395744
ERR_CONTOUR_LINE_INVALID = -1074395743
ERR_CONTOUR_TEMPLATE_IMAGE_INVALID = -1074395742
ERR_CONTOUR_GPM_FAIL = -1074395741
ERR_CONTOUR_OPENING_NEWER_VERSION = -1074395740
ERR_CONTOUR_CONNECT_DUPLICATE = -1074395739
ERR_CONTOUR_CONNECT_TYPE = -1074395738
ERR_CONTOUR_MATCH_STR_NOT_APPLICABLE = -1074395737
ERR_CONTOUR_CURVATURE_KERNEL = -1074395736
ERR_CONTOUR_EXTRACT_SELECTION = -1074395735
ERR_CONTOUR_EXTRACT_DIRECTION = -1074395734
ERR_CONTOUR_EXTRACT_ROI = -1074395733
ERR_CONTOUR_NO_CURVES = -1074395732
ERR_CONTOUR_COMPARE_KERNEL = -1074395731
ERR_CONTOUR_COMPARE_SINGLE_IMAGE = -1074395730
ERR_CONTOUR_INVALID = -1074395729
ERR_INVALID_2D_BARCODE_SEARCH_MODE = -1074395728
ERR_UNSUPPORTED_2D_BARCODE_SEARCH_MODE = -1074395727
ERR_MATCHFACTOR_OBSOLETE = -1074395726
ERR_DATA_VERSION = -1074395725
ERR_CUSTOMDATA_INVALID_SIZE = -1074395724
ERR_CUSTOMDATA_KEY_NOT_FOUND = -1074395723
ERR_CLASSIFIER_CLASSIFY_IMAGE_WITH_CUSTOM_SESSION = -1074395722
ERR_INVALID_BIT_DEPTH = -1074395721
ERR_BAD_ROI = -1074395720
ERR_BAD_ROI_BOX = -1074395719
ERR_LAB_VERSION = -1074395718
ERR_INVALID_RANGE = -1074395717
ERR_INVALID_SCALING_METHOD = -1074395716
ERR_INVALID_CALIBRATION_UNIT = -1074395715
ERR_INVALID_AXIS_ORIENTATION = -1074395714
ERR_VALUE_NOT_IN_ENUM = -1074395713
ERR_WRONG_REGION_TYPE = -1074395712
ERR_NOT_ENOUGH_REGIONS = -1074395711
ERR_TOO_MANY_PARTICLES = -1074395710
ERR_AVI_UNOPENED_SESSION = -1074395709
ERR_AVI_READ_SESSION_REQUIRED = -1074395708
ERR_AVI_WRITE_SESSION_REQUIRED = -1074395707
ERR_AVI_SESSION_ALREADY_OPEN = -1074395706
ERR_DATA_CORRUPTED = -1074395705
ERR_INVALID_COMPRESSION_TYPE = -1074395704
ERR_INVALID_TYPE_OF_FLATTEN = -1074395703
ERR_INVALID_LENGTH = -1074395702
ERR_INVALID_MATRIX_SIZE_RANGE = -1074395701
ERR_REQUIRES_WIN2000_OR_NEWER = -1074395700
ERR_INVALID_CALIBRATION_METHOD = -1074395662
ERR_INVALID_OPERATION_ON_COMPACT_CALIBRATION_ATTEMPTED = -1074395661
ERR_INVALID_POLYNOMIAL_MODEL_K_COUNT = -1074395660
ERR_INVALID_DISTORTION_MODEL = -1074395659
ERR_CAMERA_MODEL_NOT_AVAILABLE = -1074395658
ERR_INVALID_THUMBNAIL_INDEX = -1074395657
ERR_SMOOTH_CONTOURS_MUST_BE_SAME = -1074395656
ERR_ENABLE_CALIBRATION_SUPPORT_MUST_BE_SAME = -1074395655
ERR_GRADING_INFORMATION_NOT_FOUND = -1074395654
ERR_OPENING_NEWER_MULTIPLE_GEOMETRIC_TEMPLATE = -1074395653
ERR_OPENING_NEWER_GEOMETRIC_MATCHING_TEMPLATE = -1074395652
ERR_EDGE_FILTER_SIZE_MUST_BE_SAME = -1074395651
ERR_CURVE_EXTRACTION_MODE_MUST_BE_SAME = -1074395650
ERR_INVALID_GEOMETRIC_FEATURE_TYPE = -1074395649
ERR_TEMPLATE_NOT_LEARNED = -1074395648
ERR_INVALID_MULTIPLE_GEOMETRIC_TEMPLATE = -1074395647
ERR_NO_TEMPLATE_TO_LEARN = -1074395646
ERR_INVALID_NUMBER_OF_LABELS = -1074395645
ERR_LABEL_TOO_LONG = -1074395644
ERR_INVALID_NUMBER_OF_MATCH_OPTIONS = -1074395643
ERR_LABEL_NOT_FOUND = -1074395642
ERR_DUPLICATE_LABEL = -1074395641
ERR_TOO_MANY_ZONES = -1074395640
ERR_INVALID_HATCH_STYLE = -1074395639
ERR_INVALID_FILL_STYLE = -1074395638
ERR_HARDWARE_DOESNT_SUPPORT_NONTEARING = -1074395637
ERR_DIRECTX_NOT_FOUND = -1074395636
ERR_INVALID_SHAPE_DESCRIPTOR = -1074395635
ERR_INVALID_MAX_MATCH_OVERLAP = -1074395634
ERR_INVALID_MIN_MATCH_SEPARATION_SCALE = -1074395633
ERR_INVALID_MIN_MATCH_SEPARATION_ANGLE = -1074395632
ERR_INVALID_MIN_MATCH_SEPARATION_DISTANCE = -1074395631
ERR_INVALID_MAXIMUM_FEATURES_LEARNED = -1074395630
ERR_INVALID_MAXIMUM_PIXEL_DISTANCE_FROM_LINE = -1074395629
ERR_INVALID_GEOMETRIC_MATCHING_TEMPLATE = -1074395628
ERR_NOT_ENOUGH_TEMPLATE_FEATURES_1 = -1074395627
ERR_NOT_ENOUGH_TEMPLATE_FEATURES = -1074395626
ERR_INVALID_MATCH_CONSTRAINT_TYPE = -1074395625
ERR_INVALID_OCCLUSION_RANGE = -1074395624
ERR_INVALID_SCALE_RANGE = -1074395623
ERR_INVALID_MATCH_GEOMETRIC_PATTERN_SETUP_DATA = -1074395622
ERR_INVALID_LEARN_GEOMETRIC_PATTERN_SETUP_DATA = -1074395621
ERR_INVALID_CURVE_EXTRACTION_MODE = -1074395620
ERR_TOO_MANY_OCCLUSION_RANGES = -1074395619
ERR_TOO_MANY_SCALE_RANGES = -1074395618
ERR_INVALID_NUMBER_OF_FEATURES_RANGE = -1074395617
ERR_INVALID_EDGE_FILTER_SIZE = -1074395616
ERR_INVALID_MINIMUM_FEATURE_STRENGTH = -1074395615
ERR_INVALID_MINIMUM_FEATURE_ASPECT_RATIO = -1074395614
ERR_INVALID_MINIMUM_FEATURE_LENGTH = -1074395613
ERR_INVALID_MINIMUM_FEATURE_RADIUS = -1074395612
ERR_INVALID_MINIMUM_RECTANGLE_DIMENSION = -1074395611
ERR_INVALID_INITIAL_MATCH_LIST_LENGTH = -1074395610
ERR_INVALID_SUBPIXEL_TOLERANCE = -1074395609
ERR_INVALID_SUBPIXEL_ITERATIONS = -1074395608
ERR_INVALID_MAXIMUM_FEATURES_PER_MATCH = -1074395607
ERR_INVALID_MINIMUM_FEATURES_TO_MATCH = -1074395606
ERR_INVALID_MAXIMUM_END_POINT_GAP = -1074395605
ERR_INVALID_COLUMN_STEP = -1074395604
ERR_INVALID_ROW_STEP = -1074395603
ERR_INVALID_MINIMUM_CURVE_LENGTH = -1074395602
ERR_INVALID_EDGE_THRESHOLD = -1074395601
ERR_INFO_NOT_FOUND = -1074395600
ERR_NIOCR_INVALID_ACCEPTANCE_LEVEL = -1074395598
ERR_NIOCR_NOT_A_VALID_SESSION = -1074395597
ERR_NIOCR_INVALID_CHARACTER_SIZE = -1074395596
ERR_NIOCR_INVALID_THRESHOLD_MODE = -1074395595
ERR_NIOCR_INVALID_SUBSTITUTION_CHARACTER = -1074395594
ERR_NIOCR_INVALID_NUMBER_OF_BLOCKS = -1074395593
ERR_NIOCR_INVALID_READ_STRATEGY = -1074395592
ERR_NIOCR_INVALID_CHARACTER_INDEX = -1074395591
ERR_NIOCR_INVALID_NUMBER_OF_VALID_CHARACTER_POSITIONS = -1074395590
ERR_NIOCR_INVALID_LOW_THRESHOLD_VALUE = -1074395589
ERR_NIOCR_INVALID_HIGH_THRESHOLD_VALUE = -1074395588
ERR_NIOCR_INVALID_THRESHOLD_RANGE = -1074395587
ERR_NIOCR_INVALID_LOWER_THRESHOLD_LIMIT = -1074395586
ERR_NIOCR_INVALID_UPPER_THRESHOLD_LIMIT = -1074395585
ERR_NIOCR_INVALID_THRESHOLD_LIMITS = -1074395584
ERR_NIOCR_INVALID_MIN_CHAR_SPACING = -1074395583
ERR_NIOCR_INVALID_MAX_HORIZ_ELEMENT_SPACING = -1074395582
ERR_NIOCR_INVALID_MAX_VERT_ELEMENT_SPACING = -1074395581
ERR_NIOCR_INVALID_MIN_BOUNDING_RECT_WIDTH = -1074395580
ERR_NIOCR_INVALID_ASPECT_RATIO = -1074395579
ERR_NIOCR_INVALID_CHARACTER_SET_FILE = -1074395578
ERR_NIOCR_CHARACTER_VALUE_CANNOT_BE_EMPTYSTRING = -1074395577
ERR_NIOCR_CHARACTER_VALUE_TOO_LONG = -1074395576
ERR_NIOCR_INVALID_NUMBER_OF_EROSIONS = -1074395575
ERR_NIOCR_CHARACTER_SET_DESCRIPTION_TOO_LONG = -1074395574
ERR_NIOCR_INVALID_CHARACTER_SET_FILE_VERSION = -1074395573
ERR_NIOCR_INTEGER_VALUE_FOR_STRING_ATTRIBUTE = -1074395572
ERR_NIOCR_GET_ONLY_ATTRIBUTE = -1074395571
ERR_NIOCR_INTEGER_VALUE_FOR_BOOLEAN_ATTRIBUTE = -1074395570
ERR_NIOCR_INVALID_ATTRIBUTE = -1074395569
ERR_NIOCR_STRING_VALUE_FOR_INTEGER_ATTRIBUTE = -1074395568
ERR_NIOCR_STRING_VALUE_FOR_BOOLEAN_ATTRIBUTE = -1074395567
ERR_NIOCR_BOOLEAN_VALUE_FOR_INTEGER_ATTRIBUTE = -1074395566
ERR_NIOCR_MUST_BE_SINGLE_CHARACTER = -1074395565
ERR_NIOCR_INVALID_PREDEFINED_CHARACTER = -1074395564
ERR_NIOCR_UNLICENSED = -1074395563
ERR_NIOCR_BOOLEAN_VALUE_FOR_STRING_ATTRIBUTE = -1074395562
ERR_NIOCR_INVALID_NUMBER_OF_CHARACTERS = -1074395561
ERR_NIOCR_INVALID_OBJECT_INDEX = -1074395560
ERR_NIOCR_INVALID_READ_OPTION = -1074395559
ERR_NIOCR_INVALID_CHARACTER_SIZE_RANGE = -1074395558
ERR_NIOCR_INVALID_BOUNDING_RECT_WIDTH_RANGE = -1074395557
ERR_NIOCR_INVALID_BOUNDING_RECT_HEIGHT_RANGE = -1074395556
ERR_NIOCR_INVALID_SPACING_RANGE = -1074395555
ERR_NIOCR_INVALID_READ_RESOLUTION = -1074395554
ERR_NIOCR_INVALID_MIN_BOUNDING_RECT_HEIGHT = -1074395553
ERR_NIOCR_NOT_A_VALID_CHARACTER_SET = -1074395552
ERR_NIOCR_RENAME_REFCHAR = -1074395551
ERR_NIOCR_INVALID_CHARACTER_VALUE = -1074395550
ERR_NIOCR_INVALID_NUMBER_OF_OBJECTS_TO_VERIFY = -1074395549
ERR_INVALID_STEREO_BLOCKMATCHING_PREFILTER_CAP = -1074395421
ERR_INVALID_STEREO_BLOCKMATCHING_PREFILTER_SIZE = -1074395420
ERR_INVALID_STEREO_BLOCKMATCHING_PREFILTER_TYPE = -1074395419
ERR_INVALID_STEREO_BLOCKMATCHING_NUMDISPARITIES = -1074395418
ERR_INVALID_STEREO_BLOCKMATCHING_WINDOW_SIZE = -1074395417
ERR_3DVISION_INVALID_SESSION_TYPE = -1074395416
ERR_TOO_MANY_3DVISION_SESSIONS = -1074395415
ERR_OPENING_NEWER_3DVISION_SESSION = -1074395414
ERR_INVALID_STEREO_BLOCKMATCHING_FILTERTYPE = -1074395413
ERR_INVALID_STEREO_CAMERA_POSITION = -1074395412
ERR_INVALID_3DVISION_SESSION = -1074395411
ERR_INVALID_ICONS_PER_LINE = -1074395410
ERR_INVALID_SUBPIXEL_DIVISIONS = -1074395409
ERR_INVALID_DETECTION_MODE = -1074395408
ERR_INVALID_CONTRAST = -1074395407
ERR_COORDSYS_NOT_FOUND = -1074395406
ERR_INVALID_TEXTORIENTATION = -1074395405
ERR_INVALID_INTERPOLATIONMETHOD_FOR_UNWRAP = -1074395404
ERR_EXTRAINFO_VERSION = -1074395403
ERR_INVALID_MAXPOINTS = -1074395402
ERR_INVALID_MATCHFACTOR = -1074395401
ERR_MULTICORE_OPERATION = -1074395400
ERR_MULTICORE_INVALID_ARGUMENT = -1074395399
ERR_COMPLEX_IMAGE_REQUIRED = -1074395397
ERR_COLOR_IMAGE_REQUIRED = -1074395395
ERR_COLOR_SPECTRUM_MASK = -1074395394
ERR_COLOR_TEMPLATE_IMAGE_TOO_SMALL = -1074395393
ERR_COLOR_TEMPLATE_IMAGE_TOO_LARGE = -1074395392
ERR_COLOR_TEMPLATE_IMAGE_HUE_CONTRAST_TOO_LOW = -1074395391
ERR_COLOR_TEMPLATE_IMAGE_LUMINANCE_CONTRAST_TOO_LOW = -1074395390
ERR_COLOR_LEARN_SETUP_DATA = -1074395389
ERR_COLOR_LEARN_SETUP_DATA_SHAPE = -1074395388
ERR_COLOR_MATCH_SETUP_DATA = -1074395387
ERR_COLOR_MATCH_SETUP_DATA_SHAPE = -1074395386
ERR_COLOR_ROTATION_REQUIRES_SHAPE_FEATURE = -1074395385
ERR_COLOR_TEMPLATE_DESCRIPTOR = -1074395384
ERR_COLOR_TEMPLATE_DESCRIPTOR_1 = -1074395383
ERR_COLOR_TEMPLATE_DESCRIPTOR_2 = -1074395382
ERR_COLOR_TEMPLATE_DESCRIPTOR_3 = -1074395381
ERR_COLOR_TEMPLATE_DESCRIPTOR_4 = -1074395380
ERR_COLOR_TEMPLATE_DESCRIPTOR_5 = -1074395379
ERR_COLOR_TEMPLATE_DESCRIPTOR_6 = -1074395378
ERR_COLOR_TEMPLATE_DESCRIPTOR_SHIFT = -1074395377
ERR_COLOR_TEMPLATE_DESCRIPTOR_NOSHIFT = -1074395376
ERR_COLOR_TEMPLATE_DESCRIPTOR_SHIFT_1 = -1074395375
ERR_COLOR_TEMPLATE_DESCRIPTOR_SHIFT_2 = -1074395374
ERR_COLOR_TEMPLATE_DESCRIPTOR_ROTATION = -1074395373
ERR_COLOR_TEMPLATE_DESCRIPTOR_NOROTATION = -1074395372
ERR_COLOR_TEMPLATE_DESCRIPTOR_ROTATION_1 = -1074395371
ERR_COLOR_TEMPLATE_DESCRIPTOR_ROTATION_2 = -1074395370
ERR_COLOR_TEMPLATE_DESCRIPTOR_ROTATION_3 = -1074395369
ERR_COLOR_TEMPLATE_DESCRIPTOR_ROTATION_4 = -1074395368
ERR_COLOR_TEMPLATE_DESCRIPTOR_ROTATION_5 = -1074395367
ERR_COLOR_TEMPLATE_DESCRIPTOR_NOSHAPE = -1074395366
ERR_COLOR_TEMPLATE_DESCRIPTOR_NOSPECTRUM = -1074395365
ERR_IGNORE_COLOR_SPECTRUM_SET = -1074395364
ERR_INVALID_SUBSAMPLING_RATIO = -1074395363
ERR_INVALID_WIDTH = -1074395362
ERR_INVALID_STEEPNESS = -1074395361
ERR_COMPLEX_PLANE = -1074395360
ERR_INVALID_COLOR_IGNORE_MODE = -1074395357
ERR_INVALID_MIN_MATCH_SCORE = -1074395356
ERR_INVALID_NUM_MATCHES_REQUESTED = -1074395355
ERR_INVALID_COLOR_WEIGHT = -1074395354
ERR_INVALID_SEARCH_STRATEGY = -1074395353
ERR_INVALID_FEATURE_MODE = -1074395352
ERR_INVALID_RECT = -1074395351
ERR_INVALID_VISION_INFO = -1074395350
ERR_INVALID_SKELETONMETHOD = -1074395349
ERR_INVALID_3DPLANE = -1074395348
ERR_INVALID_3DDIRECTION = -1074395347
ERR_INVALID_INTERPOLATIONMETHOD_FOR_ROTATE = -1074395346
ERR_INVALID_FLIPAXIS = -1074395345
ERR_FILE_FILENAME_NULL = -1074395343
ERR_INVALID_SIZETYPE = -1074395340
ERR_UNKNOWN_ALGORITHM = -1074395336
ERR_DISPATCH_STATUS_CONFLICT = -1074395335
ERR_INVALID_CONVERSIONSTYLE = -1074395334
ERR_INVALID_VERTICAL_TEXT_ALIGNMENT = -1074395333
ERR_INVALID_COMPAREFUNCTION = -1074395332
ERR_INVALID_BORDERMETHOD = -1074395331
ERR_INVALID_BORDER_SIZE = -1074395330
ERR_INVALID_OUTLINEMETHOD = -1074395329
ERR_INVALID_INTERPOLATIONMETHOD = -1074395328
ERR_INVALID_SCALINGMODE = -1074395327
ERR_INVALID_DRAWMODE_FOR_LINE = -1074395326
ERR_INVALID_DRAWMODE = -1074395325
ERR_INVALID_SHAPEMODE = -1074395324
ERR_INVALID_FONTCOLOR = -1074395323
ERR_INVALID_TEXTALIGNMENT = -1074395322
ERR_INVALID_MORPHOLOGYMETHOD = -1074395321
ERR_TEMPLATE_EMPTY = -1074395320
ERR_INVALID_SUBPIX_TYPE = -1074395319
ERR_INSF_POINTS = -1074395318
ERR_UNDEF_POINT = -1074395317
ERR_INVALID_KERNEL_CODE = -1074395316
ERR_INEFFICIENT_POINTS = -1074395315
ERR_WRITE_FILE_NOT_SUPPORTED = -1074395313
ERR_LCD_CALIBRATE = -1074395312
ERR_INVALID_COLOR_SPECTRUM = -1074395311
ERR_INVALID_PALETTE_TYPE = -1074395310
ERR_INVALID_WINDOW_THREAD_POLICY = -1074395309
ERR_INVALID_COLORSENSITIVITY = -1074395308
ERR_PRECISION_NOT_GTR_THAN_0 = -1074395307
ERR_INVALID_TOOL = -1074395306
ERR_INVALID_REFERENCEMODE = -1074395305
ERR_INVALID_MATHTRANSFORMMETHOD = -1074395304
ERR_INVALID_NUM_OF_CLASSES = -1074395303
ERR_INVALID_THRESHOLDMETHOD = -1074395302
ERR_ROI_NOT_2_LINES = -1074395301
ERR_INVALID_METERARCMODE = -1074395300
ERR_INVALID_COMPLEXPLANE = -1074395299
ERR_COMPLEXPLANE_NOT_REAL_OR_IMAGINARY = -1074395298
ERR_INVALID_PARTICLEINFOMODE = -1074395297
ERR_INVALID_BARCODETYPE = -1074395296
ERR_INVALID_INTERPOLATIONMETHOD_INTERPOLATEPOINTS = -1074395295
ERR_CONTOUR_INDEX_OUT_OF_RANGE = -1074395294
ERR_CONTOURID_NOT_FOUND = -1074395293
ERR_POINTS_ARE_COLLINEAR = -1074395292
ERR_SHAPEMATCH_BADIMAGEDATA = -1074395291
ERR_SHAPEMATCH_BADTEMPLATE = -1074395290
ERR_CONTAINER_CAPACITY_EXCEEDED_UINT_MAX = -1074395289
ERR_CONTAINER_CAPACITY_EXCEEDED_INT_MAX = -1074395288
ERR_INVALID_LINE = -1074395287
ERR_INVALID_CONCENTRIC_RAKE_DIRECTION = -1074395286
ERR_INVALID_SPOKE_DIRECTION = -1074395285
ERR_INVALID_EDGE_PROCESS = -1074395284
ERR_INVALID_RAKE_DIRECTION = -1074395283
ERR_CANT_DRAW_INTO_VIEWER = -1074395282
ERR_IMAGE_SMALLER_THAN_BORDER = -1074395281
ERR_ROI_NOT_RECT = -1074395280
ERR_ROI_NOT_POLYGON = -1074395279
ERR_LCD_NOT_NUMERIC = -1074395278
ERR_BARCODE_CHECKSUM = -1074395277
ERR_LINES_PARALLEL = -1074395276
ERR_INVALID_BROWSER_IMAGE = -1074395275
ERR_DIV_BY_ZERO = -1074395270
ERR_NULL_POINTER = -1074395269
ERR_LINEAR_COEFF = -1074395268
ERR_COMPLEX_ROOT = -1074395267
ERR_BARCODE = -1074395265
ERR_LCD_NO_SEGMENTS = -1074395263
ERR_LCD_BAD_MATCH = -1074395262
ERR_GIP_RANGE = -1074395261
ERR_HEAP_TRASHED = -1074395260
ERR_BAD_FILTER_WIDTH = -1074395258
ERR_INVALID_EDGE_DIR = -1074395257
ERR_EVEN_WINDOW_SIZE = -1074395256
ERR_INVALID_LEARN_MODE = -1074395253
ERR_LEARN_SETUP_DATA = -1074395252
ERR_INVALID_MATCH_MODE = -1074395251
ERR_MATCH_SETUP_DATA = -1074395250
ERR_ROTATION_ANGLE_RANGE_TOO_LARGE = -1074395249
ERR_TOO_MANY_ROTATION_ANGLE_RANGES = -1074395248
ERR_TEMPLATE_DESCRIPTOR = -1074395247
ERR_TEMPLATE_DESCRIPTOR_1 = -1074395246
ERR_TEMPLATE_DESCRIPTOR_2 = -1074395245
ERR_TEMPLATE_DESCRIPTOR_3 = -1074395244
ERR_TEMPLATE_DESCRIPTOR_4 = -1074395243
ERR_TEMPLATE_DESCRIPTOR_ROTATION = -1074395242
ERR_TEMPLATE_DESCRIPTOR_NOROTATION = -1074395241
ERR_TEMPLATE_DESCRIPTOR_ROTATION_1 = -1074395240
ERR_TEMPLATE_DESCRIPTOR_SHIFT = -1074395239
ERR_TEMPLATE_DESCRIPTOR_NOSHIFT = -1074395238
ERR_TEMPLATE_DESCRIPTOR_SHIFT_1 = -1074395237
ERR_TEMPLATE_DESCRIPTOR_NOSCALE = -1074395236
ERR_TEMPLATE_IMAGE_CONTRAST_TOO_LOW = -1074395235
ERR_TEMPLATE_IMAGE_TOO_SMALL = -1074395234
ERR_TEMPLATE_IMAGE_TOO_LARGE = -1074395233
ERR_TOO_MANY_OCR_SESSIONS = -1074395214
ERR_OCR_TEMPLATE_WRONG_SIZE = -1074395212
ERR_OCR_BAD_TEXT_TEMPLATE = -1074395211
ERR_OCR_CANNOT_MATCH_TEXT_TEMPLATE = -1074395210
ERR_OCR_LIB_INIT = -1074395203
ERR_OCR_LOAD_LIBRARY = -1074395201
ERR_OCR_INVALID_PARAMETER = -1074395200
ERR_MARKER_INFORMATION_NOT_SUPPLIED = -1074395199
ERR_INCOMPATIBLE_MARKER_IMAGE_SIZE = -1074395198
ERR_BOTH_MARKER_INPUTS_SUPPLIED = -1074395197
ERR_INVALID_MORPHOLOGICAL_OPERATION = -1074395196
ERR_IMAGE_CONTAINS_NAN_VALUES = -1074395195
ERR_OVERLAY_EXTRAINFO_OPENING_NEW_VERSION = -1074395194
ERR_NO_CLAMP_FOUND = -1074395193
ERR_NO_CLAMP_WITHIN_ANGLE_RANGE = -1074395192
ERR_GHT_INVALID_USE_ALL_CURVES_VALUE = -1074395188
ERR_INVALID_GAUSS_SIGMA_VALUE = -1074395187
ERR_INVALID_GAUSS_FILTER_TYPE = -1074395186
ERR_INVALID_CONTRAST_REVERSAL_MODE = -1074395185
ERR_INVALID_ROTATION_RANGE = -1074395184
ERR_GHT_INVALID_MINIMUM_LEARN_ANGLE_VALUE = -1074395183
ERR_GHT_INVALID_MAXIMUM_LEARN_ANGLE_VALUE = -1074395182
ERR_GHT_INVALID_MAXIMUM_LEARN_SCALE_FACTOR = -1074395181
ERR_GHT_INVALID_MINIMUM_LEARN_SCALE_FACTOR = -1074395180
ERR_OCR_PREPROCESSING_FAILED = -1074395179
ERR_OCR_RECOGNITION_FAILED = -1074395178
ERR_OCR_BAD_USER_DICTIONARY = -1074395175
ERR_OCR_INVALID_AUTOORIENTMODE = -1074395174
ERR_OCR_INVALID_LANGUAGE = -1074395173
ERR_OCR_INVALID_CHARACTERSET = -1074395172
ERR_OCR_INI_FILE_NOT_FOUND = -1074395171
ERR_OCR_INVALID_CHARACTERTYPE = -1074395170
ERR_OCR_INVALID_RECOGNITIONMODE = -1074395169
ERR_OCR_INVALID_AUTOCORRECTIONMODE = -1074395168
ERR_OCR_INVALID_OUTPUTDELIMITER = -1074395167
ERR_OCR_BIN_DIR_NOT_FOUND = -1074395166
ERR_OCR_WTS_DIR_NOT_FOUND = -1074395165
ERR_OCR_ADD_WORD_FAILED = -1074395164
ERR_OCR_INVALID_CHARACTERPREFERENCE = -1074395163
ERR_OCR_INVALID_CORRECTIONMODE = -1074395162
ERR_OCR_INVALID_CORRECTIONLEVEL = -1074395161
ERR_OCR_INVALID_MAXPOINTSIZE = -1074395160
ERR_OCR_INVALID_TOLERANCE = -1074395159
ERR_OCR_INVALID_CONTRASTMODE = -1074395158
ERR_OCR_SKEW_DETECT_FAILED = -1074395156
ERR_OCR_ORIENT_DETECT_FAILED = -1074395155
ERR_FONT_FILE_FORMAT = -1074395153
ERR_FONT_FILE_NOT_FOUND = -1074395152
ERR_OCR_CORRECTION_FAILED = -1074395151
ERR_INVALID_ROUNDING_MODE = -1074395150
ERR_DUPLICATE_TRANSFORM_TYPE = -1074395149
ERR_OVERLAY_GROUP_NOT_FOUND = -1074395148
ERR_BARCODE_RSSLIMITED = -1074395147
ERR_QR_DETECTION_VERSION = -1074395146
ERR_QR_INVALID_READ = -1074395145
ERR_QR_INVALID_BARCODE = -1074395144
ERR_QR_DETECTION_MODE = -1074395143
ERR_QR_DETECTION_MODELTYPE = -1074395142
ERR_OCR_NO_TEXT_FOUND = -1074395141
ERR_OCR_CHAR_REPORT_CORRUPTED = -1074395140
ERR_IMAQ_QR_DIMENSION_INVALID = -1074395139
ERR_OCR_REGION_TOO_SMALL = -1074395138
##############################################################################
# Enumerated Types
##############################################################################
class PointSymbol(Enumeration): pass
IMAQ_POINT_AS_PIXEL = PointSymbol(0)
IMAQ_POINT_AS_CROSS = PointSymbol(1)
IMAQ_POINT_USER_DEFINED = PointSymbol(2)

class MeasurementValue(Enumeration): pass
IMAQ_AREA = MeasurementValue(0)
IMAQ_AREA_CALIBRATED = MeasurementValue(1)
IMAQ_NUM_HOLES = MeasurementValue(2)
IMAQ_AREA_OF_HOLES = MeasurementValue(3)
IMAQ_TOTAL_AREA = MeasurementValue(4)
IMAQ_IMAGE_AREA = MeasurementValue(5)
IMAQ_PARTICLE_TO_IMAGE = MeasurementValue(6)
IMAQ_PARTICLE_TO_TOTAL = MeasurementValue(7)
IMAQ_CENTER_MASS_X = MeasurementValue(8)
IMAQ_CENTER_MASS_Y = MeasurementValue(9)
IMAQ_LEFT_COLUMN = MeasurementValue(10)
IMAQ_TOP_ROW = MeasurementValue(11)
IMAQ_RIGHT_COLUMN = MeasurementValue(12)
IMAQ_BOTTOM_ROW = MeasurementValue(13)
IMAQ_WIDTH = MeasurementValue(14)
IMAQ_HEIGHT = MeasurementValue(15)
IMAQ_MAX_SEGMENT_LENGTH = MeasurementValue(16)
IMAQ_MAX_SEGMENT_LEFT_COLUMN = MeasurementValue(17)
IMAQ_MAX_SEGMENT_TOP_ROW = MeasurementValue(18)
IMAQ_PERIMETER = MeasurementValue(19)
IMAQ_PERIMETER_OF_HOLES = MeasurementValue(20)
IMAQ_SIGMA_X = MeasurementValue(21)
IMAQ_SIGMA_Y = MeasurementValue(22)
IMAQ_SIGMA_XX = MeasurementValue(23)
IMAQ_SIGMA_YY = MeasurementValue(24)
IMAQ_SIGMA_XY = MeasurementValue(25)
IMAQ_PROJ_X = MeasurementValue(26)
IMAQ_PROJ_Y = MeasurementValue(27)
IMAQ_INERTIA_XX = MeasurementValue(28)
IMAQ_INERTIA_YY = MeasurementValue(29)
IMAQ_INERTIA_XY = MeasurementValue(30)
IMAQ_MEAN_H = MeasurementValue(31)
IMAQ_MEAN_V = MeasurementValue(32)
IMAQ_MAX_INTERCEPT = MeasurementValue(33)
IMAQ_MEAN_INTERCEPT = MeasurementValue(34)
IMAQ_ORIENTATION = MeasurementValue(35)
IMAQ_EQUIV_ELLIPSE_MINOR = MeasurementValue(36)
IMAQ_ELLIPSE_MAJOR = MeasurementValue(37)
IMAQ_ELLIPSE_MINOR = MeasurementValue(38)
IMAQ_ELLIPSE_RATIO = MeasurementValue(39)
IMAQ_RECT_LONG_SIDE = MeasurementValue(40)
IMAQ_RECT_SHORT_SIDE = MeasurementValue(41)
IMAQ_RECT_RATIO = MeasurementValue(42)
IMAQ_ELONGATION = MeasurementValue(43)
IMAQ_COMPACTNESS = MeasurementValue(44)
IMAQ_HEYWOOD = MeasurementValue(45)
IMAQ_TYPE_FACTOR = MeasurementValue(46)
IMAQ_HYDRAULIC = MeasurementValue(47)
IMAQ_WADDLE_DISK = MeasurementValue(48)
IMAQ_DIAGONAL = MeasurementValue(49)

class ScalingMode(Enumeration): pass
IMAQ_SCALE_LARGER = ScalingMode(0)
IMAQ_SCALE_SMALLER = ScalingMode(1)

class ScalingMethod(Enumeration): pass
IMAQ_SCALE_TO_PRESERVE_AREA = ScalingMethod(0)
IMAQ_SCALE_TO_FIT = ScalingMethod(1)

class ReferenceMode(Enumeration): pass
IMAQ_COORD_X_Y = ReferenceMode(0)
IMAQ_COORD_ORIGIN_X = ReferenceMode(1)

class RectOrientation(Enumeration): pass
IMAQ_BASE_INSIDE = RectOrientation(0)
IMAQ_BASE_OUTSIDE = RectOrientation(1)

class ShapeMode(Enumeration): pass
IMAQ_SHAPE_RECT = ShapeMode(1)
IMAQ_SHAPE_OVAL = ShapeMode(2)

class PolarityType(Enumeration): pass
IMAQ_EDGE_RISING = PolarityType(1)
IMAQ_EDGE_FALLING = PolarityType(-1)

class SizeType(Enumeration): pass
IMAQ_KEEP_LARGE = SizeType(0)
IMAQ_KEEP_SMALL = SizeType(1)

class Plane3D(Enumeration): pass
IMAQ_3D_REAL = Plane3D(0)
IMAQ_3D_IMAGINARY = Plane3D(1)
IMAQ_3D_MAGNITUDE = Plane3D(2)
IMAQ_3D_PHASE = Plane3D(3)

class PhotometricMode(Enumeration): pass
IMAQ_WHITE_IS_ZERO = PhotometricMode(0)
IMAQ_BLACK_IS_ZERO = PhotometricMode(1)

class ParticleInfoMode(Enumeration): pass
IMAQ_BASIC_INFO = ParticleInfoMode(0)
IMAQ_ALL_INFO = ParticleInfoMode(1)

class OutlineMethod(Enumeration): pass
IMAQ_EDGE_DIFFERENCE = OutlineMethod(0)
IMAQ_EDGE_GRADIENT = OutlineMethod(1)
IMAQ_EDGE_PREWITT = OutlineMethod(2)
IMAQ_EDGE_ROBERTS = OutlineMethod(3)
IMAQ_EDGE_SIGMA = OutlineMethod(4)
IMAQ_EDGE_SOBEL = OutlineMethod(5)

class MorphologyMethod(Enumeration): pass
IMAQ_AUTOM = MorphologyMethod(0)
IMAQ_CLOSE = MorphologyMethod(1)
IMAQ_DILATE = MorphologyMethod(2)
IMAQ_ERODE = MorphologyMethod(3)
IMAQ_GRADIENT = MorphologyMethod(4)
IMAQ_GRADIENTOUT = MorphologyMethod(5)
IMAQ_GRADIENTIN = MorphologyMethod(6)
IMAQ_HITMISS = MorphologyMethod(7)
IMAQ_OPEN = MorphologyMethod(8)
IMAQ_PCLOSE = MorphologyMethod(9)
IMAQ_POPEN = MorphologyMethod(10)
IMAQ_THICK = MorphologyMethod(11)
IMAQ_THIN = MorphologyMethod(12)

class MeterArcMode(Enumeration): pass
IMAQ_METER_ARC_ROI = MeterArcMode(0)
IMAQ_METER_ARC_POINTS = MeterArcMode(1)

class RakeDirection(Enumeration): pass
IMAQ_LEFT_TO_RIGHT = RakeDirection(0)
IMAQ_RIGHT_TO_LEFT = RakeDirection(1)
IMAQ_TOP_TO_BOTTOM = RakeDirection(2)
IMAQ_BOTTOM_TO_TOP = RakeDirection(3)

class TruncateMode(Enumeration): pass
IMAQ_TRUNCATE_LOW = TruncateMode(0)
IMAQ_TRUNCATE_HIGH = TruncateMode(1)

class AttenuateMode(Enumeration): pass
IMAQ_ATTENUATE_LOW = AttenuateMode(0)
IMAQ_ATTENUATE_HIGH = AttenuateMode(1)

class WindowThreadPolicy(Enumeration): pass
IMAQ_CALLING_THREAD = WindowThreadPolicy(0)
IMAQ_SEPARATE_THREAD = WindowThreadPolicy(1)

class WindowOptions(Enumeration): pass
IMAQ_WIND_RESIZABLE = WindowOptions(1)
IMAQ_WIND_TITLEBAR = WindowOptions(2)
IMAQ_WIND_CLOSEABLE = WindowOptions(4)
IMAQ_WIND_TOPMOST = WindowOptions(8)

class WindowEventType(Enumeration): pass
IMAQ_NO_EVENT = WindowEventType(0)
IMAQ_CLICK_EVENT = WindowEventType(1)
IMAQ_DRAW_EVENT = WindowEventType(2)
IMAQ_MOVE_EVENT = WindowEventType(3)
IMAQ_SIZE_EVENT = WindowEventType(4)
IMAQ_SCROLL_EVENT = WindowEventType(5)
IMAQ_ACTIVATE_EVENT = WindowEventType(6)
IMAQ_CLOSE_EVENT = WindowEventType(7)
IMAQ_DOUBLE_CLICK_EVENT = WindowEventType(8)

class VisionInfoType(Enumeration): pass
IMAQ_ANY_VISION_INFO = VisionInfoType(0)
IMAQ_PATTERN_MATCHING_INFO = VisionInfoType(1)
IMAQ_CALIBRATION_INFO = VisionInfoType(2)
IMAQ_OVERLAY_INFO = VisionInfoType(3)

class SearchStrategy(Enumeration): pass
IMAQ_CONSERVATIVE = SearchStrategy(1)
IMAQ_BALANCED = SearchStrategy(2)
IMAQ_AGGRESSIVE = SearchStrategy(3)
IMAQ_VERY_AGGRESSIVE = SearchStrategy(4)

class TwoEdgePolarityType(Enumeration): pass
IMAQ_NONE = TwoEdgePolarityType(0)
IMAQ_RISING_FALLING = TwoEdgePolarityType(1)
IMAQ_FALLING_RISING = TwoEdgePolarityType(2)
IMAQ_RISING_RISING = TwoEdgePolarityType(3)
IMAQ_FALLING_FALLING = TwoEdgePolarityType(4)

class ObjectType(Enumeration): pass
IMAQ_BRIGHT_OBJECTS = ObjectType(0)
IMAQ_DARK_OBJECTS = ObjectType(1)

class Tool(Enumeration): pass
IMAQ_NO_TOOL = Tool(-1)
IMAQ_SELECTION_TOOL = Tool(0)
IMAQ_POINT_TOOL = Tool(1)
IMAQ_LINE_TOOL = Tool(2)
IMAQ_RECTANGLE_TOOL = Tool(3)
IMAQ_OVAL_TOOL = Tool(4)
IMAQ_POLYGON_TOOL = Tool(5)
IMAQ_CLOSED_FREEHAND_TOOL = Tool(6)
IMAQ_ANNULUS_TOOL = Tool(7)
IMAQ_ZOOM_TOOL = Tool(8)
IMAQ_PAN_TOOL = Tool(9)
IMAQ_POLYLINE_TOOL = Tool(10)
IMAQ_FREEHAND_TOOL = Tool(11)
IMAQ_ROTATED_RECT_TOOL = Tool(12)
IMAQ_ZOOM_OUT_TOOL = Tool(13)

class TIFFCompressionType(Enumeration): pass
IMAQ_NO_COMPRESSION = TIFFCompressionType(0)
IMAQ_JPEG = TIFFCompressionType(1)
IMAQ_RUN_LENGTH = TIFFCompressionType(2)
IMAQ_ZIP = TIFFCompressionType(3)

class ThresholdMethod(Enumeration): pass
IMAQ_THRESH_CLUSTERING = ThresholdMethod(0)
IMAQ_THRESH_ENTROPY = ThresholdMethod(1)
IMAQ_THRESH_METRIC = ThresholdMethod(2)
IMAQ_THRESH_MOMENTS = ThresholdMethod(3)
IMAQ_THRESH_INTERCLASS = ThresholdMethod(4)

class TextAlignment(Enumeration): pass
IMAQ_LEFT = TextAlignment(0)
IMAQ_CENTER = TextAlignment(1)
IMAQ_RIGHT = TextAlignment(2)

class SpokeDirection(Enumeration): pass
IMAQ_OUTSIDE_TO_INSIDE = SpokeDirection(0)
IMAQ_INSIDE_TO_OUTSIDE = SpokeDirection(1)

class SkeletonMethod(Enumeration): pass
IMAQ_SKELETON_L = SkeletonMethod(0)
IMAQ_SKELETON_M = SkeletonMethod(1)
IMAQ_SKELETON_INVERSE = SkeletonMethod(2)

class VerticalTextAlignment(Enumeration): pass
IMAQ_BOTTOM = VerticalTextAlignment(0)
IMAQ_TOP = VerticalTextAlignment(1)
IMAQ_BASELINE = VerticalTextAlignment(2)

class CalibrationROI(Enumeration): pass
IMAQ_FULL_IMAGE = CalibrationROI(0)
IMAQ_CALIBRATION_ROI = CalibrationROI(1)
IMAQ_USER_ROI = CalibrationROI(2)
IMAQ_CALIBRATION_AND_USER_ROI = CalibrationROI(3)
IMAQ_CALIBRATION_OR_USER_ROI = CalibrationROI(4)

class ContourType(Enumeration): pass
IMAQ_EMPTY_CONTOUR = ContourType(0)
IMAQ_POINT = ContourType(1)
IMAQ_LINE = ContourType(2)
IMAQ_RECT = ContourType(3)
IMAQ_OVAL = ContourType(4)
IMAQ_CLOSED_CONTOUR = ContourType(5)
IMAQ_OPEN_CONTOUR = ContourType(6)
IMAQ_ANNULUS = ContourType(7)
IMAQ_ROTATED_RECT = ContourType(8)

class MathTransformMethod(Enumeration): pass
IMAQ_TRANSFORM_LINEAR = MathTransformMethod(0)
IMAQ_TRANSFORM_LOG = MathTransformMethod(1)
IMAQ_TRANSFORM_EXP = MathTransformMethod(2)
IMAQ_TRANSFORM_SQR = MathTransformMethod(3)
IMAQ_TRANSFORM_SQRT = MathTransformMethod(4)
IMAQ_TRANSFORM_POWX = MathTransformMethod(5)
IMAQ_TRANSFORM_POW1X = MathTransformMethod(6)

class ComplexPlane(Enumeration): pass
IMAQ_REAL = ComplexPlane(0)
IMAQ_IMAGINARY = ComplexPlane(1)
IMAQ_MAGNITUDE = ComplexPlane(2)
IMAQ_PHASE = ComplexPlane(3)

class PaletteType(Enumeration): pass
IMAQ_PALETTE_GRAY = PaletteType(0)
IMAQ_PALETTE_BINARY = PaletteType(1)
IMAQ_PALETTE_GRADIENT = PaletteType(2)
IMAQ_PALETTE_RAINBOW = PaletteType(3)
IMAQ_PALETTE_TEMPERATURE = PaletteType(4)
IMAQ_PALETTE_USER = PaletteType(5)

class ColorSensitivity(Enumeration): pass
IMAQ_SENSITIVITY_LOW = ColorSensitivity(0)
IMAQ_SENSITIVITY_MED = ColorSensitivity(1)
IMAQ_SENSITIVITY_HIGH = ColorSensitivity(2)

class ColorMode(Enumeration): pass
IMAQ_RGB = ColorMode(0)
IMAQ_HSL = ColorMode(1)
IMAQ_HSV = ColorMode(2)
IMAQ_HSI = ColorMode(3)
IMAQ_CIE = ColorMode(4)
IMAQ_CIEXYZ = ColorMode(5)

class DetectionMode(Enumeration): pass
IMAQ_DETECT_PEAKS = DetectionMode(0)
IMAQ_DETECT_VALLEYS = DetectionMode(1)

class CalibrationUnit(Enumeration): pass
IMAQ_UNDEFINED = CalibrationUnit(0)
IMAQ_ANGSTROM = CalibrationUnit(1)
IMAQ_MICROMETER = CalibrationUnit(2)
IMAQ_MILLIMETER = CalibrationUnit(3)
IMAQ_CENTIMETER = CalibrationUnit(4)
IMAQ_METER = CalibrationUnit(5)
IMAQ_KILOMETER = CalibrationUnit(6)
IMAQ_MICROINCH = CalibrationUnit(7)
IMAQ_INCH = CalibrationUnit(8)
IMAQ_FOOT = CalibrationUnit(9)
IMAQ_NAUTICMILE = CalibrationUnit(10)
IMAQ_GROUNDMILE = CalibrationUnit(11)
IMAQ_STEP = CalibrationUnit(12)

class ConcentricRakeDirection(Enumeration): pass
IMAQ_COUNTER_CLOCKWISE = ConcentricRakeDirection(0)
IMAQ_CLOCKWISE = ConcentricRakeDirection(1)

class CalibrationMode(Enumeration): pass
IMAQ_PERSPECTIVE = CalibrationMode(0)
IMAQ_NONLINEAR = CalibrationMode(1)
IMAQ_SIMPLE_CALIBRATION = CalibrationMode(2)
IMAQ_CORRECTED_IMAGE = CalibrationMode(3)

class BrowserLocation(Enumeration): pass
IMAQ_INSERT_FIRST_FREE = BrowserLocation(0)
IMAQ_INSERT_END = BrowserLocation(1)

class BrowserFrameStyle(Enumeration): pass
IMAQ_RAISED_FRAME = BrowserFrameStyle(0)
IMAQ_BEVELLED_FRAME = BrowserFrameStyle(1)
IMAQ_OUTLINE_FRAME = BrowserFrameStyle(2)
IMAQ_HIDDEN_FRAME = BrowserFrameStyle(3)
IMAQ_STEP_FRAME = BrowserFrameStyle(4)
IMAQ_RAISED_OUTLINE_FRAME = BrowserFrameStyle(5)

class BorderMethod(Enumeration): pass
IMAQ_BORDER_MIRROR = BorderMethod(0)
IMAQ_BORDER_COPY = BorderMethod(1)
IMAQ_BORDER_CLEAR = BorderMethod(2)

class BarcodeType(Enumeration): pass
IMAQ_INVALID = BarcodeType(-1)
IMAQ_CODABAR = BarcodeType(1)
IMAQ_CODE39 = BarcodeType(2)
IMAQ_CODE93 = BarcodeType(4)
IMAQ_CODE128 = BarcodeType(8)
IMAQ_EAN8 = BarcodeType(16)
IMAQ_EAN13 = BarcodeType(32)
IMAQ_I2_OF_5 = BarcodeType(64)
IMAQ_MSI = BarcodeType(128)
IMAQ_UPCA = BarcodeType(256)
IMAQ_PHARMACODE = BarcodeType(512)
IMAQ_RSS_LIMITED = BarcodeType(1024)

class AxisOrientation(Enumeration): pass
IMAQ_DIRECT = AxisOrientation(0)
IMAQ_INDIRECT = AxisOrientation(1)

class ColorIgnoreMode(Enumeration): pass
IMAQ_IGNORE_NONE = ColorIgnoreMode(0)
IMAQ_IGNORE_BLACK = ColorIgnoreMode(1)
IMAQ_IGNORE_WHITE = ColorIgnoreMode(2)
IMAQ_IGNORE_BLACK_AND_WHITE = ColorIgnoreMode(3)

class LevelType(Enumeration): pass
IMAQ_ABSOLUTE = LevelType(0)
IMAQ_RELATIVE = LevelType(1)

class MatchingMode(Enumeration): pass
IMAQ_MATCH_SHIFT_INVARIANT = MatchingMode(1)
IMAQ_MATCH_ROTATION_INVARIANT = MatchingMode(2)

class MappingMethod(Enumeration): pass
IMAQ_FULL_DYNAMIC = MappingMethod(0)
IMAQ_DOWNSHIFT = MappingMethod(1)
IMAQ_RANGE = MappingMethod(2)
IMAQ_90_PCT_DYNAMIC = MappingMethod(3)
IMAQ_PERCENT_RANGE = MappingMethod(4)
IMAQ_DEFAULT_MAPPING = MappingMethod(10)
IMAQ_MOST_SIGNIFICANT = MappingMethod(11)
IMAQ_FULL_DYNAMIC_ALWAYS = MappingMethod(12)
IMAQ_DOWNSHIFT_ALWAYS = MappingMethod(13)
IMAQ_RANGE_ALWAYS = MappingMethod(14)
IMAQ_90_PCT_DYNAMIC_ALWAYS = MappingMethod(15)
IMAQ_PERCENT_RANGE_ALWAYS = MappingMethod(16)

class ComparisonFunction(Enumeration): pass
IMAQ_CLEAR_LESS = ComparisonFunction(0)
IMAQ_CLEAR_LESS_OR_EQUAL = ComparisonFunction(1)
IMAQ_CLEAR_EQUAL = ComparisonFunction(2)
IMAQ_CLEAR_GREATER_OR_EQUAL = ComparisonFunction(3)
IMAQ_CLEAR_GREATER = ComparisonFunction(4)

class LineGaugeMethod(Enumeration): pass
IMAQ_EDGE_TO_EDGE = LineGaugeMethod(0)
IMAQ_EDGE_TO_POINT = LineGaugeMethod(1)
IMAQ_POINT_TO_EDGE = LineGaugeMethod(2)
IMAQ_POINT_TO_POINT = LineGaugeMethod(3)

class Direction3D(Enumeration): pass
IMAQ_3D_NW = Direction3D(0)
IMAQ_3D_SW = Direction3D(1)
IMAQ_3D_SE = Direction3D(2)
IMAQ_3D_NE = Direction3D(3)

class LearningMode(Enumeration): pass
IMAQ_LEARN_ALL = LearningMode(0)
IMAQ_LEARN_SHIFT_INFORMATION = LearningMode(1)
IMAQ_LEARN_ROTATION_INFORMATION = LearningMode(2)

class KernelFamily(Enumeration): pass
IMAQ_GRADIENT_FAMILY = KernelFamily(0)
IMAQ_LAPLACIAN_FAMILY = KernelFamily(1)
IMAQ_SMOOTHING_FAMILY = KernelFamily(2)
IMAQ_GAUSSIAN_FAMILY = KernelFamily(3)

class InterpolationMethod(Enumeration): pass
IMAQ_ZERO_ORDER = InterpolationMethod(0)
IMAQ_BILINEAR = InterpolationMethod(1)
IMAQ_QUADRATIC = InterpolationMethod(2)
IMAQ_CUBIC_SPLINE = InterpolationMethod(3)
IMAQ_BILINEAR_FIXED = InterpolationMethod(4)

class ImageType(Enumeration): pass
IMAQ_IMAGE_U8 = ImageType(0)
IMAQ_IMAGE_U16 = ImageType(7)
IMAQ_IMAGE_I16 = ImageType(1)
IMAQ_IMAGE_SGL = ImageType(2)
IMAQ_IMAGE_COMPLEX = ImageType(3)
IMAQ_IMAGE_RGB = ImageType(4)
IMAQ_IMAGE_HSL = ImageType(5)
IMAQ_IMAGE_RGB_U64 = ImageType(6)

class ImageFeatureMode(Enumeration): pass
IMAQ_COLOR_AND_SHAPE_FEATURES = ImageFeatureMode(0)
IMAQ_COLOR_FEATURES = ImageFeatureMode(1)
IMAQ_SHAPE_FEATURES = ImageFeatureMode(2)

class FontColor(Enumeration): pass
IMAQ_WHITE = FontColor(0)
IMAQ_BLACK = FontColor(1)
IMAQ_INVERT = FontColor(2)
IMAQ_BLACK_ON_WHITE = FontColor(3)
IMAQ_WHITE_ON_BLACK = FontColor(4)

class FlipAxis(Enumeration): pass
IMAQ_HORIZONTAL_AXIS = FlipAxis(0)
IMAQ_VERTICAL_AXIS = FlipAxis(1)
IMAQ_CENTER_AXIS = FlipAxis(2)
IMAQ_DIAG_L_TO_R_AXIS = FlipAxis(3)
IMAQ_DIAG_R_TO_L_AXIS = FlipAxis(4)

class EdgeProcess(Enumeration): pass
IMAQ_FIRST = EdgeProcess(0)
IMAQ_FIRST_AND_LAST = EdgeProcess(1)
IMAQ_ALL = EdgeProcess(2)
IMAQ_BEST = EdgeProcess(3)

class DrawMode(Enumeration): pass
IMAQ_DRAW_VALUE = DrawMode(0)
IMAQ_DRAW_INVERT = DrawMode(2)
IMAQ_PAINT_VALUE = DrawMode(1)
IMAQ_PAINT_INVERT = DrawMode(3)
IMAQ_HIGHLIGHT_VALUE = DrawMode(4)

class NearestNeighborMetric(Enumeration): pass
IMAQ_METRIC_MAXIMUM = NearestNeighborMetric(0)
IMAQ_METRIC_SUM = NearestNeighborMetric(1)
IMAQ_METRIC_EUCLIDEAN = NearestNeighborMetric(2)

class ReadResolution(Enumeration): pass
IMAQ_LOW_RESOLUTION = ReadResolution(0)
IMAQ_MEDIUM_RESOLUTION = ReadResolution(1)
IMAQ_HIGH_RESOLUTION = ReadResolution(2)

class ThresholdMode(Enumeration): pass
IMAQ_FIXED_RANGE = ThresholdMode(0)
IMAQ_COMPUTED_UNIFORM = ThresholdMode(1)
IMAQ_COMPUTED_LINEAR = ThresholdMode(2)
IMAQ_COMPUTED_NONLINEAR = ThresholdMode(3)

class ReadStrategy(Enumeration): pass
IMAQ_READ_AGGRESSIVE = ReadStrategy(0)
IMAQ_READ_CONSERVATIVE = ReadStrategy(1)

class MeasurementType(Enumeration): pass
IMAQ_MT_CENTER_OF_MASS_X = MeasurementType(0)
IMAQ_MT_CENTER_OF_MASS_Y = MeasurementType(1)
IMAQ_MT_FIRST_PIXEL_X = MeasurementType(2)
IMAQ_MT_FIRST_PIXEL_Y = MeasurementType(3)
IMAQ_MT_BOUNDING_RECT_LEFT = MeasurementType(4)
IMAQ_MT_BOUNDING_RECT_TOP = MeasurementType(5)
IMAQ_MT_BOUNDING_RECT_RIGHT = MeasurementType(6)
IMAQ_MT_BOUNDING_RECT_BOTTOM = MeasurementType(7)
IMAQ_MT_MAX_FERET_DIAMETER_START_X = MeasurementType(8)
IMAQ_MT_MAX_FERET_DIAMETER_START_Y = MeasurementType(9)
IMAQ_MT_MAX_FERET_DIAMETER_END_X = MeasurementType(10)
IMAQ_MT_MAX_FERET_DIAMETER_END_Y = MeasurementType(11)
IMAQ_MT_MAX_HORIZ_SEGMENT_LENGTH_LEFT = MeasurementType(12)
IMAQ_MT_MAX_HORIZ_SEGMENT_LENGTH_RIGHT = MeasurementType(13)
IMAQ_MT_MAX_HORIZ_SEGMENT_LENGTH_ROW = MeasurementType(14)
IMAQ_MT_BOUNDING_RECT_WIDTH = MeasurementType(16)
IMAQ_MT_BOUNDING_RECT_HEIGHT = MeasurementType(17)
IMAQ_MT_BOUNDING_RECT_DIAGONAL = MeasurementType(18)
IMAQ_MT_PERIMETER = MeasurementType(19)
IMAQ_MT_CONVEX_HULL_PERIMETER = MeasurementType(20)
IMAQ_MT_HOLES_PERIMETER = MeasurementType(21)
IMAQ_MT_MAX_FERET_DIAMETER = MeasurementType(22)
IMAQ_MT_EQUIVALENT_ELLIPSE_MAJOR_AXIS = MeasurementType(23)
IMAQ_MT_EQUIVALENT_ELLIPSE_MINOR_AXIS = MeasurementType(24)
IMAQ_MT_EQUIVALENT_ELLIPSE_MINOR_AXIS_FERET = MeasurementType(25)
IMAQ_MT_EQUIVALENT_RECT_LONG_SIDE = MeasurementType(26)
IMAQ_MT_EQUIVALENT_RECT_SHORT_SIDE = MeasurementType(27)
IMAQ_MT_EQUIVALENT_RECT_DIAGONAL = MeasurementType(28)
IMAQ_MT_EQUIVALENT_RECT_SHORT_SIDE_FERET = MeasurementType(29)
IMAQ_MT_AVERAGE_HORIZ_SEGMENT_LENGTH = MeasurementType(30)
IMAQ_MT_AVERAGE_VERT_SEGMENT_LENGTH = MeasurementType(31)
IMAQ_MT_HYDRAULIC_RADIUS = MeasurementType(32)
IMAQ_MT_WADDEL_DISK_DIAMETER = MeasurementType(33)
IMAQ_MT_AREA = MeasurementType(35)
IMAQ_MT_HOLES_AREA = MeasurementType(36)
IMAQ_MT_PARTICLE_AND_HOLES_AREA = MeasurementType(37)
IMAQ_MT_CONVEX_HULL_AREA = MeasurementType(38)
IMAQ_MT_IMAGE_AREA = MeasurementType(39)
IMAQ_MT_NUMBER_OF_HOLES = MeasurementType(41)
IMAQ_MT_NUMBER_OF_HORIZ_SEGMENTS = MeasurementType(42)
IMAQ_MT_NUMBER_OF_VERT_SEGMENTS = MeasurementType(43)
IMAQ_MT_ORIENTATION = MeasurementType(45)
IMAQ_MT_MAX_FERET_DIAMETER_ORIENTATION = MeasurementType(46)
IMAQ_MT_AREA_BY_IMAGE_AREA = MeasurementType(48)
IMAQ_MT_AREA_BY_PARTICLE_AND_HOLES_AREA = MeasurementType(49)
IMAQ_MT_RATIO_OF_EQUIVALENT_ELLIPSE_AXES = MeasurementType(50)
IMAQ_MT_RATIO_OF_EQUIVALENT_RECT_SIDES = MeasurementType(51)
IMAQ_MT_ELONGATION_FACTOR = MeasurementType(53)
IMAQ_MT_COMPACTNESS_FACTOR = MeasurementType(54)
IMAQ_MT_HEYWOOD_CIRCULARITY_FACTOR = MeasurementType(55)
IMAQ_MT_TYPE_FACTOR = MeasurementType(56)
IMAQ_MT_SUM_X = MeasurementType(58)
IMAQ_MT_SUM_Y = MeasurementType(59)
IMAQ_MT_SUM_XX = MeasurementType(60)
IMAQ_MT_SUM_XY = MeasurementType(61)
IMAQ_MT_SUM_YY = MeasurementType(62)
IMAQ_MT_SUM_XXX = MeasurementType(63)
IMAQ_MT_SUM_XXY = MeasurementType(64)
IMAQ_MT_SUM_XYY = MeasurementType(65)
IMAQ_MT_SUM_YYY = MeasurementType(66)
IMAQ_MT_MOMENT_OF_INERTIA_XX = MeasurementType(68)
IMAQ_MT_MOMENT_OF_INERTIA_XY = MeasurementType(69)
IMAQ_MT_MOMENT_OF_INERTIA_YY = MeasurementType(70)
IMAQ_MT_MOMENT_OF_INERTIA_XXX = MeasurementType(71)
IMAQ_MT_MOMENT_OF_INERTIA_XXY = MeasurementType(72)
IMAQ_MT_MOMENT_OF_INERTIA_XYY = MeasurementType(73)
IMAQ_MT_MOMENT_OF_INERTIA_YYY = MeasurementType(74)
IMAQ_MT_NORM_MOMENT_OF_INERTIA_XX = MeasurementType(75)
IMAQ_MT_NORM_MOMENT_OF_INERTIA_XY = MeasurementType(76)
IMAQ_MT_NORM_MOMENT_OF_INERTIA_YY = MeasurementType(77)
IMAQ_MT_NORM_MOMENT_OF_INERTIA_XXX = MeasurementType(78)
IMAQ_MT_NORM_MOMENT_OF_INERTIA_XXY = MeasurementType(79)
IMAQ_MT_NORM_MOMENT_OF_INERTIA_XYY = MeasurementType(80)
IMAQ_MT_NORM_MOMENT_OF_INERTIA_YYY = MeasurementType(81)
IMAQ_MT_HU_MOMENT_1 = MeasurementType(82)
IMAQ_MT_HU_MOMENT_2 = MeasurementType(83)
IMAQ_MT_HU_MOMENT_3 = MeasurementType(84)
IMAQ_MT_HU_MOMENT_4 = MeasurementType(85)
IMAQ_MT_HU_MOMENT_5 = MeasurementType(86)
IMAQ_MT_HU_MOMENT_6 = MeasurementType(87)
IMAQ_MT_HU_MOMENT_7 = MeasurementType(88)

class GeometricMatchingMode(Enumeration): pass
IMAQ_GEOMETRIC_MATCH_SHIFT_INVARIANT = GeometricMatchingMode(0)
IMAQ_GEOMETRIC_MATCH_ROTATION_INVARIANT = GeometricMatchingMode(1)
IMAQ_GEOMETRIC_MATCH_SCALE_INVARIANT = GeometricMatchingMode(2)
IMAQ_GEOMETRIC_MATCH_OCCLUSION_INVARIANT = GeometricMatchingMode(4)

class ButtonLabel(Enumeration): pass
IMAQ_BUTTON_OK = ButtonLabel(0)
IMAQ_BUTTON_SAVE = ButtonLabel(1)
IMAQ_BUTTON_SELECT = ButtonLabel(2)
IMAQ_BUTTON_LOAD = ButtonLabel(3)

class NearestNeighborMethod(Enumeration): pass
IMAQ_MINIMUM_MEAN_DISTANCE = NearestNeighborMethod(0)
IMAQ_K_NEAREST_NEIGHBOR = NearestNeighborMethod(1)
IMAQ_NEAREST_PROTOTYPE = NearestNeighborMethod(2)

class QRMirrorMode(Enumeration): pass
IMAQ_QR_MIRROR_MODE_AUTO_DETECT = QRMirrorMode(-2)
IMAQ_QR_MIRROR_MODE_MIRRORED = QRMirrorMode(1)
IMAQ_QR_MIRROR_MODE_NORMAL = QRMirrorMode(0)

class ColumnProcessingMode(Enumeration): pass
IMAQ_AVERAGE_COLUMNS = ColumnProcessingMode(0)
IMAQ_MEDIAN_COLUMNS = ColumnProcessingMode(1)

class FindReferenceDirection(Enumeration): pass
IMAQ_LEFT_TO_RIGHT_DIRECT = FindReferenceDirection(0)
IMAQ_LEFT_TO_RIGHT_INDIRECT = FindReferenceDirection(1)
IMAQ_TOP_TO_BOTTOM_DIRECT = FindReferenceDirection(2)
IMAQ_TOP_TO_BOTTOM_INDIRECT = FindReferenceDirection(3)
IMAQ_RIGHT_TO_LEFT_DIRECT = FindReferenceDirection(4)
IMAQ_RIGHT_TO_LEFT_INDIRECT = FindReferenceDirection(5)
IMAQ_BOTTOM_TO_TOP_DIRECT = FindReferenceDirection(6)
IMAQ_BOTTOM_TO_TOP_INDIRECT = FindReferenceDirection(7)

class MulticoreOperation(Enumeration): pass
IMAQ_GET_CORES = MulticoreOperation(0)
IMAQ_SET_CORES = MulticoreOperation(1)
IMAQ_USE_MAX_AVAILABLE = MulticoreOperation(2)

class GroupBehavior(Enumeration): pass
IMAQ_GROUP_CLEAR = GroupBehavior(0)
IMAQ_GROUP_KEEP = GroupBehavior(1)
IMAQ_GROUP_TRANSFORM = GroupBehavior(2)

class QRDimensions(Enumeration): pass
IMAQ_QR_DIMENSIONS_AUTO_DETECT = QRDimensions(0)
IMAQ_QR_DIMENSIONS_11x11 = QRDimensions(11)
IMAQ_QR_DIMENSIONS_13x13 = QRDimensions(13)
IMAQ_QR_DIMENSIONS_15x15 = QRDimensions(15)
IMAQ_QR_DIMENSIONS_17x17 = QRDimensions(17)
IMAQ_QR_DIMENSIONS_21x21 = QRDimensions(21)
IMAQ_QR_DIMENSIONS_25x25 = QRDimensions(25)
IMAQ_QR_DIMENSIONS_29x29 = QRDimensions(29)
IMAQ_QR_DIMENSIONS_33x33 = QRDimensions(33)
IMAQ_QR_DIMENSIONS_37x37 = QRDimensions(37)
IMAQ_QR_DIMENSIONS_41x41 = QRDimensions(41)
IMAQ_QR_DIMENSIONS_45x45 = QRDimensions(45)
IMAQ_QR_DIMENSIONS_49x49 = QRDimensions(49)
IMAQ_QR_DIMENSIONS_53x53 = QRDimensions(53)
IMAQ_QR_DIMENSIONS_57x57 = QRDimensions(57)
IMAQ_QR_DIMENSIONS_61x61 = QRDimensions(61)
IMAQ_QR_DIMENSIONS_65x65 = QRDimensions(65)
IMAQ_QR_DIMENSIONS_69x69 = QRDimensions(69)
IMAQ_QR_DIMENSIONS_73x73 = QRDimensions(73)
IMAQ_QR_DIMENSIONS_77x77 = QRDimensions(77)
IMAQ_QR_DIMENSIONS_81x81 = QRDimensions(81)
IMAQ_QR_DIMENSIONS_85x85 = QRDimensions(85)
IMAQ_QR_DIMENSIONS_89x89 = QRDimensions(89)
IMAQ_QR_DIMENSIONS_93x93 = QRDimensions(93)
IMAQ_QR_DIMENSIONS_97x97 = QRDimensions(97)
IMAQ_QR_DIMENSIONS_101x101 = QRDimensions(101)
IMAQ_QR_DIMENSIONS_105x105 = QRDimensions(105)
IMAQ_QR_DIMENSIONS_109x109 = QRDimensions(109)
IMAQ_QR_DIMENSIONS_113x113 = QRDimensions(113)
IMAQ_QR_DIMENSIONS_117x117 = QRDimensions(117)
IMAQ_QR_DIMENSIONS_121x121 = QRDimensions(121)
IMAQ_QR_DIMENSIONS_125x125 = QRDimensions(125)
IMAQ_QR_DIMENSIONS_129x129 = QRDimensions(129)
IMAQ_QR_DIMENSIONS_133x133 = QRDimensions(133)
IMAQ_QR_DIMENSIONS_137x137 = QRDimensions(137)
IMAQ_QR_DIMENSIONS_141x141 = QRDimensions(141)
IMAQ_QR_DIMENSIONS_145x145 = QRDimensions(145)
IMAQ_QR_DIMENSIONS_149x149 = QRDimensions(149)
IMAQ_QR_DIMENSIONS_153x153 = QRDimensions(153)
IMAQ_QR_DIMENSIONS_157x157 = QRDimensions(157)
IMAQ_QR_DIMENSIONS_161x161 = QRDimensions(161)
IMAQ_QR_DIMENSIONS_165x165 = QRDimensions(165)
IMAQ_QR_DIMENSIONS_169x169 = QRDimensions(169)
IMAQ_QR_DIMENSIONS_173x173 = QRDimensions(173)
IMAQ_QR_DIMENSIONS_177x177 = QRDimensions(177)

class QRCellFilterMode(Enumeration): pass
IMAQ_QR_CELL_FILTER_MODE_AUTO_DETECT = QRCellFilterMode(-2)
IMAQ_QR_CELL_FILTER_MODE_AVERAGE = QRCellFilterMode(0)
IMAQ_QR_CELL_FILTER_MODE_MEDIAN = QRCellFilterMode(1)
IMAQ_QR_CELL_FILTER_MODE_CENTRAL_AVERAGE = QRCellFilterMode(2)
IMAQ_QR_CELL_FILTER_MODE_HIGH_AVERAGE = QRCellFilterMode(3)
IMAQ_QR_CELL_FILTER_MODE_LOW_AVERAGE = QRCellFilterMode(4)
IMAQ_QR_CELL_FILTER_MODE_VERY_HIGH_AVERAGE = QRCellFilterMode(5)
IMAQ_QR_CELL_FILTER_MODE_VERY_LOW_AVERAGE = QRCellFilterMode(6)
IMAQ_QR_CELL_FILTER_MODE_ALL = QRCellFilterMode(8)

class RoundingMode(Enumeration): pass
IMAQ_ROUNDING_MODE_OPTIMIZE = RoundingMode(0)
IMAQ_ROUNDING_MODE_TRUNCATE = RoundingMode(1)

class QRDemodulationMode(Enumeration): pass
IMAQ_QR_DEMODULATION_MODE_AUTO_DETECT = QRDemodulationMode(-2)
IMAQ_QR_DEMODULATION_MODE_HISTOGRAM = QRDemodulationMode(0)
IMAQ_QR_DEMODULATION_MODE_LOCAL_CONTRAST = QRDemodulationMode(1)
IMAQ_QR_DEMODULATION_MODE_COMBINED = QRDemodulationMode(2)
IMAQ_QR_DEMODULATION_MODE_ALL = QRDemodulationMode(3)

class ContrastMode(Enumeration): pass
IMAQ_ORIGINAL_CONTRAST = ContrastMode(0)
IMAQ_REVERSED_CONTRAST = ContrastMode(1)
IMAQ_BOTH_CONTRASTS = ContrastMode(2)

class QRPolarities(Enumeration): pass
IMAQ_QR_POLARITY_AUTO_DETECT = QRPolarities(-2)
IMAQ_QR_POLARITY_BLACK_ON_WHITE = QRPolarities(0)
IMAQ_QR_POLARITY_WHITE_ON_BLACK = QRPolarities(1)

class QRRotationMode(Enumeration): pass
IMAQ_QR_ROTATION_MODE_UNLIMITED = QRRotationMode(0)
IMAQ_QR_ROTATION_MODE_0_DEGREES = QRRotationMode(1)
IMAQ_QR_ROTATION_MODE_90_DEGREES = QRRotationMode(2)
IMAQ_QR_ROTATION_MODE_180_DEGREES = QRRotationMode(3)
IMAQ_QR_ROTATION_MODE_270_DEGREES = QRRotationMode(4)

class QRGradingMode(Enumeration): pass
IMAQ_QR_NO_GRADING = QRGradingMode(0)

class StraightEdgeSearchMode(Enumeration): pass
IMAQ_USE_FIRST_RAKE_EDGES = StraightEdgeSearchMode(0)
IMAQ_USE_BEST_RAKE_EDGES = StraightEdgeSearchMode(1)
IMAQ_USE_BEST_HOUGH_LINE = StraightEdgeSearchMode(2)
IMAQ_USE_FIRST_PROJECTION_EDGE = StraightEdgeSearchMode(3)
IMAQ_USE_BEST_PROJECTION_EDGE = StraightEdgeSearchMode(4)

class SearchDirection(Enumeration): pass
IMAQ_SEARCH_DIRECTION_LEFT_TO_RIGHT = SearchDirection(0)
IMAQ_SEARCH_DIRECTION_RIGHT_TO_LEFT = SearchDirection(1)
IMAQ_SEARCH_DIRECTION_TOP_TO_BOTTOM = SearchDirection(2)
IMAQ_SEARCH_DIRECTION_BOTTOM_TO_TOP = SearchDirection(3)

class QRStreamMode(Enumeration): pass
IMAQ_QR_MODE_NUMERIC = QRStreamMode(0)
IMAQ_QR_MODE_ALPHANUMERIC = QRStreamMode(1)
IMAQ_QR_MODE_RAW_BYTE = QRStreamMode(2)
IMAQ_QR_MODE_EAN128_TOKEN = QRStreamMode(3)
IMAQ_QR_MODE_EAN128_DATA = QRStreamMode(4)
IMAQ_QR_MODE_ECI = QRStreamMode(5)
IMAQ_QR_MODE_KANJI = QRStreamMode(6)

class ParticleClassifierType(Enumeration): pass
IMAQ_PARTICLE_LARGEST = ParticleClassifierType(0)
IMAQ_PARTICLE_ALL = ParticleClassifierType(1)

class QRCellSampleSize(Enumeration): pass
IMAQ_QR_CELL_SAMPLE_SIZE_AUTO_DETECT = QRCellSampleSize(-2)
IMAQ_QR_CELL_SAMPLE_SIZE1X1 = QRCellSampleSize(1)
IMAQ_QR_CELL_SAMPLE_SIZE2X2 = QRCellSampleSize(2)
IMAQ_QR_CELL_SAMPLE_SIZE3X3 = QRCellSampleSize(3)
IMAQ_QR_CELL_SAMPLE_SIZE4X4 = QRCellSampleSize(4)
IMAQ_QR_CELL_SAMPLE_SIZE5X5 = QRCellSampleSize(5)
IMAQ_QR_CELL_SAMPLE_SIZE6X6 = QRCellSampleSize(6)
IMAQ_QR_CELL_SAMPLE_SIZE7X7 = QRCellSampleSize(7)

class RakeProcessType(Enumeration): pass
IMAQ_GET_FIRST_EDGES = RakeProcessType(0)
IMAQ_GET_FIRST_AND_LAST_EDGES = RakeProcessType(1)
IMAQ_GET_ALL_EDGES = RakeProcessType(2)
IMAQ_GET_BEST_EDGES = RakeProcessType(3)

class GeometricSetupDataItem(Enumeration): pass
IMAQ_CURVE_EXTRACTION_MODE = GeometricSetupDataItem(0)
IMAQ_CURVE_EDGE_THRSHOLD = GeometricSetupDataItem(1)
IMAQ_CURVE_EDGE_FILTER = GeometricSetupDataItem(2)
IMAQ_MINIMUM_CURVE_LENGTH = GeometricSetupDataItem(3)
IMAQ_CURVE_ROW_SEARCH_STEP_SIZE = GeometricSetupDataItem(4)
IMAQ_CURVE_COL_SEARCH_STEP_SIZE = GeometricSetupDataItem(5)
IMAQ_CURVE_MAX_END_POINT_GAP = GeometricSetupDataItem(6)
IMAQ_EXTRACT_CLOSED_CURVES = GeometricSetupDataItem(7)
IMAQ_ENABLE_SUBPIXEL_CURVE_EXTRACTION = GeometricSetupDataItem(8)
IMAQ_ENABLE_CORRELATION_SCORE = GeometricSetupDataItem(9)
IMAQ_ENABLE_SUBPIXEL_ACCURACY = GeometricSetupDataItem(10)
IMAQ_SUBPIXEL_ITERATIONS = GeometricSetupDataItem(11)
IMAQ_SUBPIXEL_TOLERANCE = GeometricSetupDataItem(12)
IMAQ_INITIAL_MATCH_LIST_LENGTH = GeometricSetupDataItem(13)
IMAQ_ENABLE_TARGET_TEMPLATE_CURVESCORE = GeometricSetupDataItem(14)
IMAQ_MINIMUM_MATCH_SEPARATION_DISTANCE = GeometricSetupDataItem(15)
IMAQ_MINIMUM_MATCH_SEPARATION_ANGLE = GeometricSetupDataItem(16)
IMAQ_MINIMUM_MATCH_SEPARATION_SCALE = GeometricSetupDataItem(17)
IMAQ_MAXIMUM_MATCH_OVERLAP = GeometricSetupDataItem(18)
IMAQ_ENABLE_COARSE_RESULT = GeometricSetupDataItem(19)
IMAQ_ENABLE_CALIBRATION_SUPPORT = GeometricSetupDataItem(20)
IMAQ_ENABLE_CONTRAST_REVERSAL = GeometricSetupDataItem(21)
IMAQ_SEARCH_STRATEGY = GeometricSetupDataItem(22)
IMAQ_REFINEMENT_MATCH_FACTOR = GeometricSetupDataItem(23)
IMAQ_SUBPIXEL_MATCH_FACTOR = GeometricSetupDataItem(24)
IMAQ_MAX_REFINEMENT_ITERATIONS = GeometricSetupDataItem(25)

class DistortionModel(Enumeration): pass
IMAQ_POLYNOMIAL_MODEL = DistortionModel(0)
IMAQ_DIVISION_MODEL = DistortionModel(1)
IMAQ_NO_DISTORTION_MODEL = DistortionModel(-1)

class CalibrationThumbnailType(Enumeration): pass
IMAQ_CAMARA_MODEL_TYPE = CalibrationThumbnailType(0)
IMAQ_PERSPECTIVE_TYPE = CalibrationThumbnailType(1)
IMAQ_MICRO_PLANE_TYPE = CalibrationThumbnailType(2)

class SettingType(Enumeration): pass
IMAQ_ROTATION_ANGLE_RANGE = SettingType(0)
IMAQ_SCALE_RANGE = SettingType(1)
IMAQ_OCCLUSION_RANGE = SettingType(2)

class SegmentationDistanceLevel(Enumeration): pass
IMAQ_SEGMENTATION_LEVEL_CONSERVATIVE = SegmentationDistanceLevel(0)
IMAQ_SEGMENTATION_LEVEL_AGGRESSIVE = SegmentationDistanceLevel(1)

class ExtractContourSelection(Enumeration): pass
IMAQ_CLOSEST = ExtractContourSelection(0)
IMAQ_LONGEST = ExtractContourSelection(1)
IMAQ_STRONGEST = ExtractContourSelection(2)

class FindTransformMode(Enumeration): pass
IMAQ_FIND_REFERENCE = FindTransformMode(0)
IMAQ_UPDATE_TRANSFORM = FindTransformMode(1)

class ExtractContourDirection(Enumeration): pass
IMAQ_RECT_LEFT_RIGHT = ExtractContourDirection(0)
IMAQ_RECT_RIGHT_LEFT = ExtractContourDirection(1)
IMAQ_RECT_TOP_BOTTOM = ExtractContourDirection(2)
IMAQ_RECT_BOTTOM_TOP = ExtractContourDirection(3)
IMAQ_ANNULUS_INNER_OUTER = ExtractContourDirection(4)
IMAQ_ANNULUS_OUTER_INNER = ExtractContourDirection(5)
IMAQ_ANNULUS_START_STOP = ExtractContourDirection(6)
IMAQ_ANNULUS_STOP_START = ExtractContourDirection(7)

class EdgePolaritySearchMode(Enumeration): pass
IMAQ_SEARCH_FOR_ALL_EDGES = EdgePolaritySearchMode(0)
IMAQ_SEARCH_FOR_RISING_EDGES = EdgePolaritySearchMode(1)
IMAQ_SEARCH_FOR_FALLING_EDGES = EdgePolaritySearchMode(2)

class Connectivity(Enumeration): pass
IMAQ_FOUR_CONNECTED = Connectivity(0)
IMAQ_EIGHT_CONNECTED = Connectivity(1)

class MorphologyReconstructOperation(Enumeration): pass
IMAQ_DILATE_RECONSTRUCT = MorphologyReconstructOperation(0)
IMAQ_ERODE_RECONSTRUCT = MorphologyReconstructOperation(1)

class WaveletType(Enumeration): pass
IMAQ_DB02 = WaveletType(0)
IMAQ_DB03 = WaveletType(1)
IMAQ_DB04 = WaveletType(2)
IMAQ_DB05 = WaveletType(3)
IMAQ_DB06 = WaveletType(4)
IMAQ_DB07 = WaveletType(5)
IMAQ_DB08 = WaveletType(6)
IMAQ_DB09 = WaveletType(7)
IMAQ_DB10 = WaveletType(8)
IMAQ_DB11 = WaveletType(9)
IMAQ_DB12 = WaveletType(10)
IMAQ_DB13 = WaveletType(11)
IMAQ_DB14 = WaveletType(12)
IMAQ_HAAR = WaveletType(13)
IMAQ_BIOR1_3 = WaveletType(14)
IMAQ_BIOR1_5 = WaveletType(15)
IMAQ_BIOR2_2 = WaveletType(16)
IMAQ_BIOR2_4 = WaveletType(17)
IMAQ_BIOR2_6 = WaveletType(18)
IMAQ_BIOR2_8 = WaveletType(19)
IMAQ_BIOR3_1 = WaveletType(20)
IMAQ_BIOR3_3 = WaveletType(21)
IMAQ_BIOR3_5 = WaveletType(22)
IMAQ_BIOR3_7 = WaveletType(23)
IMAQ_BIOR3_9 = WaveletType(24)
IMAQ_BIOR4_4 = WaveletType(25)
IMAQ_COIF1 = WaveletType(26)
IMAQ_COIF2 = WaveletType(27)
IMAQ_COIF3 = WaveletType(28)
IMAQ_COIF4 = WaveletType(29)
IMAQ_COIF5 = WaveletType(30)
IMAQ_SYM2 = WaveletType(31)
IMAQ_SYM3 = WaveletType(32)
IMAQ_SYM4 = WaveletType(33)
IMAQ_SYM5 = WaveletType(34)
IMAQ_SYM6 = WaveletType(35)
IMAQ_SYM7 = WaveletType(36)
IMAQ_SYM8 = WaveletType(37)
IMAQ_BIOR5_5 = WaveletType(38)
IMAQ_BIOR6_8 = WaveletType(39)

class ParticleClassifierThresholdType(Enumeration): pass
IMAQ_THRESHOLD_MANUAL = ParticleClassifierThresholdType(0)
IMAQ_THRESHOLD_AUTO = ParticleClassifierThresholdType(1)
IMAQ_THRESHOLD_LOCAL = ParticleClassifierThresholdType(2)

class MeasureParticlesCalibrationMode(Enumeration): pass
IMAQ_CALIBRATION_MODE_PIXEL = MeasureParticlesCalibrationMode(0)
IMAQ_CALIBRATION_MODE_CALIBRATED = MeasureParticlesCalibrationMode(1)
IMAQ_CALIBRATION_MODE_BOTH = MeasureParticlesCalibrationMode(2)

class GeometricMatchingSearchStrategy(Enumeration): pass
IMAQ_GEOMETRIC_MATCHING_CONSERVATIVE = GeometricMatchingSearchStrategy(0)
IMAQ_GEOMETRIC_MATCHING_BALANCED = GeometricMatchingSearchStrategy(1)
IMAQ_GEOMETRIC_MATCHING_AGGRESSIVE = GeometricMatchingSearchStrategy(2)

class ColorClassificationResolution(Enumeration): pass
IMAQ_CLASSIFIER_LOW_RESOLUTION = ColorClassificationResolution(0)
IMAQ_CLASSIFIER_MEDIUM_RESOLUTION = ColorClassificationResolution(1)
IMAQ_CLASSIFIER_HIGH_RESOLUTION = ColorClassificationResolution(2)

class ConnectionConstraintType(Enumeration): pass
IMAQ_DISTANCE_CONSTRAINT = ConnectionConstraintType(0)
IMAQ_ANGLE_CONSTRAINT = ConnectionConstraintType(1)
IMAQ_CONNECTIVITY_CONSTRAINT = ConnectionConstraintType(2)
IMAQ_GRADIENT_CONSTRAINT = ConnectionConstraintType(3)
IMAQ_NUM_CONNECTION_CONSTRAINT_TYPES = ConnectionConstraintType(4)

class Barcode2DContrast(Enumeration): pass
IMAQ_ALL_BARCODE_2D_CONTRASTS = Barcode2DContrast(0)
IMAQ_BLACK_ON_WHITE_BARCODE_2D = Barcode2DContrast(1)
IMAQ_WHITE_ON_BLACK_BARCODE_2D = Barcode2DContrast(2)

class QRModelType(Enumeration): pass
IMAQ_QR_MODELTYPE_AUTO_DETECT = QRModelType(0)
IMAQ_QR_MODELTYPE_MICRO = QRModelType(1)
IMAQ_QR_MODELTYPE_MODEL1 = QRModelType(2)
IMAQ_QR_MODELTYPE_MODEL2 = QRModelType(3)

class WindowBackgroundFillStyle(Enumeration): pass
IMAQ_FILL_STYLE_SOLID = WindowBackgroundFillStyle(0)
IMAQ_FILL_STYLE_HATCH = WindowBackgroundFillStyle(2)
IMAQ_FILL_STYLE_DEFAULT = WindowBackgroundFillStyle(3)

class ExtractionMode(Enumeration): pass
IMAQ_NORMAL_IMAGE = ExtractionMode(0)
IMAQ_UNIFORM_REGIONS = ExtractionMode(1)

class EdgeFilterSize(Enumeration): pass
IMAQ_FINE = EdgeFilterSize(0)
IMAQ_NORMAL = EdgeFilterSize(1)
IMAQ_CONTOUR_TRACING = EdgeFilterSize(2)

class Barcode2DSearchMode(Enumeration): pass
IMAQ_SEARCH_MULTIPLE = Barcode2DSearchMode(0)
IMAQ_SEARCH_SINGLE_CONSERVATIVE = Barcode2DSearchMode(1)
IMAQ_SEARCH_SINGLE_AGGRESSIVE = Barcode2DSearchMode(2)

class DataMatrixSubtype(Enumeration): pass
IMAQ_ALL_DATA_MATRIX_SUBTYPES = DataMatrixSubtype(0)
IMAQ_DATA_MATRIX_SUBTYPES_ECC_000_ECC_140 = DataMatrixSubtype(1)
IMAQ_DATA_MATRIX_SUBTYPE_ECC_200 = DataMatrixSubtype(2)

class FeatureType(Enumeration): pass
IMAQ_NOT_FOUND_FEATURE = FeatureType(0)
IMAQ_CIRCLE_FEATURE = FeatureType(1)
IMAQ_ELLIPSE_FEATURE = FeatureType(2)
IMAQ_CONST_CURVE_FEATURE = FeatureType(3)
IMAQ_RECTANGLE_FEATURE = FeatureType(4)
IMAQ_LEG_FEATURE = FeatureType(5)
IMAQ_CORNER_FEATURE = FeatureType(6)
IMAQ_PARALLEL_LINE_PAIR_FEATURE = FeatureType(7)
IMAQ_PAIR_OF_PARALLEL_LINE_PAIRS_FEATURE = FeatureType(8)
IMAQ_LINE_FEATURE = FeatureType(9)
IMAQ_CLOSED_CURVE_FEATURE = FeatureType(10)

class Barcode2DCellShape(Enumeration): pass
IMAQ_SQUARE_CELLS = Barcode2DCellShape(0)
IMAQ_ROUND_CELLS = Barcode2DCellShape(1)

class LocalThresholdMethod(Enumeration): pass
IMAQ_NIBLACK = LocalThresholdMethod(0)
IMAQ_BACKGROUND_CORRECTION = LocalThresholdMethod(1)

class Barcode2DType(Enumeration): pass
IMAQ_PDF417 = Barcode2DType(0)
IMAQ_DATA_MATRIX_ECC_000 = Barcode2DType(1)
IMAQ_DATA_MATRIX_ECC_050 = Barcode2DType(2)
IMAQ_DATA_MATRIX_ECC_080 = Barcode2DType(3)
IMAQ_DATA_MATRIX_ECC_100 = Barcode2DType(4)
IMAQ_DATA_MATRIX_ECC_140 = Barcode2DType(5)
IMAQ_DATA_MATRIX_ECC_200 = Barcode2DType(6)

class ClassifierEngineType(Enumeration): pass
IMAQ_ENGINE_NONE = ClassifierEngineType(0)
IMAQ_ENGINE_NEAREST_NEIGHBOR = ClassifierEngineType(1)
IMAQ_ENGINE_SUPPORT_VECTOR_MACHINE = ClassifierEngineType(2)

class ClassifierType(Enumeration): pass
IMAQ_CLASSIFIER_CUSTOM = ClassifierType(0)
IMAQ_CLASSIFIER_PARTICLE = ClassifierType(1)
IMAQ_CLASSIFIER_COLOR = ClassifierType(2)
IMAQ_CLASSIFIER_TEXTURE = ClassifierType(3)

class ParticleType(Enumeration): pass
IMAQ_PARTICLE_BRIGHT = ParticleType(0)
IMAQ_PARTICLE_DARK = ParticleType(1)

class VisionInfoType2(Enumeration): pass
IMAQ_VISIONINFO_CALIBRATION = VisionInfoType2(0x01)
IMAQ_VISIONINFO_OVERLAY = VisionInfoType2(0x02)
IMAQ_VISIONINFO_GRAYTEMPLATE = VisionInfoType2(0x04)
IMAQ_VISIONINFO_COLORTEMPLATE = VisionInfoType2(0x08)
IMAQ_VISIONINFO_GEOMETRICTEMPLATE = VisionInfoType2(0x10)
IMAQ_VISIONINFO_CUSTOMDATA = VisionInfoType2(0x20)
IMAQ_VISIONINFO_GOLDENTEMPLATE = VisionInfoType2(0x40)
IMAQ_VISIONINFO_GEOMETRICTEMPLATE2 = VisionInfoType2(0x80)
IMAQ_VISIONINFO_ALL = VisionInfoType2(0xFFFFFFFF)

class ReadClassifierFileMode(Enumeration): pass
IMAQ_CLASSIFIER_READ_ALL = ReadClassifierFileMode(0)
IMAQ_CLASSIFIER_READ_SAMPLES = ReadClassifierFileMode(1)
IMAQ_CLASSIFIER_READ_PROPERTIES = ReadClassifierFileMode(2)

class WriteClassifierFileMode(Enumeration): pass
IMAQ_CLASSIFIER_WRITE_ALL = WriteClassifierFileMode(0)
IMAQ_CLASSIFIER_WRITE_CLASSIFY_ONLY = WriteClassifierFileMode(1)

class Barcode2DShape(Enumeration): pass
IMAQ_SQUARE_BARCODE_2D = Barcode2DShape(0)
IMAQ_RECTANGULAR_BARCODE_2D = Barcode2DShape(1)

class DataMatrixRotationMode(Enumeration): pass
IMAQ_UNLIMITED_ROTATION = DataMatrixRotationMode(0)
IMAQ_0_DEGREES = DataMatrixRotationMode(1)
IMAQ_90_DEGREES = DataMatrixRotationMode(2)
IMAQ_180_DEGREES = DataMatrixRotationMode(3)
IMAQ_270_DEGREES = DataMatrixRotationMode(4)

class AIMGrade(Enumeration): pass
IMAQ_AIM_GRADE_F = AIMGrade(0)
IMAQ_AIM_GRADE_D = AIMGrade(1)
IMAQ_AIM_GRADE_C = AIMGrade(2)
IMAQ_AIM_GRADE_B = AIMGrade(3)
IMAQ_AIM_GRADE_A = AIMGrade(4)

class DataMatrixCellFillMode(Enumeration): pass
IMAQ_AUTO_DETECT_CELL_FILL_MODE = DataMatrixCellFillMode(-2)
IMAQ_LOW_FILL = DataMatrixCellFillMode(0)
IMAQ_NORMAL_FILL = DataMatrixCellFillMode(1)

class DataMatrixDemodulationMode(Enumeration): pass
IMAQ_AUTO_DETECT_DEMODULATION_MODE = DataMatrixDemodulationMode(-2)
IMAQ_HISTOGRAM = DataMatrixDemodulationMode(0)
IMAQ_LOCAL_CONTRAST = DataMatrixDemodulationMode(1)
IMAQ_COMBINED = DataMatrixDemodulationMode(2)
IMAQ_ALL_DEMODULATION_MODES = DataMatrixDemodulationMode(3)

class DataMatrixECC(Enumeration): pass
IMAQ_AUTO_DETECT_ECC = DataMatrixECC(-2)
IMAQ_ECC_000 = DataMatrixECC(0)
IMAQ_ECC_050 = DataMatrixECC(50)
IMAQ_ECC_080 = DataMatrixECC(80)
IMAQ_ECC_100 = DataMatrixECC(100)
IMAQ_ECC_140 = DataMatrixECC(140)
IMAQ_ECC_000_140 = DataMatrixECC(190)
IMAQ_ECC_200 = DataMatrixECC(200)

class DataMatrixPolarity(Enumeration): pass
IMAQ_AUTO_DETECT_POLARITY = DataMatrixPolarity(-2)
IMAQ_BLACK_DATA_ON_WHITE_BACKGROUND = DataMatrixPolarity(0)
IMAQ_WHITE_DATA_ON_BLACK_BACKGROUND = DataMatrixPolarity(1)

class DataMatrixCellFilterMode(Enumeration): pass
IMAQ_AUTO_DETECT_CELL_FILTER_MODE = DataMatrixCellFilterMode(-2)
IMAQ_AVERAGE_FILTER = DataMatrixCellFilterMode(0)
IMAQ_MEDIAN_FILTER = DataMatrixCellFilterMode(1)
IMAQ_CENTRAL_AVERAGE_FILTER = DataMatrixCellFilterMode(2)
IMAQ_HIGH_AVERAGE_FILTER = DataMatrixCellFilterMode(3)
IMAQ_LOW_AVERAGE_FILTER = DataMatrixCellFilterMode(4)
IMAQ_VERY_HIGH_AVERAGE_FILTER = DataMatrixCellFilterMode(5)
IMAQ_VERY_LOW_AVERAGE_FILTER = DataMatrixCellFilterMode(6)
IMAQ_ALL_CELL_FILTERS = DataMatrixCellFilterMode(8)

class WindowBackgroundHatchStyle(Enumeration): pass
IMAQ_HATCH_STYLE_HORIZONTAL = WindowBackgroundHatchStyle(0)
IMAQ_HATCH_STYLE_VERTICAL = WindowBackgroundHatchStyle(1)
IMAQ_HATCH_STYLE_FORWARD_DIAGONAL = WindowBackgroundHatchStyle(2)
IMAQ_HATCH_STYLE_BACKWARD_DIAGONAL = WindowBackgroundHatchStyle(3)
IMAQ_HATCH_STYLE_CROSS = WindowBackgroundHatchStyle(4)
IMAQ_HATCH_STYLE_CROSS_HATCH = WindowBackgroundHatchStyle(5)

class DataMatrixMirrorMode(Enumeration): pass
IMAQ_AUTO_DETECT_MIRROR = DataMatrixMirrorMode(-2)
IMAQ_APPEARS_NORMAL = DataMatrixMirrorMode(0)
IMAQ_APPEARS_MIRRORED = DataMatrixMirrorMode(1)

class CalibrationMode2(Enumeration): pass
IMAQ_PERSPECTIVE_MODE = CalibrationMode2(0)
IMAQ_MICROPLANE_MODE = CalibrationMode2(1)
IMAQ_SIMPLE_CALIBRATION_MODE = CalibrationMode2(2)
IMAQ_CORRECTED_IMAGE_MODE = CalibrationMode2(3)
IMAQ_NO_CALIBRATION_MODE = CalibrationMode2(4)

class DataMatrixGradingMode(Enumeration): pass
IMAQ_NO_GRADING = DataMatrixGradingMode(0)
IMAQ_PREPARE_FOR_AIM = DataMatrixGradingMode(1)

class WaveletTransformMode(Enumeration): pass
IMAQ_WAVELET_TRANSFORM_INTEGER = WaveletTransformMode(0)
IMAQ_WAVELET_TRANSFORM_FLOATING_POINT = WaveletTransformMode(1)

class NormalizationMethod(Enumeration): pass
IMAQ_NORMALIZATION_NONE = NormalizationMethod(0)
IMAQ_NORMALIZATION_HISTOGRAM_MATCHING = NormalizationMethod(1)
IMAQ_NORMALIZATION_AVERAGE_MATCHING = NormalizationMethod(2)

class RegistrationMethod(Enumeration): pass
IMAQ_REGISTRATION_NONE = RegistrationMethod(0)
IMAQ_REGISTRATION_PERSPECTIVE = RegistrationMethod(1)

class LinearAveragesMode(Enumeration): pass
IMAQ_COLUMN_AVERAGES = LinearAveragesMode(1)
IMAQ_ROW_AVERAGES = LinearAveragesMode(2)
IMAQ_RISING_DIAGONAL_AVERAGES = LinearAveragesMode(4)
IMAQ_FALLING_DIAGONAL_AVERAGES = LinearAveragesMode(8)
IMAQ_ALL_LINEAR_AVERAGES = LinearAveragesMode(15)

class CompressionType(Enumeration): pass
IMAQ_COMPRESSION_NONE = CompressionType(0)
IMAQ_COMPRESSION_JPEG = CompressionType(1)
IMAQ_COMPRESSION_PACKED_BINARY = CompressionType(2)

class FlattenType(Enumeration): pass
IMAQ_FLATTEN_IMAGE = FlattenType(0)
IMAQ_FLATTEN_IMAGE_AND_VISION_INFO = FlattenType(1)

class DataMatrixCellSampleSize(Enumeration): pass
IMAQ_AUTO_DETECT_CELL_SAMPLE_SIZE = DataMatrixCellSampleSize(-2)
IMAQ_1x1 = DataMatrixCellSampleSize(1)
IMAQ_2x2 = DataMatrixCellSampleSize(2)
IMAQ_3x3 = DataMatrixCellSampleSize(3)
IMAQ_4x4 = DataMatrixCellSampleSize(4)
IMAQ_5x5 = DataMatrixCellSampleSize(5)
IMAQ_6x6 = DataMatrixCellSampleSize(6)
IMAQ_7x7 = DataMatrixCellSampleSize(7)

##############################################################################
# Forward Declare Data Structures
##############################################################################
ContourID = ctypes.c_int
SESSION_ID = ctypes.c_ulong
AVISession = ctypes.c_int
FilterName = ctypes.c_char_p
String255 = ctypes.c_char*256
class OCRSpacingOptions(ctypes.Structure): pass
class OCRProcessingOptions(ctypes.Structure): pass
class ReadTextOptions(ctypes.Structure): pass
class CharInfo(ctypes.Structure): pass
class CharReport(ctypes.Structure): pass
class ReadTextReport(ctypes.Structure): pass
class DivisionModel(ctypes.Structure): pass
class FocalLength(ctypes.Structure): pass
class PolyModel(ctypes.Structure): pass
class DistortionModelParams(ctypes.Structure): pass
class PointFloat(ctypes.Structure): pass
class InternalParameters(ctypes.Structure): pass
class MaxGridSize(ctypes.Structure): pass
class ImageSize(ctypes.Structure): pass
class CalibrationReferencePoints(ctypes.Structure): pass
class GetCameraParametersReport(ctypes.Structure): pass
class CalibrationAxisInfo(ctypes.Structure): pass
class CalibrationLearnSetupInfo(ctypes.Structure): pass
class GridDescriptor(ctypes.Structure): pass
class ErrorStatistics(ctypes.Structure): pass
class GetCalibrationInfoReport(ctypes.Structure): pass
class EdgePolarity(ctypes.Structure): pass
class ClampSettings(ctypes.Structure): pass
class PointDouble(ctypes.Structure): pass
class PointDoublePair(ctypes.Structure): pass
class ClampResults(ctypes.Structure): pass
class ClampPoints(ctypes.Structure): pass
class RGBValue(ctypes.Structure): pass
class ClampOverlaySettings(ctypes.Structure): pass
class ClampMax2Report(ctypes.Structure): pass
class ContourFitSplineReport(ctypes.Structure): pass
class LineFloat(ctypes.Structure): pass
class LineEquation(ctypes.Structure): pass
class ContourFitLineReport(ctypes.Structure): pass
class ContourFitPolynomialReport(ctypes.Structure): pass
class PartialCircle(ctypes.Structure): pass
class PartialEllipse(ctypes.Structure): pass
class SetupMatchPatternData(ctypes.Structure): pass
class RangeSettingDouble(ctypes.Structure): pass
class GeometricAdvancedSetupDataOption(ctypes.Structure): pass
class ContourInfoReport(ctypes.Structure): pass
class ROILabel(ctypes.Structure): pass
class SupervisedColorSegmentationReport(ctypes.Structure): pass
class LabelToROIReport(ctypes.Structure): pass
class ColorSegmenationOptions(ctypes.Structure): pass
class ClassifiedCurve(ctypes.Structure): pass
class RangeDouble(ctypes.Structure): pass
class RangeLabel(ctypes.Structure): pass
class CurvatureAnalysisReport(ctypes.Structure): pass
class Disparity(ctypes.Structure): pass
class ComputeDistancesReport(ctypes.Structure): pass
class MatchMode(ctypes.Structure): pass
class ClassifiedDisparity(ctypes.Structure): pass
class ClassifyDistancesReport(ctypes.Structure): pass
class ContourComputeCurvatureReport(ctypes.Structure): pass
class ContourOverlaySettings(ctypes.Structure): pass
class CurveParameters(ctypes.Structure): pass
class ExtractContourReport(ctypes.Structure): pass
class ConnectionConstraint(ctypes.Structure): pass
class ExtractTextureFeaturesReport(ctypes.Structure): pass
class WaveletBandsReport(ctypes.Structure): pass
class CircleFitOptions(ctypes.Structure): pass
class EdgeOptions2(ctypes.Structure): pass
class FindCircularEdgeOptions(ctypes.Structure): pass
class FindConcentricEdgeOptions(ctypes.Structure): pass
class ConcentricEdgeFitOptions(ctypes.Structure): pass
class FindConcentricEdgeReport(ctypes.Structure): pass
class FindCircularEdgeReport(ctypes.Structure): pass
class WindowSize(ctypes.Structure): pass
class DisplacementVector(ctypes.Structure): pass
class WaveletOptions(ctypes.Structure): pass
class CooccurrenceOptions(ctypes.Structure): pass
class ParticleClassifierLocalThresholdOptions(ctypes.Structure): pass
class RangeFloat(ctypes.Structure): pass
class ParticleClassifierAutoThresholdOptions(ctypes.Structure): pass
class ParticleClassifierPreprocessingOptions2(ctypes.Structure): pass
class MeasureParticlesReport(ctypes.Structure): pass
class GeometricPatternMatch3(ctypes.Structure): pass
class MatchGeometricPatternAdvancedOptions3(ctypes.Structure): pass
class ColorOptions(ctypes.Structure): pass
class SampleScore(ctypes.Structure): pass
class ClassifierReportAdvanced(ctypes.Structure): pass
class LearnGeometricPatternAdvancedOptions2(ctypes.Structure): pass
class ParticleFilterOptions2(ctypes.Structure): pass
class FindEdgeOptions2(ctypes.Structure): pass
class FindEdgeReport(ctypes.Structure): pass
class FindTransformRectOptions2(ctypes.Structure): pass
class FindTransformRectsOptions2(ctypes.Structure): pass
class ReadTextReport3(ctypes.Structure): pass
class CharacterStatistics(ctypes.Structure): pass
class CharReport3(ctypes.Structure): pass
class ArcInfo2(ctypes.Structure): pass
class EdgeReport2(ctypes.Structure): pass
class SearchArcInfo(ctypes.Structure): pass
class ConcentricRakeReport2(ctypes.Structure): pass
class SpokeReport2(ctypes.Structure): pass
class EdgeInfo(ctypes.Structure): pass
class SearchLineInfo(ctypes.Structure): pass
class RakeReport2(ctypes.Structure): pass
class TransformBehaviors(ctypes.Structure): pass
class QRCodeDataToken(ctypes.Structure): pass
class ParticleFilterOptions(ctypes.Structure): pass
class StraightEdgeReport2(ctypes.Structure): pass
class StraightEdgeOptions(ctypes.Structure): pass
class StraightEdge(ctypes.Structure): pass
class QRCodeSearchOptions(ctypes.Structure): pass
class QRCodeSizeOptions(ctypes.Structure): pass
class QRCodeDescriptionOptions(ctypes.Structure): pass
class QRCodeReport(ctypes.Structure): pass
class AIMGradeReport(ctypes.Structure): pass
class DataMatrixSizeOptions(ctypes.Structure): pass
class DataMatrixDescriptionOptions(ctypes.Structure): pass
class DataMatrixSearchOptions(ctypes.Structure): pass
class DataMatrixReport(ctypes.Structure): pass
class JPEG2000FileAdvancedOptions(ctypes.Structure): pass
class MatchGeometricPatternAdvancedOptions2(ctypes.Structure): pass
class InspectionAlignment(ctypes.Structure): pass
class InspectionOptions(ctypes.Structure): pass
class CharReport2(ctypes.Structure): pass
class CharInfo2(ctypes.Structure): pass
class ReadTextReport2(ctypes.Structure): pass
class EllipseFeature(ctypes.Structure): pass
class CircleFeature(ctypes.Structure): pass
class ConstCurveFeature(ctypes.Structure): pass
class RectangleFeature(ctypes.Structure): pass
class LegFeature(ctypes.Structure): pass
class CornerFeature(ctypes.Structure): pass
class LineFeature(ctypes.Structure): pass
class ParallelLinePairFeature(ctypes.Structure): pass
class PairOfParallelLinePairsFeature(ctypes.Structure): pass
class GeometricFeature(ctypes.Union): pass
class FeatureData(ctypes.Structure): pass
class GeometricPatternMatch2(ctypes.Structure): pass
class ClosedCurveFeature(ctypes.Structure): pass
class LineMatch(ctypes.Structure): pass
class LineDescriptor(ctypes.Structure): pass
class RectangleDescriptor(ctypes.Structure): pass
class RectangleMatch(ctypes.Structure): pass
class EllipseDescriptor(ctypes.Structure): pass
class EllipseMatch(ctypes.Structure): pass
class CircleMatch(ctypes.Structure): pass
class CircleDescriptor(ctypes.Structure): pass
class ShapeDetectionOptions(ctypes.Structure): pass
class Curve(ctypes.Structure): pass
class CurveOptions(ctypes.Structure): pass
class Barcode2DInfo(ctypes.Structure): pass
class DataMatrixOptions(ctypes.Structure): pass
class ClassifierAccuracyReport(ctypes.Structure): pass
class NearestNeighborClassResult(ctypes.Structure): pass
class NearestNeighborTrainingReport(ctypes.Structure): pass
class ParticleClassifierPreprocessingOptions(ctypes.Structure): pass
class ClassifierSampleInfo(ctypes.Structure): pass
class ClassScore(ctypes.Structure): pass
class ClassifierReport(ctypes.Structure): pass
class NearestNeighborOptions(ctypes.Structure): pass
class ParticleClassifierOptions(ctypes.Structure): pass
class RGBU64Value(ctypes.Structure): pass
class GeometricPatternMatch(ctypes.Structure): pass
class MatchGeometricPatternAdvancedOptions(ctypes.Structure): pass
class MatchGeometricPatternOptions(ctypes.Structure): pass
class LearnGeometricPatternAdvancedOptions(ctypes.Structure): pass
class FitEllipseOptions(ctypes.Structure): pass
class FitCircleOptions(ctypes.Structure): pass
class ConstructROIOptions2(ctypes.Structure): pass
class HSLValue(ctypes.Structure): pass
class HSVValue(ctypes.Structure): pass
class HSIValue(ctypes.Structure): pass
class CIELabValue(ctypes.Structure): pass
class CIEXYZValue(ctypes.Structure): pass
class Color2(ctypes.Union): pass
class BestEllipse2(ctypes.Structure): pass
class LearnPatternAdvancedOptions(ctypes.Structure): pass
class AVIInfo(ctypes.Structure): pass
class LearnPatternAdvancedShiftOptions(ctypes.Structure): pass
class LearnPatternAdvancedRotationOptions(ctypes.Structure): pass
class MatchPatternAdvancedOptions(ctypes.Structure): pass
class ParticleFilterCriteria2(ctypes.Structure): pass
class BestCircle2(ctypes.Structure): pass
class OCRSpacingOptions(ctypes.Structure): pass
class OCRProcessingOptions(ctypes.Structure): pass
class ReadTextOptions(ctypes.Structure): pass
class CharInfo(ctypes.Structure): pass
class Rect(ctypes.Structure): pass
class CharReport(ctypes.Structure): pass
class ReadTextReport(ctypes.Structure): pass
class Point(ctypes.Structure): pass
class Annulus(ctypes.Structure): pass
class EdgeLocationReport(ctypes.Structure): pass
class EdgeOptions(ctypes.Structure): pass
class EdgeReport(ctypes.Structure): pass
class ExtremeReport(ctypes.Structure): pass
class FitLineOptions(ctypes.Structure): pass
class DisplayMapping(ctypes.Structure): pass
class DetectExtremesOptions(ctypes.Structure): pass
class ImageInfo(ctypes.Structure): pass
class LCDOptions(ctypes.Structure): pass
class LCDReport(ctypes.Structure): pass
class LCDSegments(ctypes.Structure): pass
class LearnCalibrationOptions(ctypes.Structure): pass
class LearnColorPatternOptions(ctypes.Structure): pass
class Line(ctypes.Structure): pass
class LinearAverages(ctypes.Structure): pass
class LineProfile(ctypes.Structure): pass
class MatchColorPatternOptions(ctypes.Structure): pass
class HistogramReport(ctypes.Structure): pass
class ArcInfo(ctypes.Structure): pass
class AxisReport(ctypes.Structure): pass
class BarcodeInfo(ctypes.Structure): pass
class BCGOptions(ctypes.Structure): pass
class BestCircle(ctypes.Structure): pass
class BestEllipse(ctypes.Structure): pass
class BestLine(ctypes.Structure): pass
class BrowserOptions(ctypes.Structure): pass
class CoordinateSystem(ctypes.Structure): pass
class CalibrationInfo(ctypes.Structure): pass
class CalibrationPoints(ctypes.Structure): pass
class CaliperOptions(ctypes.Structure): pass
class CaliperReport(ctypes.Structure): pass
class DrawTextOptions(ctypes.Structure): pass
class CircleReport(ctypes.Structure): pass
class ClosedContour(ctypes.Structure): pass
class ColorHistogramReport(ctypes.Structure): pass
class ColorInformation(ctypes.Structure): pass
class Complex(ctypes.Structure): pass
class ConcentricRakeReport(ctypes.Structure): pass
class ConstructROIOptions(ctypes.Structure): pass
class ContourInfo(ctypes.Structure): pass
class ContourUnion(ctypes.Union): pass
class ContourInfo2(ctypes.Structure): pass
class ContourPoint(ctypes.Structure): pass
class CoordinateTransform(ctypes.Structure): pass
class CoordinateTransform2(ctypes.Structure): pass
class CannyOptions(ctypes.Structure): pass
class Range(ctypes.Structure): pass
class UserPointSymbol(ctypes.Structure): pass
class View3DOptions(ctypes.Structure): pass
class MatchPatternOptions(ctypes.Structure): pass
class TIFFFileOptions(ctypes.Structure): pass
class Color(ctypes.Union): pass
class PixelValue(ctypes.Union): pass
class OpenContour(ctypes.Structure): pass
class OverlayTextOptions(ctypes.Structure): pass
class ParticleFilterCriteria(ctypes.Structure): pass
class ParticleReport(ctypes.Structure): pass
class PatternMatch(ctypes.Structure): pass
class QuantifyData(ctypes.Structure): pass
class QuantifyReport(ctypes.Structure): pass
class RakeOptions(ctypes.Structure): pass
class RakeReport(ctypes.Structure): pass
class TransformReport(ctypes.Structure): pass
class ShapeReport(ctypes.Structure): pass
class MeterArc(ctypes.Structure): pass
class ThresholdData(ctypes.Structure): pass
class StructuringElement(ctypes.Structure): pass
class SpokeReport(ctypes.Structure): pass
class SimpleEdgeOptions(ctypes.Structure): pass
class SelectParticleCriteria(ctypes.Structure): pass
class SegmentInfo(ctypes.Structure): pass
class RotationAngleRange(ctypes.Structure): pass
class RotatedRect(ctypes.Structure): pass
class ROIProfile(ctypes.Structure): pass
class ToolWindowOptions(ctypes.Structure): pass
class SpokeOptions(ctypes.Structure): pass
##############################################################################
# Data Structures
##############################################################################
DivisionModel._fields_ = [
    ("kappa", ctypes.c_float),
    ]
FocalLength._fields_ = [
    ("fx", ctypes.c_float),
    ("fy", ctypes.c_float),
    ]
PolyModel._fields_ = [
    ("kCoeffs", ctypes.POINTER(ctypes.c_float)),
    ("numKCoeffs", ctypes.c_uint),
    ("p1", ctypes.c_float),
    ("p2", ctypes.c_float),
    ]
DistortionModelParams._fields_ = [
    ("distortionModel", DistortionModel),
    ("polyModel", PolyModel),
    ("divisionModel", DivisionModel),
    ]
PointFloat._fields_ = [
    ("x", ctypes.c_float),
    ("y", ctypes.c_float),
    ]
InternalParameters._fields_ = [
    ("isInsufficientData", ctypes.c_char),
    ("focalLength", FocalLength),
    ("opticalCenter", PointFloat),
    ]
MaxGridSize._fields_ = [
    ("xMax", ctypes.c_uint),
    ("yMax", ctypes.c_uint),
    ]
ImageSize._fields_ = [
    ("xRes", ctypes.c_uint),
    ("yRes", ctypes.c_uint),
    ]
CalibrationReferencePoints._fields_ = [
    ("pixelCoords", ctypes.POINTER(PointDouble)),
    ("numPixelCoords", ctypes.c_uint),
    ("realCoords", ctypes.POINTER(PointDouble)),
    ("numRealCoords", ctypes.c_uint),
    ("units", CalibrationUnit),
    ("imageSize", ImageSize),
    ]
GetCameraParametersReport._fields_ = [
    ("projectionMatrix", ctypes.POINTER(ctypes.c_double)),
    ("projectionMatrixRows", ctypes.c_uint),
    ("projectionMatrixCols", ctypes.c_uint),
    ("distortion", DistortionModelParams),
    ("internalParams", InternalParameters),
    ]
CalibrationAxisInfo._fields_ = [
    ("center", PointFloat),
    ("rotationAngle", ctypes.c_float),
    ("axisDirection", AxisOrientation),
    ]
CalibrationLearnSetupInfo._fields_ = [
    ("calibrationMethod", CalibrationMode2),
    ("distortionModel", DistortionModel),
    ("scaleMode", ScalingMethod),
    ("roiMode", CalibrationROI),
    ("learnCorrectionTable", ctypes.c_char),
    ]
GridDescriptor._fields_ = [
    ("xStep", ctypes.c_float),
    ("yStep", ctypes.c_float),
    ("unit", CalibrationUnit),
    ]
ErrorStatistics._fields_ = [
    ("mean", ctypes.c_double),
    ("maximum", ctypes.c_double),
    ("standardDeviation", ctypes.c_double),
    ("distortion", ctypes.c_double),
    ]
GetCalibrationInfoReport._fields_ = [
    ("userRoi", ROI),
    ("calibrationRoi", ROI),
    ("axisInfo", CalibrationAxisInfo),
    ("learnSetupInfo", CalibrationLearnSetupInfo),
    ("gridDescriptor", GridDescriptor),
    ("errorMap", ctypes.POINTER(ctypes.c_float)),
    ("errorMapRows", ctypes.c_uint),
    ("errorMapCols", ctypes.c_uint),
    ("errorStatistics", ErrorStatistics),
    ]
EdgePolarity._fields_ = [
    ("start", EdgePolaritySearchMode),
    ("end", EdgePolaritySearchMode),
    ]
ClampSettings._fields_ = [
    ("angleRange", ctypes.c_double),
    ("edgePolarity", EdgePolarity),
    ]
PointDouble._fields_ = [
    ("x", ctypes.c_double),
    ("y", ctypes.c_double),
    ]
PointDoublePair._fields_ = [
    ("start", PointDouble),
    ("end", PointDouble),
    ]
ClampResults._fields_ = [
    ("distancePix", ctypes.c_double),
    ("distanceRealWorld", ctypes.c_double),
    ("angleAbs", ctypes.c_double),
    ("angleRelative", ctypes.c_double),
    ]
ClampPoints._fields_ = [
    ("pixel", PointDoublePair),
    ("realWorld", PointDoublePair),
    ]
RGBValue._fields_ = [
    ("B", ctypes.c_ubyte),
    ("G", ctypes.c_ubyte),
    ("R", ctypes.c_ubyte),
    ("alpha", ctypes.c_ubyte),
    ]
ClampOverlaySettings._fields_ = [
    ("showSearchArea", ctypes.c_int),
    ("showCurves", ctypes.c_int),
    ("showClampLocation", ctypes.c_int),
    ("showResult", ctypes.c_int),
    ("searchAreaColor", RGBValue),
    ("curvesColor", RGBValue),
    ("clampLocationsColor", RGBValue),
    ("resultColor", RGBValue),
    ("overlayGroupName", ctypes.c_char_p),
    ]
ClampMax2Report._fields_ = [
    ("clampResults", ClampResults),
    ("clampPoints", ClampPoints),
    ("calibrationValid", ctypes.c_uint),
    ]
ContourFitSplineReport._fields_ = [
    ("points", ctypes.POINTER(PointDouble)),
    ("numberOfPoints", ctypes.c_int),
    ]
LineFloat._fields_ = [
    ("start", PointFloat),
    ("end", PointFloat),
    ]
LineEquation._fields_ = [
    ("a", ctypes.c_double),
    ("b", ctypes.c_double),
    ("c", ctypes.c_double),
    ]
ContourFitLineReport._fields_ = [
    ("lineSegment", LineFloat),
    ("lineEquation", LineEquation),
    ]
ContourFitPolynomialReport._fields_ = [
    ("bestFit", ctypes.POINTER(PointDouble)),
    ("numberOfPoints", ctypes.c_int),
    ("polynomialCoefficients", ctypes.POINTER(ctypes.c_double)),
    ("numberOfCoefficients", ctypes.c_int),
    ]
PartialCircle._fields_ = [
    ("center", PointFloat),
    ("radius", ctypes.c_double),
    ("startAngle", ctypes.c_double),
    ("endAngle", ctypes.c_double),
    ]
PartialEllipse._fields_ = [
    ("center", PointFloat),
    ("angle", ctypes.c_double),
    ("majorRadius", ctypes.c_double),
    ("minorRadius", ctypes.c_double),
    ("startAngle", ctypes.c_double),
    ("endAngle", ctypes.c_double),
    ]
SetupMatchPatternData._fields_ = [
    ("matchSetupData", ctypes.POINTER(ctypes.c_ubyte)),
    ("numMatchSetupData", ctypes.c_int),
    ]
RangeSettingDouble._fields_ = [
    ("settingType", SettingType),
    ("min", ctypes.c_double),
    ("max", ctypes.c_double),
    ]
GeometricAdvancedSetupDataOption._fields_ = [
    ("type", GeometricSetupDataItem),
    ("value", ctypes.c_double),
    ]
ContourInfoReport._fields_ = [
    ("pointsPixel", ctypes.POINTER(PointDouble)),
    ("numPointsPixel", ctypes.c_uint),
    ("pointsReal", ctypes.POINTER(PointDouble)),
    ("numPointsReal", ctypes.c_uint),
    ("curvaturePixel", ctypes.POINTER(ctypes.c_double)),
    ("numCurvaturePixel", ctypes.c_uint),
    ("curvatureReal", ctypes.POINTER(ctypes.c_double)),
    ("numCurvatureReal", ctypes.c_uint),
    ("length", ctypes.c_double),
    ("lengthReal", ctypes.c_double),
    ("hasEquation", ctypes.c_uint),
    ]
ROILabel._fields_ = [
    ("className", ctypes.c_char_p),
    ("label", ctypes.c_uint),
    ]
SupervisedColorSegmentationReport._fields_ = [
    ("labelOut", ctypes.POINTER(ROILabel)),
    ("numLabelOut", ctypes.c_uint),
    ]
LabelToROIReport._fields_ = [
    ("roiArray", ctypes.POINTER(ROI)),
    ("numOfROIs", ctypes.c_uint),
    ("labelsOutArray", ctypes.POINTER(ctypes.c_uint)),
    ("numOfLabels", ctypes.c_uint),
    ("isTooManyVectorsArray", ctypes.POINTER(ctypes.c_int)),
    ("isTooManyVectorsArraySize", ctypes.c_uint),
    ]
ColorSegmenationOptions._fields_ = [
    ("windowX", ctypes.c_uint),
    ("windowY", ctypes.c_uint),
    ("stepSize", ctypes.c_uint),
    ("minParticleArea", ctypes.c_uint),
    ("maxParticleArea", ctypes.c_uint),
    ("isFineSegment", ctypes.c_short),
    ]
ClassifiedCurve._fields_ = [
    ("length", ctypes.c_double),
    ("lengthReal", ctypes.c_double),
    ("maxCurvature", ctypes.c_double),
    ("maxCurvatureReal", ctypes.c_double),
    ("label", ctypes.c_uint),
    ("curvePoints", ctypes.POINTER(PointDouble)),
    ("numCurvePoints", ctypes.c_uint),
    ]
RangeDouble._fields_ = [
    ("minValue", ctypes.c_double),
    ("maxValue", ctypes.c_double),
    ]
RangeLabel._fields_ = [
    ("range", RangeDouble),
    ("label", ctypes.c_uint),
    ]
CurvatureAnalysisReport._fields_ = [
    ("curves", ctypes.POINTER(ClassifiedCurve)),
    ("numCurves", ctypes.c_uint),
    ]
Disparity._fields_ = [
    ("current", PointDouble),
    ("reference", PointDouble),
    ("distance", ctypes.c_double),
    ]
ComputeDistancesReport._fields_ = [
    ("distances", ctypes.POINTER(Disparity)),
    ("numDistances", ctypes.c_uint),
    ("distancesReal", ctypes.POINTER(Disparity)),
    ("numDistancesReal", ctypes.c_uint),
    ]
MatchMode._fields_ = [
    ("rotation", ctypes.c_uint),
    ("scale", ctypes.c_uint),
    ("occlusion", ctypes.c_uint),
    ]
ClassifiedDisparity._fields_ = [
    ("length", ctypes.c_double),
    ("lengthReal", ctypes.c_double),
    ("maxDistance", ctypes.c_double),
    ("maxDistanceReal", ctypes.c_double),
    ("label", ctypes.c_uint),
    ("templateSubsection", ctypes.POINTER(PointDouble)),
    ("numTemplateSubsection", ctypes.c_uint),
    ("targetSubsection", ctypes.POINTER(PointDouble)),
    ("numTargetSubsection", ctypes.c_uint),
    ]
ClassifyDistancesReport._fields_ = [
    ("classifiedDistances", ctypes.POINTER(ClassifiedDisparity)),
    ("numClassifiedDistances", ctypes.c_uint),
    ]
ContourComputeCurvatureReport._fields_ = [
    ("curvaturePixel", ctypes.POINTER(ctypes.c_double)),
    ("numCurvaturePixel", ctypes.c_uint),
    ("curvatureReal", ctypes.POINTER(ctypes.c_double)),
    ("numCurvatureReal", ctypes.c_uint),
    ]
ContourOverlaySettings._fields_ = [
    ("overlay", ctypes.c_uint),
    ("color", RGBValue),
    ("width", ctypes.c_uint),
    ("maintainWidth", ctypes.c_uint),
    ]
CurveParameters._fields_ = [
    ("extractionMode", ExtractionMode),
    ("threshold", ctypes.c_int),
    ("filterSize", EdgeFilterSize),
    ("minLength", ctypes.c_int),
    ("searchStep", ctypes.c_int),
    ("maxEndPointGap", ctypes.c_int),
    ("subpixel", ctypes.c_int),
    ]
ExtractContourReport._fields_ = [
    ("contourPoints", ctypes.POINTER(PointDouble)),
    ("numContourPoints", ctypes.c_int),
    ("sourcePoints", ctypes.POINTER(PointDouble)),
    ("numSourcePoints", ctypes.c_int),
    ]
ConnectionConstraint._fields_ = [
    ("constraintType", ConnectionConstraintType),
    ("range", RangeDouble),
    ]
ExtractTextureFeaturesReport._fields_ = [
    ("waveletBands", ctypes.POINTER(ctypes.c_int)),
    ("numWaveletBands", ctypes.c_int),
    ("textureFeatures", ctypes.POINTER(ctypes.POINTER(ctypes.c_double))),
    ("textureFeaturesRows", ctypes.c_int),
    ("textureFeaturesCols", ctypes.c_int),
    ]
WaveletBandsReport._fields_ = [
    ("LLBand", ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
    ("LHBand", ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
    ("HLBand", ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
    ("HHBand", ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
    ("LLLBand", ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
    ("LLHBand", ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
    ("LHLBand", ctypes.c_float),
    ("LHHBand", ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
    ("rows", ctypes.c_int),
    ("cols", ctypes.c_int),
    ]
CircleFitOptions._fields_ = [
    ("maxRadius", ctypes.c_int),
    ("stepSize", ctypes.c_double),
    ("processType", RakeProcessType),
    ]
EdgeOptions2._fields_ = [
    ("polarity", EdgePolaritySearchMode),
    ("kernelSize", ctypes.c_uint),
    ("width", ctypes.c_uint),
    ("minThreshold", ctypes.c_float),
    ("interpolationType", InterpolationMethod),
    ("columnProcessingMode", ColumnProcessingMode),
    ]
FindCircularEdgeOptions._fields_ = [
    ("direction", SpokeDirection),
    ("showSearchArea", ctypes.c_int),
    ("showSearchLines", ctypes.c_int),
    ("showEdgesFound", ctypes.c_int),
    ("showResult", ctypes.c_int),
    ("searchAreaColor", RGBValue),
    ("searchLinesColor", RGBValue),
    ("searchEdgesColor", RGBValue),
    ("resultColor", RGBValue),
    ("overlayGroupName", ctypes.c_char_p),
    ("edgeOptions", EdgeOptions2),
    ]
FindConcentricEdgeOptions._fields_ = [
    ("direction", ConcentricRakeDirection),
    ("showSearchArea", ctypes.c_int),
    ("showSearchLines", ctypes.c_int),
    ("showEdgesFound", ctypes.c_int),
    ("showResult", ctypes.c_int),
    ("searchAreaColor", RGBValue),
    ("searchLinesColor", RGBValue),
    ("searchEdgesColor", RGBValue),
    ("resultColor", RGBValue),
    ("overlayGroupName", ctypes.c_char_p),
    ("edgeOptions", EdgeOptions2),
    ]
ConcentricEdgeFitOptions._fields_ = [
    ("maxRadius", ctypes.c_int),
    ("stepSize", ctypes.c_double),
    ("processType", RakeProcessType),
    ]
FindConcentricEdgeReport._fields_ = [
    ("startPt", PointFloat),
    ("endPt", PointFloat),
    ("startPtCalibrated", PointFloat),
    ("endPtCalibrated", PointFloat),
    ("angle", ctypes.c_double),
    ("angleCalibrated", ctypes.c_double),
    ("straightness", ctypes.c_double),
    ("avgStrength", ctypes.c_double),
    ("avgSNR", ctypes.c_double),
    ("lineFound", ctypes.c_int),
    ]
FindCircularEdgeReport._fields_ = [
    ("centerCalibrated", PointFloat),
    ("radiusCalibrated", ctypes.c_double),
    ("center", PointFloat),
    ("radius", ctypes.c_double),
    ("roundness", ctypes.c_double),
    ("avgStrength", ctypes.c_double),
    ("avgSNR", ctypes.c_double),
    ("circleFound", ctypes.c_int),
    ]
WindowSize._fields_ = [
    ("x", ctypes.c_int),
    ("y", ctypes.c_int),
    ("stepSize", ctypes.c_int),
    ]
DisplacementVector._fields_ = [
    ("x", ctypes.c_int),
    ("y", ctypes.c_int),
    ]
WaveletOptions._fields_ = [
    ("typeOfWavelet", WaveletType),
    ("minEnergy", ctypes.c_float),
    ]
CooccurrenceOptions._fields_ = [
    ("level", ctypes.c_int),
    ("displacement", DisplacementVector),
    ]
ParticleClassifierLocalThresholdOptions._fields_ = [
    ("method", LocalThresholdMethod),
    ("particleType", ParticleType),
    ("windowWidth", ctypes.c_uint),
    ("windowHeight", ctypes.c_uint),
    ("deviationWeight", ctypes.c_double),
    ]
RangeFloat._fields_ = [
    ("minValue", ctypes.c_float),
    ("maxValue", ctypes.c_float),
    ]
ParticleClassifierAutoThresholdOptions._fields_ = [
    ("method", ThresholdMethod),
    ("particleType", ParticleType),
    ("limits", RangeFloat),
    ]
ParticleClassifierPreprocessingOptions2._fields_ = [
    ("thresholdType", ParticleClassifierThresholdType),
    ("manualThresholdRange", RangeFloat),
    ("autoThresholdOptions", ParticleClassifierAutoThresholdOptions),
    ("localThresholdOptions", ParticleClassifierLocalThresholdOptions),
    ("rejectBorder", ctypes.c_int),
    ("numErosions", ctypes.c_int),
    ]
MeasureParticlesReport._fields_ = [
    ("pixelMeasurements", ctypes.POINTER(ctypes.POINTER(ctypes.c_double))),
    ("calibratedMeasurements", ctypes.POINTER(ctypes.POINTER(ctypes.c_double))),
    ("numParticles", ctypes.c_size_t),
    ("numMeasurements", ctypes.c_size_t),
    ]
GeometricPatternMatch3._fields_ = [
    ("position", PointFloat),
    ("rotation", ctypes.c_float),
    ("scale", ctypes.c_float),
    ("score", ctypes.c_float),
    ("corner", PointFloat*4),
    ("inverse", ctypes.c_int),
    ("occlusion", ctypes.c_float),
    ("templateMatchCurveScore", ctypes.c_float),
    ("matchTemplateCurveScore", ctypes.c_float),
    ("correlationScore", ctypes.c_float),
    ("calibratedPosition", PointFloat),
    ("calibratedRotation", ctypes.c_float),
    ("calibratedCorner", PointFloat*4),
    ]
MatchGeometricPatternAdvancedOptions3._fields_ = [
    ("subpixelIterations", ctypes.c_uint),
    ("subpixelTolerance", ctypes.c_double),
    ("initialMatchListLength", ctypes.c_uint),
    ("targetTemplateCurveScore", ctypes.c_int),
    ("correlationScore", ctypes.c_int),
    ("minMatchSeparationDistance", ctypes.c_double),
    ("minMatchSeparationAngle", ctypes.c_double),
    ("minMatchSeparationScale", ctypes.c_double),
    ("maxMatchOverlap", ctypes.c_double),
    ("coarseResult", ctypes.c_int),
    ("enableCalibrationSupport", ctypes.c_int),
    ("enableContrastReversal", ContrastMode),
    ("matchStrategy", GeometricMatchingSearchStrategy),
    ("refineMatchFactor", ctypes.c_uint),
    ("subpixelMatchFactor", ctypes.c_uint),
    ]
ColorOptions._fields_ = [
    ("colorClassificationResolution", ColorClassificationResolution),
    ("useLuminance", ctypes.c_uint),
    ("colorMode", ColorMode),
    ]
SampleScore._fields_ = [
    ("className", ctypes.c_char_p),
    ("distance", ctypes.c_float),
    ("index", ctypes.c_uint),
    ]
ClassifierReportAdvanced._fields_ = [
    ("bestClassName", ctypes.c_char_p),
    ("classificationScore", ctypes.c_float),
    ("identificationScore", ctypes.c_float),
    ("allScores", ctypes.POINTER(ClassScore)),
    ("allScoresSize", ctypes.c_int),
    ("sampleScores", ctypes.POINTER(SampleScore)),
    ("sampleScoresSize", ctypes.c_int),
    ]
LearnGeometricPatternAdvancedOptions2._fields_ = [
    ("minScaleFactor", ctypes.c_double),
    ("maxScaleFactor", ctypes.c_double),
    ("minRotationAngleValue", ctypes.c_double),
    ("maxRotationAngleValue", ctypes.c_double),
    ("imageSamplingFactor", ctypes.c_uint),
    ]
ParticleFilterOptions2._fields_ = [
    ("rejectMatches", ctypes.c_int),
    ("rejectBorder", ctypes.c_int),
    ("fillHoles", ctypes.c_int),
    ("connectivity8", ctypes.c_int),
    ]
FindEdgeOptions2._fields_ = [
    ("direction", RakeDirection),
    ("showSearchArea", ctypes.c_int),
    ("showSearchLines", ctypes.c_int),
    ("showEdgesFound", ctypes.c_int),
    ("showResult", ctypes.c_int),
    ("searchAreaColor", RGBValue),
    ("searchLinesColor", RGBValue),
    ("searchEdgesColor", RGBValue),
    ("resultColor", RGBValue),
    ("overlayGroupName", ctypes.c_char_p),
    ("edgeOptions", EdgeOptions2),
    ]
FindEdgeReport._fields_ = [
    ("straightEdges", ctypes.POINTER(StraightEdge)),
    ("numStraightEdges", ctypes.c_uint),
    ]
FindTransformRectOptions2._fields_ = [
    ("direction", FindReferenceDirection),
    ("showSearchArea", ctypes.c_int),
    ("showSearchLines", ctypes.c_int),
    ("showEdgesFound", ctypes.c_int),
    ("showResult", ctypes.c_int),
    ("searchAreaColor", RGBValue),
    ("searchLinesColor", RGBValue),
    ("searchEdgesColor", RGBValue),
    ("resultColor", RGBValue),
    ("overlayGroupName", ctypes.c_char_p),
    ("edgeOptions", EdgeOptions2),
    ]
FindTransformRectsOptions2._fields_ = [
    ("direction", FindReferenceDirection),
    ("showSearchArea", ctypes.c_int),
    ("showSearchLines", ctypes.c_int),
    ("showEdgesFound", ctypes.c_int),
    ("showResult", ctypes.c_int),
    ("searchAreaColor", RGBValue),
    ("searchLinesColor", RGBValue),
    ("searchEdgesColor", RGBValue),
    ("resultColor", RGBValue),
    ("overlayGroupName", ctypes.c_char_p),
    ("primaryEdgeOptions", EdgeOptions2),
    ("secondaryEdgeOptions", EdgeOptions2),
    ]
ReadTextReport3._fields_ = [
    ("readString", ctypes.c_char_p),
    ("characterReport", ctypes.POINTER(CharReport3)),
    ("numCharacterReports", ctypes.c_int),
    ("roiBoundingCharacters", ROI),
    ]
CharacterStatistics._fields_ = [
    ("left", ctypes.c_int),
    ("top", ctypes.c_int),
    ("width", ctypes.c_int),
    ("height", ctypes.c_int),
    ("characterSize", ctypes.c_int),
    ]
CharReport3._fields_ = [
    ("character", ctypes.c_char_p),
    ("classificationScore", ctypes.c_int),
    ("verificationScore", ctypes.c_int),
    ("verified", ctypes.c_int),
    ("lowThreshold", ctypes.c_int),
    ("highThreshold", ctypes.c_int),
    ("characterStats", CharacterStatistics),
    ]
ArcInfo2._fields_ = [
    ("center", PointFloat),
    ("radius", ctypes.c_double),
    ("startAngle", ctypes.c_double),
    ("endAngle", ctypes.c_double),
    ]
EdgeReport2._fields_ = [
    ("edges", ctypes.POINTER(EdgeInfo)),
    ("numEdges", ctypes.c_uint),
    ("gradientInfo", ctypes.POINTER(ctypes.c_double)),
    ("numGradientInfo", ctypes.c_uint),
    ("calibrationValid", ctypes.c_int),
    ]
SearchArcInfo._fields_ = [
    ("arcCoordinates", ArcInfo2),
    ("edgeReport", EdgeReport2),
    ]
ConcentricRakeReport2._fields_ = [
    ("firstEdges", ctypes.POINTER(EdgeInfo)),
    ("numFirstEdges", ctypes.c_uint),
    ("lastEdges", ctypes.POINTER(EdgeInfo)),
    ("numLastEdges", ctypes.c_uint),
    ("searchArcs", ctypes.POINTER(SearchArcInfo)),
    ("numSearchArcs", ctypes.c_uint),
    ]
SpokeReport2._fields_ = [
    ("firstEdges", ctypes.POINTER(EdgeInfo)),
    ("numFirstEdges", ctypes.c_uint),
    ("lastEdges", ctypes.POINTER(EdgeInfo)),
    ("numLastEdges", ctypes.c_uint),
    ("searchLines", ctypes.POINTER(SearchLineInfo)),
    ("numSearchLines", ctypes.c_uint),
    ]
EdgeInfo._fields_ = [
    ("position", PointFloat),
    ("calibratedPosition", PointFloat),
    ("distance", ctypes.c_double),
    ("calibratedDistance", ctypes.c_double),
    ("magnitude", ctypes.c_double),
    ("noisePeak", ctypes.c_double),
    ("rising", ctypes.c_int),
    ]
SearchLineInfo._fields_ = [
    ("lineCoordinates", LineFloat),
    ("edgeReport", EdgeReport2),
    ]
RakeReport2._fields_ = [
    ("firstEdges", ctypes.POINTER(EdgeInfo)),
    ("numFirstEdges", ctypes.c_uint),
    ("lastEdges", ctypes.POINTER(EdgeInfo)),
    ("numLastEdges", ctypes.c_uint),
    ("searchLines", ctypes.POINTER(SearchLineInfo)),
    ("numSearchLines", ctypes.c_uint),
    ]
TransformBehaviors._fields_ = [
    ("ShiftBehavior", GroupBehavior),
    ("ScaleBehavior", GroupBehavior),
    ("RotateBehavior", GroupBehavior),
    ("SymmetryBehavior", GroupBehavior),
    ]
QRCodeDataToken._fields_ = [
    ("mode", QRStreamMode),
    ("modeData", ctypes.c_uint),
    ("data", ctypes.POINTER(ctypes.c_ubyte)),
    ("dataLength", ctypes.c_uint),
    ]
ParticleFilterOptions._fields_ = [
    ("rejectMatches", ctypes.c_int),
    ("rejectBorder", ctypes.c_int),
    ("connectivity8", ctypes.c_int),
    ]
StraightEdgeReport2._fields_ = [
    ("straightEdges", ctypes.POINTER(StraightEdge)),
    ("numStraightEdges", ctypes.c_uint),
    ("searchLines", ctypes.POINTER(SearchLineInfo)),
    ("numSearchLines", ctypes.c_uint),
    ]
StraightEdgeOptions._fields_ = [
    ("numLines", ctypes.c_uint),
    ("searchMode", StraightEdgeSearchMode),
    ("minScore", ctypes.c_double),
    ("maxScore", ctypes.c_double),
    ("orientation", ctypes.c_double),
    ("angleRange", ctypes.c_double),
    ("angleTolerance", ctypes.c_double),
    ("stepSize", ctypes.c_uint),
    ("minSignalToNoiseRatio", ctypes.c_double),
    ("minCoverage", ctypes.c_double),
    ("houghIterations", ctypes.c_uint),
    ]
StraightEdge._fields_ = [
    ("straightEdgeCoordinates", LineFloat),
    ("calibratedStraightEdgeCoordinates", LineFloat),
    ("angle", ctypes.c_double),
    ("calibratedAngle", ctypes.c_double),
    ("score", ctypes.c_double),
    ("straightness", ctypes.c_double),
    ("averageSignalToNoiseRatio", ctypes.c_double),
    ("calibrationValid", ctypes.c_int),
    ("usedEdges", ctypes.POINTER(EdgeInfo)),
    ("numUsedEdges", ctypes.c_uint),
    ]
QRCodeSearchOptions._fields_ = [
    ("rotationMode", QRRotationMode),
    ("skipLocation", ctypes.c_uint),
    ("edgeThreshold", ctypes.c_uint),
    ("demodulationMode", QRDemodulationMode),
    ("cellSampleSize", QRCellSampleSize),
    ("cellFilterMode", QRCellFilterMode),
    ("skewDegreesAllowed", ctypes.c_uint),
    ]
QRCodeSizeOptions._fields_ = [
    ("minSize", ctypes.c_uint),
    ("maxSize", ctypes.c_uint),
    ]
QRCodeDescriptionOptions._fields_ = [
    ("dimensions", QRDimensions),
    ("polarity", QRPolarities),
    ("mirror", QRMirrorMode),
    ("modelType", QRModelType),
    ]
QRCodeReport._fields_ = [
    ("found", ctypes.c_uint),
    ("data", ctypes.POINTER(ctypes.c_ubyte)),
    ("dataLength", ctypes.c_uint),
    ("boundingBox", PointFloat*4),
    ("tokenizedData", ctypes.POINTER(QRCodeDataToken)),
    ("sizeOfTokenizedData", ctypes.c_uint),
    ("numErrorsCorrected", ctypes.c_uint),
    ("dimensions", ctypes.c_uint),
    ("version", ctypes.c_uint),
    ("modelType", QRModelType),
    ("streamMode", QRStreamMode),
    ("matrixPolarity", QRPolarities),
    ("mirrored", ctypes.c_uint),
    ("positionInAppendStream", ctypes.c_uint),
    ("sizeOfAppendStream", ctypes.c_uint),
    ("firstEAN128ApplicationID", ctypes.c_int),
    ("firstECIDesignator", ctypes.c_int),
    ("appendStreamIdentifier", ctypes.c_uint),
    ("minimumEdgeStrength", ctypes.c_uint),
    ("demodulationMode", QRDemodulationMode),
    ("cellSampleSize", QRCellSampleSize),
    ("cellFilterMode", QRCellFilterMode),
    ]
AIMGradeReport._fields_ = [
    ("overallGrade", AIMGrade),
    ("decodingGrade", AIMGrade),
    ("symbolContrastGrade", AIMGrade),
    ("symbolContrast", ctypes.c_float),
    ("printGrowthGrade", AIMGrade),
    ("printGrowth", ctypes.c_float),
    ("axialNonuniformityGrade", AIMGrade),
    ("axialNonuniformity", ctypes.c_float),
    ("unusedErrorCorrectionGrade", AIMGrade),
    ("unusedErrorCorrection", ctypes.c_float),
    ]
DataMatrixSizeOptions._fields_ = [
    ("minSize", ctypes.c_uint),
    ("maxSize", ctypes.c_uint),
    ("quietZoneWidth", ctypes.c_uint),
    ]
DataMatrixDescriptionOptions._fields_ = [
    ("aspectRatio", ctypes.c_float),
    ("rows", ctypes.c_uint),
    ("columns", ctypes.c_uint),
    ("rectangle", ctypes.c_int),
    ("ecc", DataMatrixECC),
    ("polarity", DataMatrixPolarity),
    ("cellFill", DataMatrixCellFillMode),
    ("minBorderIntegrity", ctypes.c_float),
    ("mirrorMode", DataMatrixMirrorMode),
    ]
DataMatrixSearchOptions._fields_ = [
    ("rotationMode", DataMatrixRotationMode),
    ("skipLocation", ctypes.c_int),
    ("edgeThreshold", ctypes.c_uint),
    ("demodulationMode", DataMatrixDemodulationMode),
    ("cellSampleSize", DataMatrixCellSampleSize),
    ("cellFilterMode", DataMatrixCellFilterMode),
    ("skewDegreesAllowed", ctypes.c_uint),
    ("maxIterations", ctypes.c_uint),
    ("initialSearchVectorWidth", ctypes.c_uint),
    ]
DataMatrixReport._fields_ = [
    ("found", ctypes.c_int),
    ("binary", ctypes.c_int),
    ("data", ctypes.POINTER(ctypes.c_ubyte)),
    ("dataLength", ctypes.c_uint),
    ("boundingBox", PointFloat*4),
    ("numErrorsCorrected", ctypes.c_uint),
    ("numErasuresCorrected", ctypes.c_uint),
    ("aspectRatio", ctypes.c_float),
    ("rows", ctypes.c_uint),
    ("columns", ctypes.c_uint),
    ("ecc", DataMatrixECC),
    ("polarity", DataMatrixPolarity),
    ("cellFill", DataMatrixCellFillMode),
    ("borderIntegrity", ctypes.c_float),
    ("mirrored", ctypes.c_int),
    ("minimumEdgeStrength", ctypes.c_uint),
    ("demodulationMode", DataMatrixDemodulationMode),
    ("cellSampleSize", DataMatrixCellSampleSize),
    ("cellFilterMode", DataMatrixCellFilterMode),
    ("iterations", ctypes.c_uint),
    ]
JPEG2000FileAdvancedOptions._fields_ = [
    ("waveletMode", WaveletTransformMode),
    ("useMultiComponentTransform", ctypes.c_int),
    ("maxWaveletTransformLevel", ctypes.c_uint),
    ("quantizationStepSize", ctypes.c_float),
    ]
MatchGeometricPatternAdvancedOptions2._fields_ = [
    ("minFeaturesUsed", ctypes.c_int),
    ("maxFeaturesUsed", ctypes.c_int),
    ("subpixelIterations", ctypes.c_int),
    ("subpixelTolerance", ctypes.c_double),
    ("initialMatchListLength", ctypes.c_int),
    ("matchTemplateCurveScore", ctypes.c_float),
    ("correlationScore", ctypes.c_int),
    ("minMatchSeparationDistance", ctypes.c_double),
    ("minMatchSeparationAngle", ctypes.c_double),
    ("minMatchSeparationScale", ctypes.c_double),
    ("maxMatchOverlap", ctypes.c_double),
    ("coarseResult", ctypes.c_int),
    ("smoothContours", ctypes.c_int),
    ("enableCalibrationSupport", ctypes.c_int),
    ]
InspectionAlignment._fields_ = [
    ("position", PointFloat),
    ("rotation", ctypes.c_float),
    ("scale", ctypes.c_float),
    ]
InspectionOptions._fields_ = [
    ("registrationMethod", RegistrationMethod),
    ("normalizationMethod", NormalizationMethod),
    ("edgeThicknessToIgnore", ctypes.c_int),
    ("brightThreshold", ctypes.c_float),
    ("darkThreshold", ctypes.c_float),
    ("binary", ctypes.c_int),
    ]
CharReport2._fields_ = [
    ("character", ctypes.c_char_p),
    ("corner", PointFloat*4),
    ("lowThreshold", ctypes.c_int),
    ("highThreshold", ctypes.c_int),
    ("classificationScore", ctypes.c_int),
    ("verificationScore", ctypes.c_int),
    ("verified", ctypes.c_int),
    ]
CharInfo2._fields_ = [
    ("charValue", ctypes.c_char_p),
    ("charImage", Image),
    ("internalImage", Image),
    ("isReferenceChar", ctypes.c_int),
    ]
ReadTextReport2._fields_ = [
    ("readString", ctypes.c_char_p),
    ("characterReport", ctypes.POINTER(CharReport2)),
    ("numCharacterReports", ctypes.c_int),
    ]
EllipseFeature._fields_ = [
    ("position", PointFloat),
    ("rotation", ctypes.c_double),
    ("minorRadius", ctypes.c_double),
    ("majorRadius", ctypes.c_double),
    ]
CircleFeature._fields_ = [
    ("position", PointFloat),
    ("radius", ctypes.c_double),
    ]
ConstCurveFeature._fields_ = [
    ("position", PointFloat),
    ("radius", ctypes.c_double),
    ("startAngle", ctypes.c_double),
    ("endAngle", ctypes.c_double),
    ]
RectangleFeature._fields_ = [
    ("position", PointFloat),
    ("corner", PointFloat*4),
    ("rotation", ctypes.c_double),
    ("width", ctypes.c_double),
    ("height", ctypes.c_double),
    ]
LegFeature._fields_ = [
    ("position", PointFloat),
    ("corner", PointFloat*4),
    ("rotation", ctypes.c_double),
    ("width", ctypes.c_double),
    ("height", ctypes.c_double),
    ]
CornerFeature._fields_ = [
    ("position", PointFloat),
    ("rotation", ctypes.c_double),
    ("enclosedAngle", ctypes.c_double),
    ("isVirtual", ctypes.c_int),
    ]
LineFeature._fields_ = [
    ("startPoint", PointFloat),
    ("endPoint", PointFloat),
    ("length", ctypes.c_double),
    ("rotation", ctypes.c_double),
    ]
ParallelLinePairFeature._fields_ = [
    ("firstStartPoint", PointFloat),
    ("firstEndPoint", PointFloat),
    ("secondStartPoint", PointFloat),
    ("secondEndPoint", PointFloat),
    ("rotation", ctypes.c_double),
    ("distance", ctypes.c_double),
    ]
PairOfParallelLinePairsFeature._fields_ = [
    ("firstParallelLinePair", ParallelLinePairFeature),
    ("secondParallelLinePair", ParallelLinePairFeature),
    ("rotation", ctypes.c_double),
    ("distance", ctypes.c_double),
    ]
GeometricFeature._fields_ = [
    ("circle", ctypes.POINTER(CircleFeature)),
    ("ellipse", ctypes.POINTER(EllipseFeature)),
    ("constCurve", ctypes.POINTER(ConstCurveFeature)),
    ("rectangle", ctypes.POINTER(RectangleFeature)),
    ("leg", ctypes.POINTER(LegFeature)),
    ("corner", ctypes.POINTER(CornerFeature)),
    ("parallelLinePair", ctypes.POINTER(ParallelLinePairFeature)),
    ("pairOfParallelLinePairs", ctypes.POINTER(PairOfParallelLinePairsFeature)),
    ("line", ctypes.POINTER(LineFeature)),
    ("closedCurve", ctypes.POINTER(ClosedCurveFeature)),
    ]
FeatureData._fields_ = [
    ("type", FeatureType),
    ("contourPoints", ctypes.POINTER(PointFloat)),
    ("numContourPoints", ctypes.c_int),
    ("feature", GeometricFeature),
    ]
GeometricPatternMatch2._fields_ = [
    ("position", PointFloat),
    ("rotation", ctypes.c_float),
    ("scale", ctypes.c_float),
    ("score", ctypes.c_float),
    ("corner", PointFloat*4),
    ("inverse", ctypes.c_int),
    ("occlusion", ctypes.c_float),
    ("templateMatchCurveScore", ctypes.c_float),
    ("matchTemplateCurveScore", ctypes.c_float),
    ("correlationScore", ctypes.c_float),
    ("label", String255),
    ("featureData", ctypes.POINTER(FeatureData)),
    ("numFeatureData", ctypes.c_int),
    ("calibratedPosition", PointFloat),
    ("calibratedRotation", ctypes.c_float),
    ("calibratedCorner", PointFloat*4),
    ]
ClosedCurveFeature._fields_ = [
    ("position", PointFloat),
    ("arcLength", ctypes.c_double),
    ]
LineMatch._fields_ = [
    ("startPoint", PointFloat),
    ("endPoint", PointFloat),
    ("length", ctypes.c_double),
    ("rotation", ctypes.c_double),
    ("score", ctypes.c_double),
    ]
LineDescriptor._fields_ = [
    ("minLength", ctypes.c_double),
    ("maxLength", ctypes.c_double),
    ]
RectangleDescriptor._fields_ = [
    ("minWidth", ctypes.c_double),
    ("maxWidth", ctypes.c_double),
    ("minHeight", ctypes.c_double),
    ("maxHeight", ctypes.c_double),
    ]
RectangleMatch._fields_ = [
    ("corner", PointFloat*4),
    ("rotation", ctypes.c_double),
    ("width", ctypes.c_double),
    ("height", ctypes.c_double),
    ("score", ctypes.c_double),
    ]
EllipseDescriptor._fields_ = [
    ("minMajorRadius", ctypes.c_double),
    ("maxMajorRadius", ctypes.c_double),
    ("minMinorRadius", ctypes.c_double),
    ("maxMinorRadius", ctypes.c_double),
    ]
EllipseMatch._fields_ = [
    ("position", PointFloat),
    ("rotation", ctypes.c_double),
    ("majorRadius", ctypes.c_double),
    ("minorRadius", ctypes.c_double),
    ("score", ctypes.c_double),
    ]
CircleMatch._fields_ = [
    ("position", PointFloat),
    ("radius", ctypes.c_double),
    ("score", ctypes.c_double),
    ]
CircleDescriptor._fields_ = [
    ("minRadius", ctypes.c_double),
    ("maxRadius", ctypes.c_double),
    ]
ShapeDetectionOptions._fields_ = [
    ("mode", ctypes.c_uint),
    ("angleRanges", ctypes.POINTER(RangeFloat)),
    ("numAngleRanges", ctypes.c_int),
    ("scaleRange", RangeFloat),
    ("minMatchScore", ctypes.c_double),
    ]
Curve._fields_ = [
    ("points", ctypes.POINTER(PointFloat)),
    ("numPoints", ctypes.c_uint),
    ("closed", ctypes.c_int),
    ("curveLength", ctypes.c_double),
    ("minEdgeStrength", ctypes.c_double),
    ("maxEdgeStrength", ctypes.c_double),
    ("averageEdgeStrength", ctypes.c_double),
    ]
CurveOptions._fields_ = [
    ("extractionMode", ExtractionMode),
    ("threshold", ctypes.c_int),
    ("filterSize", EdgeFilterSize),
    ("minLength", ctypes.c_int),
    ("rowStepSize", ctypes.c_int),
    ("columnStepSize", ctypes.c_int),
    ("maxEndPointGap", ctypes.c_int),
    ("onlyClosed", ctypes.c_int),
    ("subpixelAccuracy", ctypes.c_int),
    ]
Barcode2DInfo._fields_ = [
    ("type", Barcode2DType),
    ("binary", ctypes.c_int),
    ("data", ctypes.POINTER(ctypes.c_ubyte)),
    ("dataLength", ctypes.c_uint),
    ("boundingBox", PointFloat*4),
    ("numErrorsCorrected", ctypes.c_uint),
    ("numErasuresCorrected", ctypes.c_uint),
    ("rows", ctypes.c_uint),
    ("columns", ctypes.c_uint),
    ]
DataMatrixOptions._fields_ = [
    ("searchMode", Barcode2DSearchMode),
    ("contrast", Barcode2DContrast),
    ("cellShape", Barcode2DCellShape),
    ("barcodeShape", Barcode2DShape),
    ("subtype", DataMatrixSubtype),
    ]
ClassifierAccuracyReport._fields_ = [
    ("size", ctypes.c_int),
    ("accuracy", ctypes.c_float),
    ("classNames", ctypes.POINTER(ctypes.c_char_p)),
    ("classAccuracy", ctypes.POINTER(ctypes.c_double)),
    ("classPredictiveValue", ctypes.POINTER(ctypes.c_double)),
    ("classificationDistribution", ctypes.POINTER(ctypes.POINTER(ctypes.c_int))),
    ]
NearestNeighborClassResult._fields_ = [
    ("className", ctypes.c_char_p),
    ("standardDeviation", ctypes.c_float),
    ("count", ctypes.c_int),
    ]
NearestNeighborTrainingReport._fields_ = [
    ("classDistancesTable", ctypes.POINTER(ctypes.POINTER(ctypes.c_float))),
    ("allScores", ctypes.POINTER(NearestNeighborClassResult)),
    ("allScoresSize", ctypes.c_int),
    ]
ParticleClassifierPreprocessingOptions._fields_ = [
    ("manualThreshold", ctypes.c_int),
    ("manualThresholdRange", RangeFloat),
    ("autoThresholdMethod", ThresholdMethod),
    ("limits", RangeFloat),
    ("particleType", ParticleType),
    ("rejectBorder", ctypes.c_int),
    ("numErosions", ctypes.c_int),
    ]
ClassifierSampleInfo._fields_ = [
    ("className", ctypes.c_char_p),
    ("featureVector", ctypes.POINTER(ctypes.c_double)),
    ("featureVectorSize", ctypes.c_int),
    ("thumbnail", Image),
    ]
ClassScore._fields_ = [
    ("className", ctypes.c_char_p),
    ("distance", ctypes.c_float),
    ]
ClassifierReport._fields_ = [
    ("bestClassName", ctypes.c_char_p),
    ("classificationScore", ctypes.c_float),
    ("identificationScore", ctypes.c_float),
    ("allScores", ctypes.POINTER(ClassScore)),
    ("allScoresSize", ctypes.c_int),
    ]
NearestNeighborOptions._fields_ = [
    ("method", NearestNeighborMethod),
    ("metric", NearestNeighborMetric),
    ("k", ctypes.c_int),
    ]
ParticleClassifierOptions._fields_ = [
    ("scaleDependence", ctypes.c_float),
    ("mirrorDependence", ctypes.c_float),
    ]
RGBU64Value._fields_ = [
    ("B", ctypes.c_ushort),
    ("G", ctypes.c_ushort),
    ("R", ctypes.c_ushort),
    ("alpha", ctypes.c_ushort),
    ]
GeometricPatternMatch._fields_ = [
    ("position", PointFloat),
    ("rotation", ctypes.c_float),
    ("scale", ctypes.c_float),
    ("score", ctypes.c_float),
    ("corner", PointFloat*4),
    ("inverse", ctypes.c_int),
    ("occlusion", ctypes.c_float),
    ("templateMatchCurveScore", ctypes.c_float),
    ("matchTemplateCurveScore", ctypes.c_float),
    ("correlationScore", ctypes.c_float),
    ]
MatchGeometricPatternAdvancedOptions._fields_ = [
    ("minFeaturesUsed", ctypes.c_int),
    ("maxFeaturesUsed", ctypes.c_int),
    ("subpixelIterations", ctypes.c_int),
    ("subpixelTolerance", ctypes.c_double),
    ("initialMatchListLength", ctypes.c_int),
    ("matchTemplateCurveScore", ctypes.c_int),
    ("correlationScore", ctypes.c_int),
    ("minMatchSeparationDistance", ctypes.c_double),
    ("minMatchSeparationAngle", ctypes.c_double),
    ("minMatchSeparationScale", ctypes.c_double),
    ("maxMatchOverlap", ctypes.c_double),
    ("coarseResult", ctypes.c_int),
    ]
MatchGeometricPatternOptions._fields_ = [
    ("mode", ctypes.c_uint),
    ("subpixelAccuracy", ctypes.c_int),
    ("angleRanges", ctypes.POINTER(RangeFloat)),
    ("numAngleRanges", ctypes.c_int),
    ("scaleRange", RangeFloat),
    ("occlusionRange", RangeFloat),
    ("numMatchesRequested", ctypes.c_int),
    ("minMatchScore", ctypes.c_float),
    ]
LearnGeometricPatternAdvancedOptions._fields_ = [
    ("minRectLength", ctypes.c_int),
    ("minRectAspectRatio", ctypes.c_double),
    ("minRadius", ctypes.c_int),
    ("minLineLength", ctypes.c_int),
    ("minFeatureStrength", ctypes.c_double),
    ("maxFeaturesUsed", ctypes.c_int),
    ("maxPixelDistanceFromLine", ctypes.c_int),
    ]
FitEllipseOptions._fields_ = [
    ("rejectOutliers", ctypes.c_int),
    ("minScore", ctypes.c_double),
    ("pixelRadius", ctypes.c_double),
    ("maxIterations", ctypes.c_int),
    ]
FitCircleOptions._fields_ = [
    ("rejectOutliers", ctypes.c_int),
    ("minScore", ctypes.c_double),
    ("pixelRadius", ctypes.c_double),
    ("maxIterations", ctypes.c_int),
    ]
ConstructROIOptions2._fields_ = [
    ("windowNumber", ctypes.c_int),
    ("windowTitle", ctypes.c_char_p),
    ("type", PaletteType),
    ("palette", ctypes.POINTER(RGBValue)),
    ("numColors", ctypes.c_int),
    ("maxContours", ctypes.c_uint),
    ]
HSLValue._fields_ = [
    ("L", ctypes.c_ubyte),
    ("S", ctypes.c_ubyte),
    ("H", ctypes.c_ubyte),
    ("alpha", ctypes.c_ubyte),
    ]
HSVValue._fields_ = [
    ("V", ctypes.c_ubyte),
    ("S", ctypes.c_ubyte),
    ("H", ctypes.c_ubyte),
    ("alpha", ctypes.c_ubyte),
    ]
HSIValue._fields_ = [
    ("I", ctypes.c_ubyte),
    ("S", ctypes.c_ubyte),
    ("H", ctypes.c_ubyte),
    ("alpha", ctypes.c_ubyte),
    ]
CIELabValue._fields_ = [
    ("b", ctypes.c_double),
    ("a", ctypes.c_double),
    ("L", ctypes.c_double),
    ("alpha", ctypes.c_ubyte),
    ]
CIEXYZValue._fields_ = [
    ("Z", ctypes.c_double),
    ("Y", ctypes.c_double),
    ("X", ctypes.c_double),
    ("alpha", ctypes.c_ubyte),
    ]
Color2._fields_ = [
    ("rgb", RGBValue),
    ("hsl", HSLValue),
    ("hsv", HSVValue),
    ("hsi", HSIValue),
    ("cieLab", CIELabValue),
    ("cieXYZ", CIEXYZValue),
    ("rawValue", ctypes.c_int),
    ]
BestEllipse2._fields_ = [
    ("center", PointFloat),
    ("majorAxisStart", PointFloat),
    ("majorAxisEnd", PointFloat),
    ("minorAxisStart", PointFloat),
    ("minorAxisEnd", PointFloat),
    ("area", ctypes.c_double),
    ("perimeter", ctypes.c_double),
    ("error", ctypes.c_double),
    ("valid", ctypes.c_int),
    ("pointsUsed", ctypes.POINTER(ctypes.c_int)),
    ("numPointsUsed", ctypes.c_int),
    ]
LearnPatternAdvancedOptions._fields_ = [
    ("shiftOptions", ctypes.POINTER(LearnPatternAdvancedShiftOptions)),
    ("rotationOptions", ctypes.POINTER(LearnPatternAdvancedRotationOptions)),
    ]
AVIInfo._fields_ = [
    ("width", ctypes.c_uint),
    ("height", ctypes.c_uint),
    ("imageType", ImageType),
    ("numFrames", ctypes.c_uint),
    ("framesPerSecond", ctypes.c_uint),
    ("filterName", ctypes.c_char_p),
    ("hasData", ctypes.c_int),
    ("maxDataSize", ctypes.c_uint),
    ]
LearnPatternAdvancedShiftOptions._fields_ = [
    ("initialStepSize", ctypes.c_int),
    ("initialSampleSize", ctypes.c_int),
    ("initialSampleSizeFactor", ctypes.c_double),
    ("finalSampleSize", ctypes.c_int),
    ("finalSampleSizeFactor", ctypes.c_double),
    ("subpixelSampleSize", ctypes.c_int),
    ("subpixelSampleSizeFactor", ctypes.c_double),
    ]
LearnPatternAdvancedRotationOptions._fields_ = [
    ("searchStrategySupport", SearchStrategy),
    ("initialStepSize", ctypes.c_int),
    ("initialSampleSize", ctypes.c_int),
    ("initialSampleSizeFactor", ctypes.c_double),
    ("initialAngularAccuracy", ctypes.c_int),
    ("finalSampleSize", ctypes.c_int),
    ("finalSampleSizeFactor", ctypes.c_double),
    ("finalAngularAccuracy", ctypes.c_int),
    ("subpixelSampleSize", ctypes.c_int),
    ("subpixelSampleSizeFactor", ctypes.c_double),
    ]
MatchPatternAdvancedOptions._fields_ = [
    ("subpixelIterations", ctypes.c_int),
    ("subpixelTolerance", ctypes.c_double),
    ("initialMatchListLength", ctypes.c_int),
    ("matchListReductionFactor", ctypes.c_int),
    ("initialStepSize", ctypes.c_int),
    ("searchStrategy", SearchStrategy),
    ("intermediateAngularAccuracy", ctypes.c_int),
    ]
ParticleFilterCriteria2._fields_ = [
    ("parameter", MeasurementType),
    ("lower", ctypes.c_float),
    ("upper", ctypes.c_float),
    ("calibrated", ctypes.c_int),
    ("exclude", ctypes.c_int),
    ]
BestCircle2._fields_ = [
    ("center", PointFloat),
    ("radius", ctypes.c_double),
    ("area", ctypes.c_double),
    ("perimeter", ctypes.c_double),
    ("error", ctypes.c_double),
    ("valid", ctypes.c_int),
    ("pointsUsed", ctypes.POINTER(ctypes.c_int)),
    ("numPointsUsed", ctypes.c_int),
    ]
OCRSpacingOptions._fields_ = [
    ("minCharSpacing", ctypes.c_int),
    ("minCharSize", ctypes.c_int),
    ("maxCharSize", ctypes.c_int),
    ("maxHorizontalElementSpacing", ctypes.c_int),
    ("maxVerticalElementSpacing", ctypes.c_int),
    ("minBoundingRectWidth", ctypes.c_int),
    ("maxBoundingRectWidth", ctypes.c_int),
    ("minBoundingRectHeight", ctypes.c_int),
    ("maxBoundingRectHeight", ctypes.c_int),
    ("autoSplit", ctypes.c_int),
    ]
OCRProcessingOptions._fields_ = [
    ("mode", ThresholdMode),
    ("lowThreshold", ctypes.c_int),
    ("highThreshold", ctypes.c_int),
    ("blockCount", ctypes.c_int),
    ("fastThreshold", ctypes.c_int),
    ("biModalCalculation", ctypes.c_int),
    ("darkCharacters", ctypes.c_int),
    ("removeParticlesTouchingROI", ctypes.c_int),
    ("erosionCount", ctypes.c_int),
    ]
ReadTextOptions._fields_ = [
    ("validChars", String255*255),
    ("numValidChars", ctypes.c_int),
    ("substitutionChar", ctypes.c_char),
    ("readStrategy", ReadStrategy),
    ("acceptanceLevel", ctypes.c_int),
    ("aspectRatio", ctypes.c_int),
    ("readResolution", ReadResolution),
    ]
CharInfo._fields_ = [
    ("charValue", ctypes.c_char_p),
    ("charImage", Image),
    ("internalImage", Image),
    ]
Rect._fields_ = [
    ("top", ctypes.c_int),
    ("left", ctypes.c_int),
    ("height", ctypes.c_int),
    ("width", ctypes.c_int),
    ]
CharReport._fields_ = [
    ("character", ctypes.c_char_p),
    ("corner", PointFloat*4),
    ("reserved", ctypes.c_int),
    ("lowThreshold", ctypes.c_int),
    ("highThreshold", ctypes.c_int),
    ]
ReadTextReport._fields_ = [
    ("readString", ctypes.c_char_p),
    ("characterReport", ctypes.POINTER(CharReport)),
    ("numCharacterReports", ctypes.c_int),
    ]
Point._fields_ = [
    ("x", ctypes.c_int),
    ("y", ctypes.c_int),
    ]
Annulus._fields_ = [
    ("center", Point),
    ("innerRadius", ctypes.c_int),
    ("outerRadius", ctypes.c_int),
    ("startAngle", ctypes.c_double),
    ("endAngle", ctypes.c_double),
    ]
EdgeLocationReport._fields_ = [
    ("edges", ctypes.POINTER(PointFloat)),
    ("numEdges", ctypes.c_int),
    ]
EdgeOptions._fields_ = [
    ("threshold", ctypes.c_uint),
    ("width", ctypes.c_uint),
    ("steepness", ctypes.c_uint),
    ("subpixelType", InterpolationMethod),
    ("subpixelDivisions", ctypes.c_uint),
    ]
EdgeReport._fields_ = [
    ("location", ctypes.c_float),
    ("contrast", ctypes.c_float),
    ("polarity", PolarityType),
    ("reserved", ctypes.c_float),
    ("coordinate", PointFloat),
    ]
ExtremeReport._fields_ = [
    ("location", ctypes.c_double),
    ("amplitude", ctypes.c_double),
    ("secondDerivative", ctypes.c_double),
    ]
FitLineOptions._fields_ = [
    ("minScore", ctypes.c_float),
    ("pixelRadius", ctypes.c_float),
    ("numRefinements", ctypes.c_int),
    ]
DisplayMapping._fields_ = [
    ("method", MappingMethod),
    ("minimumValue", ctypes.c_int),
    ("maximumValue", ctypes.c_int),
    ("shiftCount", ctypes.c_int),
    ]
DetectExtremesOptions._fields_ = [
    ("threshold", ctypes.c_double),
    ("width", ctypes.c_int),
    ]
ImageInfo._fields_ = [
    ("imageUnit", CalibrationUnit),
    ("stepX", ctypes.c_float),
    ("stepY", ctypes.c_float),
    ("imageType", ImageType),
    ("xRes", ctypes.c_int),
    ("yRes", ctypes.c_int),
    ("xOffset", ctypes.c_int),
    ("yOffset", ctypes.c_int),
    ("border", ctypes.c_int),
    ("pixelsPerLine", ctypes.c_int),
    ("reserved0", ctypes.c_void_p),
    ("reserved1", ctypes.c_void_p),
    ("imageStart", ctypes.c_void_p),
    ]
LCDOptions._fields_ = [
    ("litSegments", ctypes.c_int),
    ("threshold", ctypes.c_float),
    ("sign", ctypes.c_int),
    ("decimalPoint", ctypes.c_int),
    ]
LCDReport._fields_ = [
    ("text", ctypes.c_char_p),
    ("segmentInfo", ctypes.POINTER(LCDSegments)),
    ("numCharacters", ctypes.c_int),
    ("reserved", ctypes.c_int),
    ]
LCDSegments._fields_ = [
    ("a:1", ctypes.c_uint),
    ("b:1", ctypes.c_uint),
    ("c:1", ctypes.c_uint),
    ("d:1", ctypes.c_uint),
    ("e:1", ctypes.c_uint),
    ("f:1", ctypes.c_uint),
    ("g:1", ctypes.c_uint),
    ("reserved:25", ctypes.c_uint),
    ]
LearnCalibrationOptions._fields_ = [
    ("mode", CalibrationMode),
    ("method", ScalingMethod),
    ("roi", CalibrationROI),
    ("learnMap", ctypes.c_int),
    ("learnTable", ctypes.c_int),
    ]
LearnColorPatternOptions._fields_ = [
    ("learnMode", LearningMode),
    ("featureMode", ImageFeatureMode),
    ("threshold", ctypes.c_int),
    ("ignoreMode", ColorIgnoreMode),
    ("colorsToIgnore", ctypes.POINTER(ColorInformation)),
    ("numColorsToIgnore", ctypes.c_int),
    ]
Line._fields_ = [
    ("start", Point),
    ("end", Point),
    ]
LinearAverages._fields_ = [
    ("columnAverages", ctypes.POINTER(ctypes.c_float)),
    ("columnCount", ctypes.c_int),
    ("rowAverages", ctypes.POINTER(ctypes.c_float)),
    ("rowCount", ctypes.c_int),
    ("risingDiagAverages", ctypes.POINTER(ctypes.c_float)),
    ("risingDiagCount", ctypes.c_int),
    ("fallingDiagAverages", ctypes.POINTER(ctypes.c_float)),
    ("fallingDiagCount", ctypes.c_int),
    ]
LineProfile._fields_ = [
    ("profileData", ctypes.POINTER(ctypes.c_float)),
    ("boundingBox", Rect),
    ("min", ctypes.c_float),
    ("max", ctypes.c_float),
    ("mean", ctypes.c_float),
    ("stdDev", ctypes.c_float),
    ("dataCount", ctypes.c_int),
    ]
MatchColorPatternOptions._fields_ = [
    ("matchMode", MatchingMode),
    ("featureMode", ImageFeatureMode),
    ("minContrast", ctypes.c_int),
    ("subpixelAccuracy", ctypes.c_int),
    ("angleRanges", ctypes.POINTER(RotationAngleRange)),
    ("numRanges", ctypes.c_int),
    ("colorWeight", ctypes.c_double),
    ("sensitivity", ColorSensitivity),
    ("strategy", SearchStrategy),
    ("numMatchesRequested", ctypes.c_int),
    ("minMatchScore", ctypes.c_float),
    ]
HistogramReport._fields_ = [
    ("histogram", ctypes.POINTER(ctypes.c_int)),
    ("histogramCount", ctypes.c_int),
    ("min", ctypes.c_float),
    ("max", ctypes.c_float),
    ("start", ctypes.c_float),
    ("width", ctypes.c_float),
    ("mean", ctypes.c_float),
    ("stdDev", ctypes.c_float),
    ("numPixels", ctypes.c_int),
    ]
ArcInfo._fields_ = [
    ("boundingBox", Rect),
    ("startAngle", ctypes.c_double),
    ("endAngle", ctypes.c_double),
    ]
AxisReport._fields_ = [
    ("origin", PointFloat),
    ("mainAxisEnd", PointFloat),
    ("secondaryAxisEnd", PointFloat),
    ]
BarcodeInfo._fields_ = [
    ("outputString", ctypes.c_char_p),
    ("size", ctypes.c_int),
    ("outputChar1", ctypes.c_char),
    ("outputChar2", ctypes.c_char),
    ("confidenceLevel", ctypes.c_double),
    ("type", BarcodeType),
    ]
BCGOptions._fields_ = [
    ("brightness", ctypes.c_float),
    ("contrast", ctypes.c_float),
    ("gamma", ctypes.c_float),
    ]
BestCircle._fields_ = [
    ("center", PointFloat),
    ("radius", ctypes.c_double),
    ("area", ctypes.c_double),
    ("perimeter", ctypes.c_double),
    ("error", ctypes.c_double),
    ]
BestEllipse._fields_ = [
    ("center", PointFloat),
    ("majorAxisStart", PointFloat),
    ("majorAxisEnd", PointFloat),
    ("minorAxisStart", PointFloat),
    ("minorAxisEnd", PointFloat),
    ("area", ctypes.c_double),
    ("perimeter", ctypes.c_double),
    ]
BestLine._fields_ = [
    ("start", PointFloat),
    ("end", PointFloat),
    ("equation", LineEquation),
    ("valid", ctypes.c_int),
    ("error", ctypes.c_double),
    ("pointsUsed", ctypes.POINTER(ctypes.c_int)),
    ("numPointsUsed", ctypes.c_int),
    ]
BrowserOptions._fields_ = [
    ("width", ctypes.c_int),
    ("height", ctypes.c_int),
    ("imagesPerLine", ctypes.c_int),
    ("backgroundColor", RGBValue),
    ("frameSize", ctypes.c_int),
    ("style", BrowserFrameStyle),
    ("ratio", ctypes.c_float),
    ("focusColor", RGBValue),
    ]
CoordinateSystem._fields_ = [
    ("origin", PointFloat),
    ("angle", ctypes.c_float),
    ("axisOrientation", AxisOrientation),
    ]
CalibrationInfo._fields_ = [
    ("errorMap", ctypes.POINTER(ctypes.c_float)),
    ("mapColumns", ctypes.c_int),
    ("mapRows", ctypes.c_int),
    ("userRoi", ROI),
    ("calibrationRoi", ROI),
    ("options", LearnCalibrationOptions),
    ("grid", GridDescriptor),
    ("system", CoordinateSystem),
    ("range", RangeFloat),
    ("quality", ctypes.c_float),
    ]
CalibrationPoints._fields_ = [
    ("pixelCoordinates", ctypes.POINTER(PointFloat)),
    ("realWorldCoordinates", ctypes.POINTER(PointFloat)),
    ("numCoordinates", ctypes.c_int),
    ]
CaliperOptions._fields_ = [
    ("polarity", TwoEdgePolarityType),
    ("separation", ctypes.c_float),
    ("separationDeviation", ctypes.c_float),
    ]
CaliperReport._fields_ = [
    ("edge1Contrast", ctypes.c_float),
    ("edge1Coord", PointFloat),
    ("edge2Contrast", ctypes.c_float),
    ("edge2Coord", PointFloat),
    ("separation", ctypes.c_float),
    ("reserved", ctypes.c_float),
    ]
DrawTextOptions._fields_ = [
    ("fontName", ctypes.c_char*32),
    ("fontSize", ctypes.c_int),
    ("bold", ctypes.c_int),
    ("italic", ctypes.c_int),
    ("underline", ctypes.c_int),
    ("strikeout", ctypes.c_int),
    ("textAlignment", TextAlignment),
    ("fontColor", FontColor),
    ]
CircleReport._fields_ = [
    ("center", Point),
    ("radius", ctypes.c_int),
    ("area", ctypes.c_int),
    ]
ClosedContour._fields_ = [
    ("points", ctypes.POINTER(Point)),
    ("numPoints", ctypes.c_int),
    ]
ColorHistogramReport._fields_ = [
    ("plane1", HistogramReport),
    ("plane2", HistogramReport),
    ("plane3", HistogramReport),
    ]
ColorInformation._fields_ = [
    ("infoCount", ctypes.c_int),
    ("saturation", ctypes.c_int),
    ("info", ctypes.POINTER(ctypes.c_double)),
    ]
Complex._fields_ = [
    ("r", ctypes.c_float),
    ("i", ctypes.c_float),
    ]
ConcentricRakeReport._fields_ = [
    ("rakeArcs", ctypes.POINTER(ArcInfo)),
    ("numArcs", ctypes.c_int),
    ("firstEdges", ctypes.POINTER(PointFloat)),
    ("numFirstEdges", ctypes.c_int),
    ("lastEdges", ctypes.POINTER(PointFloat)),
    ("numLastEdges", ctypes.c_int),
    ("allEdges", ctypes.POINTER(EdgeLocationReport)),
    ("linesWithEdges", ctypes.POINTER(ctypes.c_int)),
    ("numLinesWithEdges", ctypes.c_int),
    ]
ConstructROIOptions._fields_ = [
    ("windowNumber", ctypes.c_int),
    ("windowTitle", ctypes.c_char_p),
    ("type", PaletteType),
    ("palette", ctypes.POINTER(RGBValue)),
    ("numColors", ctypes.c_int),
    ]
ContourInfo._fields_ = [
    ("type", ContourType),
    ("numPoints", ctypes.c_uint),
    ("points", ctypes.POINTER(Point)),
    ("contourColor", RGBValue),
    ]
ContourUnion._fields_ = [
    ("point", ctypes.POINTER(Point)),
    ("line", ctypes.POINTER(Line)),
    ("rect", ctypes.POINTER(Rect)),
    ("ovalBoundingBox", ctypes.POINTER(Rect)),
    ("closedContour", ctypes.POINTER(ClosedContour)),
    ("openContour", ctypes.POINTER(OpenContour)),
    ("annulus", ctypes.POINTER(Annulus)),
    ("rotatedRect", ctypes.POINTER(RotatedRect)),
    ]
ContourInfo2._fields_ = [
    ("type", ContourType),
    ("color", RGBValue),
    ("structure", ContourUnion),
    ]
ContourPoint._fields_ = [
    ("x", ctypes.c_double),
    ("y", ctypes.c_double),
    ("curvature", ctypes.c_double),
    ("xDisplacement", ctypes.c_double),
    ("yDisplacement", ctypes.c_double),
    ]
CoordinateTransform._fields_ = [
    ("initialOrigin", Point),
    ("initialAngle", ctypes.c_float),
    ("finalOrigin", Point),
    ("finalAngle", ctypes.c_float),
    ]
CoordinateTransform2._fields_ = [
    ("referenceSystem", CoordinateSystem),
    ("measurementSystem", CoordinateSystem),
    ]
CannyOptions._fields_ = [
    ("sigma", ctypes.c_float),
    ("upperThreshold", ctypes.c_float),
    ("lowerThreshold", ctypes.c_float),
    ("windowSize", ctypes.c_int),
    ]
Range._fields_ = [
    ("minValue", ctypes.c_int),
    ("maxValue", ctypes.c_int),
    ]
UserPointSymbol._fields_ = [
    ("cols", ctypes.c_int),
    ("rows", ctypes.c_int),
    ("pixels", ctypes.POINTER(ctypes.c_int)),
    ]
View3DOptions._fields_ = [
    ("sizeReduction", ctypes.c_int),
    ("maxHeight", ctypes.c_int),
    ("direction", Direction3D),
    ("alpha", ctypes.c_float),
    ("beta", ctypes.c_float),
    ("border", ctypes.c_int),
    ("background", ctypes.c_int),
    ("plane", Plane3D),
    ]
MatchPatternOptions._fields_ = [
    ("mode", MatchingMode),
    ("minContrast", ctypes.c_int),
    ("subpixelAccuracy", ctypes.c_int),
    ("angleRanges", ctypes.POINTER(RotationAngleRange)),
    ("numRanges", ctypes.c_int),
    ("numMatchesRequested", ctypes.c_int),
    ("matchFactor", ctypes.c_int),
    ("minMatchScore", ctypes.c_float),
    ]
TIFFFileOptions._fields_ = [
    ("rowsPerStrip", ctypes.c_int),
    ("photoInterp", PhotometricMode),
    ("compressionType", TIFFCompressionType),
    ]
Color._fields_ = [
    ("rgb", RGBValue),
    ("hsl", HSLValue),
    ("hsv", HSVValue),
    ("hsi", HSIValue),
    ("rawValue", ctypes.c_int),
    ]
PixelValue._fields_ = [
    ("grayscale", ctypes.c_float),
    ("rgb", RGBValue),
    ("hsl", HSLValue),
    ("complex", Complex),
    ("rgbu64", RGBU64Value),
    ]
OpenContour._fields_ = [
    ("points", ctypes.POINTER(Point)),
    ("numPoints", ctypes.c_int),
    ]
OverlayTextOptions._fields_ = [
    ("fontName", ctypes.c_char_p),
    ("fontSize", ctypes.c_int),
    ("bold", ctypes.c_int),
    ("italic", ctypes.c_int),
    ("underline", ctypes.c_int),
    ("strikeout", ctypes.c_int),
    ("horizontalTextAlignment", TextAlignment),
    ("verticalTextAlignment", VerticalTextAlignment),
    ("backgroundColor", RGBValue),
    ("angle", ctypes.c_double),
    ]
ParticleFilterCriteria._fields_ = [
    ("parameter", MeasurementValue),
    ("lower", ctypes.c_float),
    ("upper", ctypes.c_float),
    ("exclude", ctypes.c_int),
    ]
ParticleReport._fields_ = [
    ("area", ctypes.c_int),
    ("calibratedArea", ctypes.c_float),
    ("perimeter", ctypes.c_float),
    ("numHoles", ctypes.c_int),
    ("areaOfHoles", ctypes.c_int),
    ("perimeterOfHoles", ctypes.c_float),
    ("boundingBox", Rect),
    ("sigmaX", ctypes.c_float),
    ("sigmaY", ctypes.c_float),
    ("sigmaXX", ctypes.c_float),
    ("sigmaYY", ctypes.c_float),
    ("sigmaXY", ctypes.c_float),
    ("longestLength", ctypes.c_int),
    ("longestPoint", Point),
    ("projectionX", ctypes.c_int),
    ("projectionY", ctypes.c_int),
    ("connect8", ctypes.c_int),
    ]
PatternMatch._fields_ = [
    ("position", PointFloat),
    ("rotation", ctypes.c_float),
    ("scale", ctypes.c_float),
    ("score", ctypes.c_float),
    ("corner", PointFloat*4),
    ]
QuantifyData._fields_ = [
    ("mean", ctypes.c_float),
    ("stdDev", ctypes.c_float),
    ("min", ctypes.c_float),
    ("max", ctypes.c_float),
    ("calibratedArea", ctypes.c_float),
    ("pixelArea", ctypes.c_int),
    ("relativeSize", ctypes.c_float),
    ]
QuantifyReport._fields_ = [
    ("global", QuantifyData),
    ("regions", ctypes.POINTER(QuantifyData)),
    ("regionCount", ctypes.c_int),
    ]
RakeOptions._fields_ = [
    ("threshold", ctypes.c_int),
    ("width", ctypes.c_int),
    ("steepness", ctypes.c_int),
    ("subsamplingRatio", ctypes.c_int),
    ("subpixelType", InterpolationMethod),
    ("subpixelDivisions", ctypes.c_int),
    ]
RakeReport._fields_ = [
    ("rakeLines", ctypes.POINTER(LineFloat)),
    ("numRakeLines", ctypes.c_int),
    ("firstEdges", ctypes.POINTER(PointFloat)),
    ("numFirstEdges", ctypes.c_uint),
    ("lastEdges", ctypes.POINTER(PointFloat)),
    ("numLastEdges", ctypes.c_uint),
    ("allEdges", ctypes.POINTER(EdgeLocationReport)),
    ("linesWithEdges", ctypes.POINTER(ctypes.c_int)),
    ("numLinesWithEdges", ctypes.c_int),
    ]
TransformReport._fields_ = [
    ("points", ctypes.POINTER(PointFloat)),
    ("validPoints", ctypes.POINTER(ctypes.c_int)),
    ("numPoints", ctypes.c_int),
    ]
ShapeReport._fields_ = [
    ("coordinates", Rect),
    ("centroid", Point),
    ("size", ctypes.c_int),
    ("score", ctypes.c_double),
    ]
MeterArc._fields_ = [
    ("needleBase", PointFloat),
    ("arcCoordPoints", ctypes.POINTER(PointFloat)),
    ("numOfArcCoordPoints", ctypes.c_int),
    ("needleColor", ctypes.c_int),
    ]
ThresholdData._fields_ = [
    ("rangeMin", ctypes.c_float),
    ("rangeMax", ctypes.c_float),
    ("newValue", ctypes.c_float),
    ("useNewValue", ctypes.c_int),
    ]
StructuringElement._fields_ = [
    ("matrixCols", ctypes.c_int),
    ("matrixRows", ctypes.c_int),
    ("hexa", ctypes.c_int),
    ("kernel", ctypes.POINTER(ctypes.c_int)),
    ]
SpokeReport._fields_ = [
    ("spokeLines", ctypes.POINTER(LineFloat)),
    ("numSpokeLines", ctypes.c_int),
    ("firstEdges", ctypes.POINTER(PointFloat)),
    ("numFirstEdges", ctypes.c_int),
    ("lastEdges", ctypes.POINTER(PointFloat)),
    ("numLastEdges", ctypes.c_int),
    ("allEdges", ctypes.POINTER(EdgeLocationReport)),
    ("linesWithEdges", ctypes.POINTER(ctypes.c_int)),
    ("numLinesWithEdges", ctypes.c_int),
    ]
SimpleEdgeOptions._fields_ = [
    ("type", LevelType),
    ("threshold", ctypes.c_int),
    ("hysteresis", ctypes.c_int),
    ("process", EdgeProcess),
    ("subpixel", ctypes.c_int),
    ]
SelectParticleCriteria._fields_ = [
    ("parameter", MeasurementValue),
    ("lower", ctypes.c_float),
    ("upper", ctypes.c_float),
    ]
SegmentInfo._fields_ = [
    ("numberOfPoints", ctypes.c_int),
    ("isOpen", ctypes.c_int),
    ("weight", ctypes.c_double),
    ("points", ctypes.POINTER(ContourPoint)),
    ]
RotationAngleRange._fields_ = [
    ("lower", ctypes.c_float),
    ("upper", ctypes.c_float),
    ]
RotatedRect._fields_ = [
    ("top", ctypes.c_int),
    ("left", ctypes.c_int),
    ("height", ctypes.c_int),
    ("width", ctypes.c_int),
    ("angle", ctypes.c_double),
    ]
ROIProfile._fields_ = [
    ("report", LineProfile),
    ("pixels", ctypes.POINTER(Point)),
    ]
ToolWindowOptions._fields_ = [
    ("showSelectionTool", ctypes.c_int),
    ("showZoomTool", ctypes.c_int),
    ("showPointTool", ctypes.c_int),
    ("showLineTool", ctypes.c_int),
    ("showRectangleTool", ctypes.c_int),
    ("showOvalTool", ctypes.c_int),
    ("showPolygonTool", ctypes.c_int),
    ("showClosedFreehandTool", ctypes.c_int),
    ("showPolyLineTool", ctypes.c_int),
    ("showFreehandTool", ctypes.c_int),
    ("showAnnulusTool", ctypes.c_int),
    ("showRotatedRectangleTool", ctypes.c_int),
    ("showPanTool", ctypes.c_int),
    ("showZoomOutTool", ctypes.c_int),
    ("reserved2", ctypes.c_int),
    ("reserved3", ctypes.c_int),
    ("reserved4", ctypes.c_int),
    ]
SpokeOptions._fields_ = [
    ("threshold", ctypes.c_int),
    ("width", ctypes.c_int),
    ("steepness", ctypes.c_int),
    ("subsamplingRatio", ctypes.c_double),
    ("subpixelType", InterpolationMethod),
    ("subpixelDivisions", ctypes.c_int),
    ]
##############################################################################
# Callback Function Type
##############################################################################
EventCallback = ctypes.CFUNCTYPE(None, WindowEventType, ctypes.c_int, Tool, Rect)
##############################################################################
# Globals
##############################################################################
IMAQ_DEFAULT_LEARNING_MODE = IMAQ_LEARN_SHIFT_INFORMATION
IMAQ_INIT_RGB_TRANSPARENT = RGBValue(0, 0, 0, 1)
IMAQ_INIT_RGB_RED = RGBValue(0, 0, 255, 0)
IMAQ_INIT_RGB_BLUE = RGBValue(255, 0, 0, 0)
IMAQ_INIT_RGB_GREEN = RGBValue(0, 255, 0, 0)
IMAQ_INIT_RGB_YELLOW = RGBValue(0, 255, 255, 0)
IMAQ_INIT_RGB_WHITE = RGBValue(255, 255, 255, 0)
IMAQ_INIT_RGB_BLACK = RGBValue(0, 0, 0, 0)
IMAQ_NO_RECT = Rect( 0, 0, 0x7FFFFFFF, 0x7FFFFFFF)
IMAQ_NO_ROTATED_RECT = RotatedRect( 0, 0, 0x7FFFFFFF, 0x7FFFFFFF, 0)
IMAQ_NO_POINT = Point( -1, -1)
IMAQ_NO_POINT_FLOAT = PointFloat( -1.0, -1.0 )
IMAQ_NO_OFFSET = PointFloat( 0.0, 0.0 )
IMAQ_RGB_TRANSPARENT = RGBValue(0, 0, 0, 1)
IMAQ_RGB_RED = RGBValue(0, 0, 255, 0)
IMAQ_RGB_BLUE = RGBValue(255, 0, 0, 0)
IMAQ_RGB_GREEN = RGBValue(0, 255, 0, 0)
IMAQ_RGB_YELLOW = RGBValue(0, 255, 255, 0)
IMAQ_RGB_WHITE = RGBValue(255, 255, 255, 0)
IMAQ_RGB_BLACK = RGBValue(0, 0, 0, 0)
##############################################################################
# Backwards Compatibility
##############################################################################
ColorComplexity = ColorSensitivity
IMAQ_COMPLEXITY_LOW = IMAQ_SENSITIVITY_LOW
IMAQ_COMPLEXITY_MED = IMAQ_SENSITIVITY_MED
IMAQ_COMPLEXITY_HIGH = IMAQ_SENSITIVITY_HIGH
ERR_INVALID_COLORCOMPLEXITY = ERR_INVALID_COLORSENSITIVITY
##############################################################################
# Logical functions
##############################################################################
imaqAnd = STDFUNC("imaqAnd", ("dest", Image), ("sourceA", Image), ("sourceB", Image))
imaqAndConstant = STDFUNC("imaqAndConstant", ("dest", Image), ("source", Image), ("value", PixelValue))
imaqCompare = STDFUNC("imaqCompare", ("dest", Image), ("source", Image), ("compareImage", Image), ("compare", ComparisonFunction))
imaqCompareConstant = STDFUNC("imaqCompareConstant", ("dest", Image), ("source", Image), ("value", PixelValue), ("compare", ComparisonFunction))
imaqLogicalDifference = STDFUNC("imaqLogicalDifference", ("dest", Image), ("sourceA", Image), ("sourceB", Image))
imaqLogicalDifferenceConstant = STDFUNC("imaqLogicalDifferenceConstant", ("dest", Image), ("source", Image), ("value", PixelValue))
imaqNand = STDFUNC("imaqNand", ("dest", Image), ("sourceA", Image), ("sourceB", Image))
imaqNandConstant = STDFUNC("imaqNandConstant", ("dest", Image), ("source", Image), ("value", PixelValue))
imaqNor = STDFUNC("imaqNor", ("dest", Image), ("sourceA", Image), ("sourceB", Image))
imaqNorConstant = STDFUNC("imaqNorConstant", ("dest", Image), ("source", Image), ("value", PixelValue))
imaqOr = STDFUNC("imaqOr", ("dest", Image), ("sourceA", Image), ("sourceB", Image))
imaqOrConstant = STDFUNC("imaqOrConstant", ("dest", Image), ("source", Image), ("value", PixelValue))
imaqXnor = STDFUNC("imaqXnor", ("dest", Image), ("sourceA", Image), ("sourceB", Image))
imaqXnorConstant = STDFUNC("imaqXnorConstant", ("dest", Image), ("source", Image), ("value", PixelValue))
imaqXor = STDFUNC("imaqXor", ("dest", Image), ("sourceA", Image), ("sourceB", Image))
imaqXorConstant = STDFUNC("imaqXorConstant", ("dest", Image), ("source", Image), ("value", PixelValue))
##############################################################################
# Particle Analysis functions
##############################################################################
imaqCountParticles = STDFUNC("imaqCountParticles", ("image", Image), ("connectivity8", ctypes.c_int), ("numParticles", ctypes.POINTER(ctypes.c_int)), out=["numParticles"])
imaqMeasureParticle = STDFUNC("imaqMeasureParticle", ("image", Image), ("particleNumber", ctypes.c_int), ("calibrated", ctypes.c_int), ("measurement", MeasurementType), ("value", ctypes.POINTER(ctypes.c_double)), out=["value"])
_imaqMeasureParticles = STDPTRFUNC("imaqMeasureParticles", ctypes.POINTER(MeasureParticlesReport), ("image", Image), ("calibrationMode", MeasureParticlesCalibrationMode), ("measurements", ctypes.POINTER(MeasurementType)), ("numMeasurements", ctypes.c_size_t))
def imaqMeasureParticles(image, calibrationMode, measurements):
    measurements, numMeasurements = iterableToArray(measurements, MeasurementType)
    rv = _imaqMeasureParticles(image, calibrationMode, measurements, numMeasurements)
    return DisposedPointer(rv)
_imaqParticleFilter4 = STDFUNC("imaqParticleFilter4", ("dest", Image), ("source", Image), ("criteria", ctypes.POINTER(ParticleFilterCriteria2)), ("criteriaCount", ctypes.c_int), ("options", ctypes.POINTER(ParticleFilterOptions2)), ("roi", ROI), ("numParticles", ctypes.POINTER(ctypes.c_int)))
def imaqParticleFilter4(dest, source, criteria, options, roi):
    criteria, criteriaCount = iterableToArray(criteria, ParticleFilterCriteria2)
    numParticles = ctypes.c_int()
    _imaqParticleFilter4(dest, source, criteria, criteriaCount, options, roi, ctypes.byref(numParticles))
    return numParticles.value
##############################################################################
# Morphology functions
##############################################################################
imaqConvexHull = STDFUNC("imaqConvexHull", ("dest", Image), ("source", Image), ("connectivity8", ctypes.c_int))
imaqDanielssonDistance = STDFUNC("imaqDanielssonDistance", ("dest", Image), ("source", Image))
imaqFillHoles = STDFUNC("imaqFillHoles", ("dest", Image), ("source", Image), ("connectivity8", ctypes.c_int))
_imaqFindCircles = STDPTRFUNC("imaqFindCircles", ctypes.POINTER(CircleReport), ("dest", Image), ("source", Image), ("minRadius", ctypes.c_float), ("maxRadius", ctypes.c_float), ("numCircles", ctypes.POINTER(ctypes.c_int)))
def imaqFindCircles(dest, source, minRadius, maxRadius):
    numCircles = ctypes.c_int()
    rv = _imaqFindCircles(dest, source, minRadius, maxRadius, ctypes.byref(numCircles))
    return DisposedArray(rv, numCircles.value)
imaqLabel2 = STDFUNC("imaqLabel2", ("dest", Image), ("source", Image), ("connectivity8", ctypes.c_int), ("particleCount", ctypes.POINTER(ctypes.c_int)), out=["particleCount"])
imaqMorphology = STDFUNC("imaqMorphology", ("dest", Image), ("source", Image), ("method", MorphologyMethod), ("structuringElement", ctypes.POINTER(StructuringElement)))
imaqRejectBorder = STDFUNC("imaqRejectBorder", ("dest", Image), ("source", Image), ("connectivity8", ctypes.c_int))
imaqSegmentation = STDFUNC("imaqSegmentation", ("dest", Image), ("source", Image))
imaqSeparation = STDFUNC("imaqSeparation", ("dest", Image), ("source", Image), ("erosions", ctypes.c_int), ("structuringElement", ctypes.POINTER(StructuringElement)))
imaqSimpleDistance = STDFUNC("imaqSimpleDistance", ("dest", Image), ("source", Image), ("structuringElement", ctypes.POINTER(StructuringElement)))
imaqSizeFilter = STDFUNC("imaqSizeFilter", ("dest", Image), ("source", Image), ("connectivity8", ctypes.c_int), ("erosions", ctypes.c_int), ("keepSize", SizeType), ("structuringElement", ctypes.POINTER(StructuringElement)))
imaqSkeleton = STDFUNC("imaqSkeleton", ("dest", Image), ("source", Image), ("method", SkeletonMethod))
##############################################################################
# Acquisition functions
##############################################################################
_imaqCopyFromRing = STDPTRFUNC("imaqCopyFromRing", Image, ("sessionID", SESSION_ID), ("image", Image), ("imageToCopy", ctypes.c_int), ("imageNumber", ctypes.POINTER(ctypes.c_int)), ("rect", Rect))
def imaqCopyFromRing(sessionID, image, imageToCopy, rect):
    imageNumber = ctypes.c_int()
    rv = _imaqCopyFromRing(sessionID, image, imageToCopy, ctypes.byref(imageNumber), rect)
    return rv, imageNumber.value
imaqEasyAcquire = STDPTRFUNC("imaqEasyAcquire", Image, ("interfaceName", ctypes.c_char_p))
_imaqExtractFromRing = STDPTRFUNC("imaqExtractFromRing", Image, ("sessionID", SESSION_ID), ("imageToExtract", ctypes.c_int), ("imageNumber", ctypes.POINTER(ctypes.c_int)))
def imaqExtractFromRing(sessionID, imageToExtract):
    imageNumber = ctypes.c_int()
    rv = _imaqExtractFromRing(sessionID, imageToExtract, ctypes.byref(imageNumber))
    return rv, imageNumber.value
imaqGrab = STDPTRFUNC("imaqGrab", Image, ("sessionID", SESSION_ID), ("image", Image), ("immediate", ctypes.c_int))
imaqReleaseImage = STDFUNC("imaqReleaseImage", ("sessionID", SESSION_ID))
imaqSetupGrab = STDFUNC("imaqSetupGrab", ("sessionID", SESSION_ID), ("rect", Rect))
_imaqSetupRing = STDFUNC("imaqSetupRing", ("sessionID", SESSION_ID), ("images", ctypes.POINTER(Image)), ("numImages", ctypes.c_int), ("skipCount", ctypes.c_int), ("rect", Rect))
def imaqSetupRing(sessionID, images, skipCount, rect):
    images, numImages = iterableToArray(images, Image)
    _imaqSetupRing(sessionID, images, numImages, skipCount, rect)
_imaqSetupSequence = STDFUNC("imaqSetupSequence", ("sessionID", SESSION_ID), ("images", ctypes.POINTER(Image)), ("numImages", ctypes.c_int), ("skipCount", ctypes.c_int), ("rect", Rect))
def imaqSetupSequence(sessionID, images, skipCount, rect):
    images, numImages = iterableToArray(images, Image)
    _imaqSetupSequence(sessionID, images, numImages, skipCount, rect)
imaqSnap = STDPTRFUNC("imaqSnap", Image, ("sessionID", SESSION_ID), ("image", Image), ("rect", Rect))
imaqStartAcquisition = STDFUNC("imaqStartAcquisition", ("sessionID", SESSION_ID))
imaqStopAcquisition = STDFUNC("imaqStopAcquisition", ("sessionID", SESSION_ID))
##############################################################################
# Arithmetic functions
##############################################################################
imaqAbsoluteDifference = STDFUNC("imaqAbsoluteDifference", ("dest", Image), ("sourceA", Image), ("sourceB", Image))
imaqAbsoluteDifferenceConstant = STDFUNC("imaqAbsoluteDifferenceConstant", ("dest", Image), ("source", Image), ("value", PixelValue))
imaqAdd = STDFUNC("imaqAdd", ("dest", Image), ("sourceA", Image), ("sourceB", Image))
imaqAddConstant = STDFUNC("imaqAddConstant", ("dest", Image), ("source", Image), ("value", PixelValue))
imaqAverage = STDFUNC("imaqAverage", ("dest", Image), ("sourceA", Image), ("sourceB", Image))
imaqAverageConstant = STDFUNC("imaqAverageConstant", ("dest", Image), ("source", Image), ("value", PixelValue))
imaqDivide2 = STDFUNC("imaqDivide2", ("dest", Image), ("sourceA", Image), ("sourceB", Image), ("roundingMode", RoundingMode))
imaqDivideConstant2 = STDFUNC("imaqDivideConstant2", ("dest", Image), ("source", Image), ("value", PixelValue), ("roundingMode", RoundingMode))
imaqMax = STDFUNC("imaqMax", ("dest", Image), ("sourceA", Image), ("sourceB", Image))
imaqMaxConstant = STDFUNC("imaqMaxConstant", ("dest", Image), ("source", Image), ("value", PixelValue))
imaqMin = STDFUNC("imaqMin", ("dest", Image), ("sourceA", Image), ("sourceB", Image))
imaqMinConstant = STDFUNC("imaqMinConstant", ("dest", Image), ("source", Image), ("value", PixelValue))
imaqModulo = STDFUNC("imaqModulo", ("dest", Image), ("sourceA", Image), ("sourceB", Image))
imaqModuloConstant = STDFUNC("imaqModuloConstant", ("dest", Image), ("source", Image), ("value", PixelValue))
imaqMulDiv = STDFUNC("imaqMulDiv", ("dest", Image), ("sourceA", Image), ("sourceB", Image), ("value", ctypes.c_float))
imaqMultiply = STDFUNC("imaqMultiply", ("dest", Image), ("sourceA", Image), ("sourceB", Image))
imaqMultiplyConstant = STDFUNC("imaqMultiplyConstant", ("dest", Image), ("source", Image), ("value", PixelValue))
imaqSubtract = STDFUNC("imaqSubtract", ("dest", Image), ("sourceA", Image), ("sourceB", Image))
imaqSubtractConstant = STDFUNC("imaqSubtractConstant", ("dest", Image), ("source", Image), ("value", PixelValue))
##############################################################################
# Caliper functions
##############################################################################
_imaqCaliperTool = STDPTRFUNC("imaqCaliperTool", ctypes.POINTER(CaliperReport), ("image", Image), ("points", ctypes.POINTER(Point)), ("numPoints", ctypes.c_int), ("edgeOptions", ctypes.POINTER(EdgeOptions)), ("caliperOptions", ctypes.POINTER(CaliperOptions)), ("numEdgePairs", ctypes.POINTER(ctypes.c_int)))
def imaqCaliperTool(image, points, edgeOptions, caliperOptions):
    points, numPoints = iterableToArray(points, Point)
    numEdgePairs = ctypes.c_int()
    rv = _imaqCaliperTool(image, points, numPoints, edgeOptions, caliperOptions, ctypes.byref(numEdgePairs))
    return DisposedArray(rv, numEdgePairs.value)
_imaqConcentricRake2 = STDPTRFUNC("imaqConcentricRake2", ctypes.POINTER(ConcentricRakeReport2), ("image", Image), ("roi", ROI), ("direction", ConcentricRakeDirection), ("process", EdgeProcess), ("stepSize", ctypes.c_int), ("edgeOptions", ctypes.POINTER(EdgeOptions2)))
def imaqConcentricRake2(image, roi, direction, process, stepSize, edgeOptions):
    rv = _imaqConcentricRake2(image, roi, direction, process, stepSize, edgeOptions)
    return DisposedPointer(rv)
_imaqDetectExtremes = STDPTRFUNC("imaqDetectExtremes", ctypes.POINTER(ExtremeReport), ("pixels", ctypes.POINTER(ctypes.c_double)), ("numPixels", ctypes.c_int), ("mode", DetectionMode), ("options", ctypes.POINTER(DetectExtremesOptions)), ("numExtremes", ctypes.POINTER(ctypes.c_int)))
def imaqDetectExtremes(pixels, mode, options):
    pixels, numPixels = iterableToArray(pixels, ctypes.c_double)
    numExtremes = ctypes.c_int()
    rv = _imaqDetectExtremes(pixels, numPixels, mode, options, ctypes.byref(numExtremes))
    return DisposedArray(rv, numExtremes.value)
imaqDetectRotation = STDFUNC("imaqDetectRotation", ("referenceImage", Image), ("testImage", Image), ("referenceCenter", PointFloat), ("testCenter", PointFloat), ("radius", ctypes.c_int), ("precision", ctypes.c_float), ("angle", ctypes.POINTER(ctypes.c_double)), out=["angle"])
_imaqEdgeTool4 = STDPTRFUNC("imaqEdgeTool4", ctypes.POINTER(EdgeReport2), ("image", Image), ("roi", ROI), ("processType", EdgeProcess), ("edgeOptions", ctypes.POINTER(EdgeOptions2)), ("reverseDirection", ctypes.c_uint))
def imaqEdgeTool4(image, roi, processType, edgeOptions, reverseDirection):
    rv = _imaqEdgeTool4(image, roi, processType, edgeOptions, reverseDirection)
    return DisposedPointer(rv)
_imaqFindEdge2 = STDPTRFUNC("imaqFindEdge2", ctypes.POINTER(FindEdgeReport), ("image", Image), ("roi", ROI), ("baseSystem", ctypes.POINTER(CoordinateSystem)), ("newSystem", ctypes.POINTER(CoordinateSystem)), ("findEdgeOptions", ctypes.POINTER(FindEdgeOptions2)), ("straightEdgeOptions", ctypes.POINTER(StraightEdgeOptions)))
def imaqFindEdge2(image, roi, baseSystem, newSystem, findEdgeOptions, straightEdgeOptions):
    rv = _imaqFindEdge2(image, roi, baseSystem, newSystem, findEdgeOptions, straightEdgeOptions)
    return DisposedPointer(rv)
imaqFindTransformRect2 = STDFUNC("imaqFindTransformRect2", ("image", Image), ("roi", ROI), ("mode", FindTransformMode), ("baseSystem", ctypes.POINTER(CoordinateSystem)), ("newSystem", ctypes.POINTER(CoordinateSystem)), ("findTransformOptions", ctypes.POINTER(FindTransformRectOptions2)), ("straightEdgeOptions", ctypes.POINTER(StraightEdgeOptions)), ("axisReport", ctypes.POINTER(AxisReport)), out=["baseSystem", "newSystem", "axisReport"])
imaqFindTransformRects2 = STDFUNC("imaqFindTransformRects2", ("image", Image), ("primaryROI", ROI), ("secondaryROI", ROI), ("mode", FindTransformMode), ("baseSystem", ctypes.POINTER(CoordinateSystem)), ("newSystem", ctypes.POINTER(CoordinateSystem)), ("findTransformOptions", ctypes.POINTER(FindTransformRectsOptions2)), ("primaryStraightEdgeOptions", ctypes.POINTER(StraightEdgeOptions)), ("secondaryStraightEdgeOptions", ctypes.POINTER(StraightEdgeOptions)), ("axisReport", ctypes.POINTER(AxisReport)), out=["baseSystem", "newSystem", "axisReport"])
imaqLineGaugeTool2 = STDFUNC("imaqLineGaugeTool2", ("image", Image), ("start", Point), ("end", Point), ("method", LineGaugeMethod), ("edgeOptions", ctypes.POINTER(EdgeOptions)), ("transform", ctypes.POINTER(CoordinateTransform2)), ("distance", ctypes.POINTER(ctypes.c_float)), out=["distance"])
_imaqRake2 = STDPTRFUNC("imaqRake2", ctypes.POINTER(RakeReport2), ("image", Image), ("roi", ROI), ("direction", RakeDirection), ("process", EdgeProcess), ("stepSize", ctypes.c_int), ("edgeOptions", ctypes.POINTER(EdgeOptions2)))
def imaqRake2(image, roi, direction, process, stepSize, edgeOptions):
    rv = _imaqRake2(image, roi, direction, process, stepSize, edgeOptions)
    return DisposedPointer(rv)
_imaqSimpleEdge = STDPTRFUNC("imaqSimpleEdge", ctypes.POINTER(PointFloat), ("image", Image), ("points", ctypes.POINTER(Point)), ("numPoints", ctypes.c_int), ("options", ctypes.POINTER(SimpleEdgeOptions)), ("numEdges", ctypes.POINTER(ctypes.c_int)))
def imaqSimpleEdge(image, points, options):
    points, numPoints = iterableToArray(points, Point)
    numEdges = ctypes.c_int()
    rv = _imaqSimpleEdge(image, points, numPoints, options, ctypes.byref(numEdges))
    return DisposedArray(rv, numEdges.value)
_imaqSpoke2 = STDPTRFUNC("imaqSpoke2", ctypes.POINTER(SpokeReport2), ("image", Image), ("roi", ROI), ("direction", SpokeDirection), ("process", EdgeProcess), ("stepSize", ctypes.c_int), ("edgeOptions", ctypes.POINTER(EdgeOptions2)))
def imaqSpoke2(image, roi, direction, process, stepSize, edgeOptions):
    rv = _imaqSpoke2(image, roi, direction, process, stepSize, edgeOptions)
    return DisposedPointer(rv)
_imaqStraightEdge = STDPTRFUNC("imaqStraightEdge", ctypes.POINTER(StraightEdgeReport2), ("image", Image), ("roi", ROI), ("searchDirection", SearchDirection), ("edgeOptions", ctypes.POINTER(EdgeOptions2)), ("straightEdgeOptions", ctypes.POINTER(StraightEdgeOptions)))
def imaqStraightEdge(image, roi, searchDirection, edgeOptions, straightEdgeOptions):
    rv = _imaqStraightEdge(image, roi, searchDirection, edgeOptions, straightEdgeOptions)
    return DisposedPointer(rv)
_imaqStraightEdge2 = STDPTRFUNC("imaqStraightEdge2", ctypes.POINTER(StraightEdgeReport2), ("image", Image), ("roi", ROI), ("searchDirection", SearchDirection), ("edgeOptions", ctypes.POINTER(EdgeOptions2)), ("straightEdgeOptions", ctypes.POINTER(StraightEdgeOptions)), ("optimizedMode", ctypes.c_uint))
def imaqStraightEdge2(image, roi, searchDirection, edgeOptions, straightEdgeOptions, optimizedMode):
    rv = _imaqStraightEdge2(image, roi, searchDirection, edgeOptions, straightEdgeOptions, optimizedMode)
    return DisposedPointer(rv)
##############################################################################
# Spatial Filters functions
##############################################################################
imaqCannyEdgeFilter = STDFUNC("imaqCannyEdgeFilter", ("dest", Image), ("source", Image), ("options", ctypes.POINTER(CannyOptions)))
imaqConvolve2 = STDFUNC("imaqConvolve2", ("dest", Image), ("source", Image), ("kernel", ctypes.POINTER(ctypes.c_float)), ("matrixRows", ctypes.c_int), ("matrixCols", ctypes.c_int), ("normalize", ctypes.c_float), ("mask", Image), ("roundingMode", RoundingMode))
imaqCorrelate = STDFUNC("imaqCorrelate", ("dest", Image), ("source", Image), ("templateImage", Image), ("rect", Rect))
imaqEdgeFilter = STDFUNC("imaqEdgeFilter", ("dest", Image), ("source", Image), ("method", OutlineMethod), ("mask", Image))
imaqLowPass = STDFUNC("imaqLowPass", ("dest", Image), ("source", Image), ("width", ctypes.c_int), ("height", ctypes.c_int), ("tolerance", ctypes.c_float), ("mask", Image))
imaqMedianFilter = STDFUNC("imaqMedianFilter", ("dest", Image), ("source", Image), ("width", ctypes.c_int), ("height", ctypes.c_int), ("mask", Image))
imaqNthOrderFilter = STDFUNC("imaqNthOrderFilter", ("dest", Image), ("source", Image), ("width", ctypes.c_int), ("height", ctypes.c_int), ("n", ctypes.c_int), ("mask", Image))
##############################################################################
# Drawing functions
##############################################################################
imaqDrawLineOnImage = STDFUNC("imaqDrawLineOnImage", ("dest", Image), ("source", Image), ("mode", DrawMode), ("start", Point), ("end", Point), ("newPixelValue", ctypes.c_float))
imaqDrawShapeOnImage = STDFUNC("imaqDrawShapeOnImage", ("dest", Image), ("source", Image), ("rect", Rect), ("mode", DrawMode), ("shape", ShapeMode), ("newPixelValue", ctypes.c_float))
imaqDrawTextOnImage = STDFUNC("imaqDrawTextOnImage", ("dest", Image), ("source", Image), ("coord", Point), ("text", ctypes.c_char_p), ("options", ctypes.POINTER(DrawTextOptions)), ("fontNameUsed", ctypes.POINTER(ctypes.c_int)), out=["fontNameUsed"])
##############################################################################
# Interlacing functions
##############################################################################
imaqInterlaceCombine = STDFUNC("imaqInterlaceCombine", ("frame", Image), ("odd", Image), ("even", Image))
imaqInterlaceSeparate = STDFUNC("imaqInterlaceSeparate", ("frame", Image), ("odd", Image), ("even", Image))
##############################################################################
# Image Information functions
##############################################################################
_imaqEnumerateCustomKeys = STDPTRFUNC("imaqEnumerateCustomKeys", ctypes.POINTER(ctypes.c_char_p), ("image", Image), ("size", ctypes.POINTER(ctypes.c_uint)))
def imaqEnumerateCustomKeys(image):
    size = ctypes.c_uint()
    rv = _imaqEnumerateCustomKeys(image, ctypes.byref(size))
    return DisposedArray(rv, size.value)
imaqGetBitDepth = STDFUNC("imaqGetBitDepth", ("image", Image), ("bitDepth", ctypes.POINTER(ctypes.c_uint)), out=["bitDepth"])
imaqGetBytesPerPixel = STDFUNC("imaqGetBytesPerPixel", ("image", Image), ("byteCount", ctypes.POINTER(ctypes.c_int)), out=["byteCount"])
imaqGetImageInfo = STDFUNC("imaqGetImageInfo", ("image", Image), ("info", ctypes.POINTER(ImageInfo)))
imaqGetImageSize = STDFUNC("imaqGetImageSize", ("image", Image), ("width", ctypes.POINTER(ctypes.c_int)), ("height", ctypes.POINTER(ctypes.c_int)), out=["width", "height"])
_imaqGetImageType = STDFUNC("imaqGetImageType", ("image", Image), ("type", ctypes.POINTER(ImageType)))
def imaqGetImageType(image):
    type = ImageType(0)
    _imaqGetImageType(image, ctypes.byref(type))
    return type
imaqGetMaskOffset = STDFUNC("imaqGetMaskOffset", ("image", Image), ("offset", ctypes.POINTER(Point)))
_imaqGetPixelAddress = STDPTRFUNC("imaqGetPixelAddress", ctypes.c_void_p, ("image", Image), ("pixel", Point))
imaqGetVisionInfoTypes = STDFUNC("imaqGetVisionInfoTypes", ("image", Image), ("present", ctypes.POINTER(ctypes.c_uint)), out=["present"])
imaqIsImageEmpty = STDFUNC("imaqIsImageEmpty", ("image", Image), ("empty", ctypes.POINTER(ctypes.c_int)), out=["empty"])
_imaqReadCustomData = STDPTRFUNC("imaqReadCustomData", ctypes.c_void_p, ("image", Image), ("key", ctypes.c_char_p), ("size", ctypes.POINTER(ctypes.c_uint)))
def imaqReadCustomData(image, key):
    size = ctypes.c_uint()
    rv = _imaqReadCustomData(image, key, ctypes.byref(size))
    return rv, size.value
imaqRemoveCustomData = STDFUNC("imaqRemoveCustomData", ("image", Image), ("key", ctypes.c_char_p))
imaqRemoveVisionInfo2 = STDFUNC("imaqRemoveVisionInfo2", ("image", Image), ("info", ctypes.c_uint))
imaqSetBitDepth = STDFUNC("imaqSetBitDepth", ("image", Image), ("bitDepth", ctypes.c_uint))
imaqSetImageSize = STDFUNC("imaqSetImageSize", ("image", Image), ("width", ctypes.c_int), ("height", ctypes.c_int))
imaqSetMaskOffset = STDFUNC("imaqSetMaskOffset", ("image", Image), ("offset", Point))
imaqWriteCustomData = STDFUNC("imaqWriteCustomData", ("image", Image), ("key", ctypes.c_char_p), ("data", ctypes.c_void_p), ("size", ctypes.c_uint))
##############################################################################
# Display functions
##############################################################################
imaqAreToolsContextSensitive = STDFUNC("imaqAreToolsContextSensitive", ("sensitive", ctypes.POINTER(ctypes.c_int)), out=["sensitive"])
imaqCloseWindow = STDFUNC("imaqCloseWindow", ("windowNumber", ctypes.c_int))
imaqDisplayImage = STDFUNC("imaqDisplayImage", ("image", Image), ("windowNumber", ctypes.c_int), ("resize", ctypes.c_int))
imaqGetLastKey = STDFUNC("imaqGetLastKey", ("keyPressed", ctypes.c_char_p), ("windowNumber", ctypes.POINTER(ctypes.c_int)), ("modifiers", ctypes.POINTER(ctypes.c_int)), out=["keyPressed", "windowNumber", "modifiers"])
imaqGetSystemWindowHandle = STDPTRFUNC("imaqGetSystemWindowHandle", ctypes.c_void_p, ("windowNumber", ctypes.c_int))
imaqGetWindowCenterPos = STDFUNC("imaqGetWindowCenterPos", ("windowNumber", ctypes.c_int), ("centerPosition", ctypes.POINTER(Point)), out=["centerPosition"])
imaqSetToolContextSensitivity = STDFUNC("imaqSetToolContextSensitivity", ("sensitive", ctypes.c_int))
imaqShowWindow = STDFUNC("imaqShowWindow", ("windowNumber", ctypes.c_int), ("visible", ctypes.c_int))
##############################################################################
# Image Manipulation functions
##############################################################################
imaqCast = STDFUNC("imaqCast", ("dest", Image), ("source", Image), ("type", ImageType), ("lookup", ctypes.POINTER(ctypes.c_float)), ("shift", ctypes.c_int))
imaqCopyRect = STDFUNC("imaqCopyRect", ("dest", Image), ("source", Image), ("rect", Rect), ("destLoc", Point))
imaqDuplicate = STDFUNC("imaqDuplicate", ("dest", Image), ("source", Image))
_imaqFlatten = STDPTRFUNC("imaqFlatten", ctypes.c_void_p, ("image", Image), ("type", FlattenType), ("compression", CompressionType), ("quality", ctypes.c_int), ("size", ctypes.POINTER(ctypes.c_uint)))
def imaqFlatten(image, type, compression, quality):
    size = ctypes.c_uint()
    rv = _imaqFlatten(image, type, compression, quality, ctypes.byref(size))
    return rv, size.value
imaqFlip = STDFUNC("imaqFlip", ("dest", Image), ("source", Image), ("axis", FlipAxis))
imaqMask = STDFUNC("imaqMask", ("dest", Image), ("source", Image), ("mask", Image))
imaqResample = STDFUNC("imaqResample", ("dest", Image), ("source", Image), ("newWidth", ctypes.c_int), ("newHeight", ctypes.c_int), ("method", InterpolationMethod), ("rect", Rect))
imaqRotate2 = STDFUNC("imaqRotate2", ("dest", Image), ("source", Image), ("angle", ctypes.c_float), ("fill", PixelValue), ("method", InterpolationMethod), ("maintainSize", ctypes.c_int))
imaqScale = STDFUNC("imaqScale", ("dest", Image), ("source", Image), ("xScale", ctypes.c_int), ("yScale", ctypes.c_int), ("scaleMode", ScalingMode), ("rect", Rect))
imaqShift = STDFUNC("imaqShift", ("dest", Image), ("source", Image), ("shiftX", ctypes.c_int), ("shiftY", ctypes.c_int), ("fill", PixelValue))
imaqTranspose = STDFUNC("imaqTranspose", ("dest", Image), ("source", Image))
imaqUnflatten = STDFUNC("imaqUnflatten", ("image", Image), ("data", ctypes.c_void_p), ("size", ctypes.c_uint))
imaqUnwrapImage = STDFUNC("imaqUnwrapImage", ("dest", Image), ("source", Image), ("annulus", Annulus), ("orientation", RectOrientation), ("method", InterpolationMethod))
imaqView3D = STDFUNC("imaqView3D", ("dest", Image), ("source", Image), ("options", ctypes.POINTER(View3DOptions)))
##############################################################################
# File I/O functions
##############################################################################
imaqCloseAVI = STDFUNC("imaqCloseAVI", ("session", AVISession))
imaqCreateAVI = RETFUNC("imaqCreateAVI", AVISession, ("fileName", ctypes.c_char_p), ("compressionFilter", ctypes.c_char_p), ("quality", ctypes.c_int), ("framesPerSecond", ctypes.c_uint), ("maxDataSize", ctypes.c_uint))
imaqGetAVIInfo = STDFUNC("imaqGetAVIInfo", ("session", AVISession), ("info", ctypes.POINTER(AVIInfo)), out=["info"])
_imaqGetFileInfo = STDFUNC("imaqGetFileInfo", ("fileName", ctypes.c_char_p), ("calibrationUnit", ctypes.POINTER(CalibrationUnit)), ("calibrationX", ctypes.POINTER(ctypes.c_float)), ("calibrationY", ctypes.POINTER(ctypes.c_float)), ("width", ctypes.POINTER(ctypes.c_int)), ("height", ctypes.POINTER(ctypes.c_int)), ("imageType", ctypes.POINTER(ImageType)))
def imaqGetFileInfo(fileName):
    calibrationUnit = CalibrationUnit(0)
    calibrationX = ctypes.c_float()
    calibrationY = ctypes.c_float()
    width = ctypes.c_int()
    height = ctypes.c_int()
    imageType = ImageType(0)
    _imaqGetFileInfo(fileName, ctypes.byref(calibrationUnit), ctypes.byref(calibrationX), ctypes.byref(calibrationY), ctypes.byref(width), ctypes.byref(height), ctypes.byref(imageType))
    return calibrationUnit, calibrationX.value, calibrationY.value, width.value, height.value, imageType
_imaqGetFilterNames = STDPTRFUNC("imaqGetFilterNames", ctypes.POINTER(FilterName), ("numFilters", ctypes.POINTER(ctypes.c_int)))
def imaqGetFilterNames():
    numFilters = ctypes.c_int()
    rv = _imaqGetFilterNames(ctypes.byref(numFilters))
    return DisposedArray(rv, numFilters.value)
_imaqLoadImagePopup = STDPTRFUNC("imaqLoadImagePopup", ctypes.POINTER(ctypes.c_char_p), ("defaultDirectory", ctypes.c_char_p), ("defaultFileSpec", ctypes.c_char_p), ("fileTypeList", ctypes.c_char_p), ("title", ctypes.c_char_p), ("allowMultiplePaths", ctypes.c_int), ("buttonLabel", ButtonLabel), ("restrictDirectory", ctypes.c_int), ("restrictExtension", ctypes.c_int), ("allowCancel", ctypes.c_int), ("allowMakeDirectory", ctypes.c_int), ("cancelled", ctypes.POINTER(ctypes.c_int)), ("numPaths", ctypes.POINTER(ctypes.c_int)))
def imaqLoadImagePopup(defaultDirectory, defaultFileSpec, fileTypeList, title, allowMultiplePaths, buttonLabel, restrictDirectory, restrictExtension, allowCancel, allowMakeDirectory):
    cancelled = ctypes.c_int()
    numPaths = ctypes.c_int()
    rv = _imaqLoadImagePopup(defaultDirectory, defaultFileSpec, fileTypeList, title, allowMultiplePaths, buttonLabel, restrictDirectory, restrictExtension, allowCancel, allowMakeDirectory, ctypes.byref(cancelled), ctypes.byref(numPaths))
    return DisposedArray(rv, numPaths.value), cancelled.value
imaqOpenAVI = RETFUNC("imaqOpenAVI", AVISession, ("fileName", ctypes.c_char_p))
imaqReadFile = STDFUNC("imaqReadFile", ("image", Image), ("fileName", ctypes.c_char_p), ("colorTable", ctypes.POINTER(RGBValue)), ("numColors", ctypes.POINTER(ctypes.c_int)), out=["numColors"])
imaqReadVisionFile = STDFUNC("imaqReadVisionFile", ("image", Image), ("fileName", ctypes.c_char_p), ("colorTable", ctypes.POINTER(RGBValue)), ("numColors", ctypes.POINTER(ctypes.c_int)), out=["numColors"])
imaqWriteAVIFrame = STDFUNC("imaqWriteAVIFrame", ("image", Image), ("session", AVISession), ("data", ctypes.c_void_p), ("dataLength", ctypes.c_uint))
imaqWriteBMPFile = STDFUNC("imaqWriteBMPFile", ("image", Image), ("fileName", ctypes.c_char_p), ("compress", ctypes.c_int), ("colorTable", ctypes.POINTER(RGBValue), None))
imaqWriteFile = STDFUNC("imaqWriteFile", ("image", Image), ("fileName", ctypes.c_char_p), ("colorTable", ctypes.POINTER(RGBValue), None))
imaqWriteJPEGFile = STDFUNC("imaqWriteJPEGFile", ("image", Image), ("fileName", ctypes.c_char_p), ("quality", ctypes.c_uint), ("colorTable", ctypes.c_void_p, None))
imaqWriteJPEG2000File = STDFUNC("imaqWriteJPEG2000File", ("image", Image), ("fileName", ctypes.c_char_p), ("lossless", ctypes.c_int), ("compressionRatio", ctypes.c_float), ("advancedOptions", ctypes.POINTER(JPEG2000FileAdvancedOptions)), ("colorTable", ctypes.POINTER(RGBValue)))
imaqWritePNGFile2 = STDFUNC("imaqWritePNGFile2", ("image", Image), ("fileName", ctypes.c_char_p), ("compressionSpeed", ctypes.c_uint), ("colorTable", ctypes.POINTER(RGBValue), None), ("useBitDepth", ctypes.c_int))
imaqWriteTIFFFile = STDFUNC("imaqWriteTIFFFile", ("image", Image), ("fileName", ctypes.c_char_p), ("options", ctypes.POINTER(TIFFFileOptions), None), ("colorTable", ctypes.POINTER(RGBValue), None))
imaqWriteVisionFile = STDFUNC("imaqWriteVisionFile", ("image", Image), ("fileName", ctypes.c_char_p), ("colorTable", ctypes.POINTER(RGBValue)))
##############################################################################
# Analytic Geometry functions
##############################################################################
imaqBuildCoordinateSystem = STDFUNC("imaqBuildCoordinateSystem", ("points", ctypes.POINTER(Point)), ("mode", ReferenceMode), ("orientation", AxisOrientation), ("system", ctypes.POINTER(CoordinateSystem)), out=["system"])
_imaqFitCircle2 = STDPTRFUNC("imaqFitCircle2", ctypes.POINTER(BestCircle2), ("points", ctypes.POINTER(PointFloat)), ("numPoints", ctypes.c_int), ("options", ctypes.POINTER(FitCircleOptions)))
def imaqFitCircle2(points, options):
    points, numPoints = iterableToArray(points, PointFloat)
    rv = _imaqFitCircle2(points, numPoints, options)
    return DisposedPointer(rv)
_imaqFitEllipse2 = STDPTRFUNC("imaqFitEllipse2", ctypes.POINTER(BestEllipse2), ("points", ctypes.POINTER(PointFloat)), ("numPoints", ctypes.c_int), ("options", ctypes.POINTER(FitEllipseOptions)))
def imaqFitEllipse2(points, options):
    points, numPoints = iterableToArray(points, PointFloat)
    rv = _imaqFitEllipse2(points, numPoints, options)
    return DisposedPointer(rv)
_imaqFitLine = STDPTRFUNC("imaqFitLine", ctypes.POINTER(BestLine), ("points", ctypes.POINTER(PointFloat)), ("numPoints", ctypes.c_int), ("options", ctypes.POINTER(FitLineOptions)))
def imaqFitLine(points, options):
    points, numPoints = iterableToArray(points, PointFloat)
    rv = _imaqFitLine(points, numPoints, options)
    return DisposedPointer(rv)
imaqGetAngle = STDFUNC("imaqGetAngle", ("start1", PointFloat), ("end1", PointFloat), ("start2", PointFloat), ("end2", PointFloat), ("angle", ctypes.POINTER(ctypes.c_float)), out=["angle"])
imaqGetBisectingLine = STDFUNC("imaqGetBisectingLine", ("start1", PointFloat), ("end1", PointFloat), ("start2", PointFloat), ("end2", PointFloat), ("bisectStart", ctypes.POINTER(PointFloat)), ("bisectEnd", ctypes.POINTER(PointFloat)), out=["bisectStart", "bisectEnd"])
imaqGetDistance = STDFUNC("imaqGetDistance", ("point1", PointFloat), ("point2", PointFloat), ("distance", ctypes.POINTER(ctypes.c_float)), out=["distance"])
imaqGetIntersection = STDFUNC("imaqGetIntersection", ("start1", PointFloat), ("end1", PointFloat), ("start2", PointFloat), ("end2", PointFloat), ("intersection", ctypes.POINTER(PointFloat)), out=["intersection"])
imaqGetMidLine = STDFUNC("imaqGetMidLine", ("refLineStart", PointFloat), ("refLineEnd", PointFloat), ("point", PointFloat), ("midLineStart", ctypes.POINTER(PointFloat)), ("midLineEnd", ctypes.POINTER(PointFloat)), out=["midLineStart", "midLineEnd"])
imaqGetPerpendicularLine = STDFUNC("imaqGetPerpendicularLine", ("refLineStart", PointFloat), ("refLineEnd", PointFloat), ("point", PointFloat), ("perpLineStart", ctypes.POINTER(PointFloat)), ("perpLineEnd", ctypes.POINTER(PointFloat)), ("distance", ctypes.POINTER(ctypes.c_double)), out=["perpLineStart", "perpLineEnd", "distance"])
_imaqGetPointsOnContour = STDPTRFUNC("imaqGetPointsOnContour", ctypes.POINTER(SegmentInfo), ("image", Image), ("numSegments", ctypes.POINTER(ctypes.c_int)))
def imaqGetPointsOnContour(image):
    numSegments = ctypes.c_int()
    rv = _imaqGetPointsOnContour(image, ctypes.byref(numSegments))
    return DisposedArray(rv, numSegments.value)
_imaqGetPointsOnLine = STDPTRFUNC("imaqGetPointsOnLine", ctypes.POINTER(Point), ("start", Point), ("end", Point), ("numPoints", ctypes.POINTER(ctypes.c_int)))
def imaqGetPointsOnLine(start, end):
    numPoints = ctypes.c_int()
    rv = _imaqGetPointsOnLine(start, end, ctypes.byref(numPoints))
    return DisposedArray(rv, numPoints.value)
imaqGetPolygonArea = STDFUNC("imaqGetPolygonArea", ("points", ctypes.POINTER(PointFloat)), ("numPoints", ctypes.c_int), ("area", ctypes.POINTER(ctypes.c_float)), out=["area"])
_imaqInterpolatePoints = STDPTRFUNC("imaqInterpolatePoints", ctypes.POINTER(ctypes.c_float), ("image", Image), ("points", ctypes.POINTER(Point)), ("numPoints", ctypes.c_int), ("method", InterpolationMethod), ("subpixel", ctypes.c_int), ("interpCount", ctypes.POINTER(ctypes.c_int)))
def imaqInterpolatePoints(image, points, method, subpixel):
    points, numPoints = iterableToArray(points, Point)
    interpCount = ctypes.c_int()
    rv = _imaqInterpolatePoints(image, points, numPoints, method, subpixel, ctypes.byref(interpCount))
    return DisposedArray(rv, interpCount.value)
##############################################################################
# Clipboard functions
##############################################################################
imaqClipboardToImage = STDFUNC("imaqClipboardToImage", ("dest", Image), ("palette", ctypes.POINTER(RGBValue)))
imaqImageToClipboard = STDFUNC("imaqImageToClipboard", ("image", Image), ("palette", ctypes.POINTER(RGBValue)))
##############################################################################
# Border functions
##############################################################################
imaqFillBorder = STDFUNC("imaqFillBorder", ("image", Image), ("method", BorderMethod))
imaqGetBorderSize = STDFUNC("imaqGetBorderSize", ("image", Image), ("borderSize", ctypes.POINTER(ctypes.c_int)), out=["borderSize"])
imaqSetBorderSize = STDFUNC("imaqSetBorderSize", ("image", Image), ("size", ctypes.c_int))
##############################################################################
# Image Management functions
##############################################################################
imaqArrayToImage = STDFUNC("imaqArrayToImage", ("image", Image), ("array", ctypes.c_void_p), ("numCols", ctypes.c_int), ("numRows", ctypes.c_int))
imaqCreateImage = STDPTRFUNC("imaqCreateImage", Image, ("type", ImageType), ("borderSize", ctypes.c_int, 0))
_imaqImageToArray = STDPTRFUNC("imaqImageToArray", ctypes.c_void_p, ("image", Image), ("rect", Rect), ("columns", ctypes.POINTER(ctypes.c_int)), ("rows", ctypes.POINTER(ctypes.c_int)))
##############################################################################
# Color Processing functions
##############################################################################
imaqChangeColorSpace2 = RETFUNC("imaqChangeColorSpace2", Color2, ("sourceColor", ctypes.POINTER(Color2)), ("sourceSpace", ColorMode), ("destSpace", ColorMode), ("offset", ctypes.c_double), ("whiteReference", ctypes.POINTER(CIEXYZValue)))
imaqColorBCGTransform = STDFUNC("imaqColorBCGTransform", ("dest", Image), ("source", Image), ("redOptions", ctypes.POINTER(BCGOptions)), ("greenOptions", ctypes.POINTER(BCGOptions)), ("blueOptions", ctypes.POINTER(BCGOptions)), ("mask", Image))
imaqColorEqualize = STDFUNC("imaqColorEqualize", ("dest", Image), ("source", Image), ("colorEqualization", ctypes.c_int))
_imaqColorHistogram2 = STDPTRFUNC("imaqColorHistogram2", ctypes.POINTER(ColorHistogramReport), ("image", Image), ("numClasses", ctypes.c_int), ("mode", ColorMode), ("whiteReference", ctypes.POINTER(CIEXYZValue)), ("mask", Image))
def imaqColorHistogram2(image, numClasses, mode, whiteReference, mask):
    rv = _imaqColorHistogram2(image, numClasses, mode, whiteReference, mask)
    return DisposedPointer(rv)
imaqColorThreshold = STDFUNC("imaqColorThreshold", ("dest", Image), ("source", Image), ("replaceValue", ctypes.c_int), ("mode", ColorMode), ("plane1Range", ctypes.POINTER(Range)), ("plane2Range", ctypes.POINTER(Range)), ("plane3Range", ctypes.POINTER(Range)))
_imaqSupervisedColorSegmentation = STDPTRFUNC("imaqSupervisedColorSegmentation", ctypes.POINTER(SupervisedColorSegmentationReport), ("session", ClassifierSession), ("labelImage", Image), ("srcImage", Image), ("roi", ROI), ("labelIn", ctypes.POINTER(ROILabel)), ("numLabelIn", ctypes.c_uint), ("maxDistance", ctypes.c_int), ("minIdentificationScore", ctypes.c_int), ("segmentOptions", ctypes.POINTER(ColorSegmenationOptions)))
def imaqSupervisedColorSegmentation(session, labelImage, srcImage, roi, labelIn, numLabelIn, maxDistance, minIdentificationScore, segmentOptions):
    rv = _imaqSupervisedColorSegmentation(session, labelImage, srcImage, roi, labelIn, numLabelIn, maxDistance, minIdentificationScore, segmentOptions)
    return DisposedPointer(rv)
imaqGetColorSegmentationMaxDistance = STDFUNC("imaqGetColorSegmentationMaxDistance", ("session", ClassifierSession), ("segmentOptions", ctypes.POINTER(ColorSegmenationOptions)), ("distLevel", SegmentationDistanceLevel), ("maxDistance", ctypes.POINTER(ctypes.c_int)), out=["maxDistance"])
##############################################################################
# Transform functions
##############################################################################
imaqBCGTransform = STDFUNC("imaqBCGTransform", ("dest", Image), ("source", Image), ("options", ctypes.POINTER(BCGOptions)), ("mask", Image))
imaqEqualize = STDFUNC("imaqEqualize", ("dest", Image), ("source", Image), ("min", ctypes.c_float), ("max", ctypes.c_float), ("mask", Image))
imaqInverse = STDFUNC("imaqInverse", ("dest", Image), ("source", Image), ("mask", Image))
imaqMathTransform = STDFUNC("imaqMathTransform", ("dest", Image), ("source", Image), ("method", MathTransformMethod), ("rangeMin", ctypes.c_float), ("rangeMax", ctypes.c_float), ("power", ctypes.c_float), ("mask", Image))
imaqWatershedTransform = STDFUNC("imaqWatershedTransform", ("dest", Image), ("source", Image), ("connectivity8", ctypes.c_int), ("zoneCount", ctypes.POINTER(ctypes.c_int)), out=["zoneCount"])
##############################################################################
# Window Management functions
##############################################################################
imaqAreScrollbarsVisible = STDFUNC("imaqAreScrollbarsVisible", ("windowNumber", ctypes.c_int), ("visible", ctypes.POINTER(ctypes.c_int)), out=["visible"])
imaqBringWindowToTop = STDFUNC("imaqBringWindowToTop", ("windowNumber", ctypes.c_int))
imaqGetMousePos = STDFUNC("imaqGetMousePos", ("position", ctypes.POINTER(Point)), ("windowNumber", ctypes.POINTER(ctypes.c_int)), out=["windowNumber"])
_imaqGetWindowBackground = STDFUNC("imaqGetWindowBackground", ("windowNumber", ctypes.c_int), ("fillStyle", ctypes.POINTER(WindowBackgroundFillStyle)), ("hatchStyle", ctypes.POINTER(WindowBackgroundHatchStyle)), ("fillColor", ctypes.POINTER(RGBValue)), ("backgroundColor", ctypes.POINTER(RGBValue)))
def imaqGetWindowBackground(windowNumber, fillColor):
    fillStyle = WindowBackgroundFillStyle(0)
    hatchStyle = WindowBackgroundHatchStyle(0)
    backgroundColor = RGBValue()
    _imaqGetWindowBackground(windowNumber, ctypes.byref(fillStyle), ctypes.byref(hatchStyle), fillColor, ctypes.byref(backgroundColor))
    return fillStyle, hatchStyle, backgroundColor.value
imaqGetWindowDisplayMapping = STDFUNC("imaqGetWindowDisplayMapping", ("windowNum", ctypes.c_int), ("mapping", ctypes.POINTER(DisplayMapping)), out=["mapping"])
imaqGetWindowGrid = STDFUNC("imaqGetWindowGrid", ("windowNumber", ctypes.c_int), ("xResolution", ctypes.POINTER(ctypes.c_int)), ("yResolution", ctypes.POINTER(ctypes.c_int)), out=["xResolution", "yResolution"])
imaqGetWindowHandle = STDFUNC("imaqGetWindowHandle", ("handle", ctypes.POINTER(ctypes.c_int)), out=["handle"])
imaqGetWindowPos = STDFUNC("imaqGetWindowPos", ("windowNumber", ctypes.c_int), ("position", ctypes.POINTER(Point)), out=["position"])
imaqGetWindowSize = STDFUNC("imaqGetWindowSize", ("windowNumber", ctypes.c_int), ("width", ctypes.POINTER(ctypes.c_int)), ("height", ctypes.POINTER(ctypes.c_int)), out=["width", "height"])
imaqGetWindowTitle = STDPTRFUNC("imaqGetWindowTitle", ctypes.c_char_p, ("windowNumber", ctypes.c_int))
imaqGetWindowZoom2 = STDFUNC("imaqGetWindowZoom2", ("windowNumber", ctypes.c_int), ("xZoom", ctypes.POINTER(ctypes.c_float)), ("yZoom", ctypes.POINTER(ctypes.c_float)), out=["xZoom", "yZoom"])
imaqIsWindowNonTearing = STDFUNC("imaqIsWindowNonTearing", ("windowNumber", ctypes.c_int), ("nonTearing", ctypes.POINTER(ctypes.c_int)), out=["nonTearing"])
imaqIsWindowVisible = STDFUNC("imaqIsWindowVisible", ("windowNumber", ctypes.c_int), ("visible", ctypes.POINTER(ctypes.c_int)), out=["visible"])
imaqMoveWindow = STDFUNC("imaqMoveWindow", ("windowNumber", ctypes.c_int), ("position", Point))
imaqSetupWindow = STDFUNC("imaqSetupWindow", ("windowNumber", ctypes.c_int), ("configuration", ctypes.c_int))
imaqSetWindowBackground = STDFUNC("imaqSetWindowBackground", ("windowNumber", ctypes.c_int), ("fillStyle", WindowBackgroundFillStyle), ("hatchStyle", WindowBackgroundHatchStyle), ("fillColor", ctypes.POINTER(RGBValue)), ("backgroundColor", ctypes.POINTER(RGBValue)))
imaqSetWindowDisplayMapping = STDFUNC("imaqSetWindowDisplayMapping", ("windowNumber", ctypes.c_int), ("mapping", ctypes.POINTER(DisplayMapping)))
imaqSetWindowGrid = STDFUNC("imaqSetWindowGrid", ("windowNumber", ctypes.c_int), ("xResolution", ctypes.c_int), ("yResolution", ctypes.c_int))
imaqSetWindowMaxContourCount = STDFUNC("imaqSetWindowMaxContourCount", ("windowNumber", ctypes.c_int), ("maxContourCount", ctypes.c_uint))
imaqSetWindowNonTearing = STDFUNC("imaqSetWindowNonTearing", ("windowNumber", ctypes.c_int), ("nonTearing", ctypes.c_int))
_imaqSetWindowPalette = STDFUNC("imaqSetWindowPalette", ("windowNumber", ctypes.c_int), ("type", PaletteType), ("palette", ctypes.POINTER(RGBValue)), ("numColors", ctypes.c_int))
def imaqSetWindowPalette(windowNumber, type, palette):
    palette, numColors = iterableToArray(palette, RGBValue)
    _imaqSetWindowPalette(windowNumber, type, palette, numColors)
imaqSetWindowSize = STDFUNC("imaqSetWindowSize", ("windowNumber", ctypes.c_int), ("width", ctypes.c_int), ("height", ctypes.c_int))
imaqSetWindowThreadPolicy = STDFUNC("imaqSetWindowThreadPolicy", ("policy", WindowThreadPolicy))
imaqSetWindowTitle = STDFUNC("imaqSetWindowTitle", ("windowNumber", ctypes.c_int), ("title", ctypes.c_char_p))
imaqSetWindowZoomToFit = STDFUNC("imaqSetWindowZoomToFit", ("windowNumber", ctypes.c_int), ("zoomToFit", ctypes.c_int))
imaqShowScrollbars = STDFUNC("imaqShowScrollbars", ("windowNumber", ctypes.c_int), ("visible", ctypes.c_int))
imaqZoomWindow2 = STDFUNC("imaqZoomWindow2", ("windowNumber", ctypes.c_int), ("xZoom", ctypes.c_float), ("yZoom", ctypes.c_float), ("center", Point))
##############################################################################
# Utilities functions
##############################################################################
_imaqGetKernel = STDPTRFUNC("imaqGetKernel", ctypes.POINTER(ctypes.c_float), ("family", KernelFamily), ("size", ctypes.c_int), ("number", ctypes.c_int))
def imaqGetKernel(family, size, number):
    rv = _imaqGetKernel(family, size, number)
    return DisposedPointer(rv)
imaqMakeRectFromRotatedRect = RETFUNC("imaqMakeRectFromRotatedRect", Rect, ("rotatedRect", RotatedRect))
_imaqMulticoreOptions = STDFUNC("imaqMulticoreOptions", ("operation", MulticoreOperation), ("customNumCores", ctypes.POINTER(ctypes.c_uint)))
##############################################################################
# Tool Window functions
##############################################################################
imaqCloseToolWindow = STDFUNC("imaqCloseToolWindow")
_imaqGetCurrentTool = STDFUNC("imaqGetCurrentTool", ("currentTool", ctypes.POINTER(Tool)))
def imaqGetCurrentTool():
    currentTool = Tool(0)
    _imaqGetCurrentTool(ctypes.byref(currentTool))
    return currentTool
_imaqGetLastEvent = STDFUNC("imaqGetLastEvent", ("type", ctypes.POINTER(WindowEventType)), ("windowNumber", ctypes.POINTER(ctypes.c_int)), ("tool", ctypes.POINTER(Tool)), ("rect", ctypes.POINTER(Rect)))
def imaqGetLastEvent():
    type = WindowEventType(0)
    windowNumber = ctypes.c_int()
    tool = Tool(0)
    rect = Rect()
    _imaqGetLastEvent(ctypes.byref(type), ctypes.byref(windowNumber), ctypes.byref(tool), ctypes.byref(rect))
    return type, windowNumber.value, tool, rect.value
imaqGetToolWindowHandle = STDPTRFUNC("imaqGetToolWindowHandle", ctypes.c_void_p)
imaqGetToolWindowPos = STDFUNC("imaqGetToolWindowPos", ("position", ctypes.POINTER(Point)), out=["position"])
imaqIsToolWindowVisible = STDFUNC("imaqIsToolWindowVisible", ("visible", ctypes.POINTER(ctypes.c_int)), out=["visible"])
imaqMoveToolWindow = STDFUNC("imaqMoveToolWindow", ("position", Point))
imaqSetCurrentTool = STDFUNC("imaqSetCurrentTool", ("currentTool", Tool))
imaqSetEventCallback = STDFUNC("imaqSetEventCallback", ("callback", EventCallback), ("synchronous", ctypes.c_int))
imaqSetToolColor = STDFUNC("imaqSetToolColor", ("color", ctypes.POINTER(RGBValue)))
imaqSetupToolWindow = STDFUNC("imaqSetupToolWindow", ("showCoordinates", ctypes.c_int), ("maxIconsPerLine", ctypes.c_int), ("options", ctypes.POINTER(ToolWindowOptions)))
imaqShowToolWindow = STDFUNC("imaqShowToolWindow", ("visible", ctypes.c_int))
##############################################################################
# Meter functions
##############################################################################
_imaqGetMeterArc = STDPTRFUNC("imaqGetMeterArc", ctypes.POINTER(MeterArc), ("lightNeedle", ctypes.c_int), ("mode", MeterArcMode), ("roi", ROI), ("base", PointFloat), ("start", PointFloat), ("end", PointFloat))
def imaqGetMeterArc(lightNeedle, mode, roi, base, start, end):
    rv = _imaqGetMeterArc(lightNeedle, mode, roi, base, start, end)
    return DisposedPointer(rv)
imaqReadMeter = STDFUNC("imaqReadMeter", ("image", Image), ("arcInfo", ctypes.POINTER(MeterArc)), ("percentage", ctypes.POINTER(ctypes.c_double)), ("endOfNeedle", ctypes.POINTER(PointFloat)), out=["percentage", "endOfNeedle"])
##############################################################################
# Calibration functions
##############################################################################
imaqCopyCalibrationInfo2 = STDFUNC("imaqCopyCalibrationInfo2", ("dest", Image), ("source", Image), ("offset", Point))
imaqCorrectCalibratedImage = STDFUNC("imaqCorrectCalibratedImage", ("dest", Image), ("source", Image), ("fill", PixelValue), ("method", InterpolationMethod), ("roi", ROI))
_imaqGetCalibrationInfo2 = STDPTRFUNC("imaqGetCalibrationInfo2", ctypes.POINTER(CalibrationInfo), ("image", Image))
def imaqGetCalibrationInfo2(image):
    rv = _imaqGetCalibrationInfo2(image)
    return DisposedPointer(rv)
_imaqGetCalibrationInfo3 = STDPTRFUNC("imaqGetCalibrationInfo3", ctypes.POINTER(CalibrationInfo), ("image", Image), ("isGetErrorMap", ctypes.c_uint))
def imaqGetCalibrationInfo3(image, isGetErrorMap):
    rv = _imaqGetCalibrationInfo3(image, isGetErrorMap)
    return DisposedPointer(rv)
imaqLearnCalibrationGrid = STDFUNC("imaqLearnCalibrationGrid", ("image", Image), ("roi", ROI), ("options", ctypes.POINTER(LearnCalibrationOptions)), ("grid", ctypes.POINTER(GridDescriptor)), ("system", ctypes.POINTER(CoordinateSystem)), ("range", ctypes.POINTER(RangeFloat)), ("quality", ctypes.POINTER(ctypes.c_float)), out=["quality"])
imaqLearnCalibrationPoints = STDFUNC("imaqLearnCalibrationPoints", ("image", Image), ("points", ctypes.POINTER(CalibrationPoints)), ("roi", ROI), ("options", ctypes.POINTER(LearnCalibrationOptions)), ("grid", ctypes.POINTER(GridDescriptor)), ("system", ctypes.POINTER(CoordinateSystem)), ("quality", ctypes.POINTER(ctypes.c_float)), out=["quality"])
imaqSetCoordinateSystem = STDFUNC("imaqSetCoordinateSystem", ("image", Image), ("system", ctypes.POINTER(CoordinateSystem)))
imaqSetSimpleCalibration = STDFUNC("imaqSetSimpleCalibration", ("image", Image), ("method", ScalingMethod), ("learnTable", ctypes.c_int), ("grid", ctypes.POINTER(GridDescriptor)), ("system", ctypes.POINTER(CoordinateSystem)))
_imaqTransformPixelToRealWorld = STDPTRFUNC("imaqTransformPixelToRealWorld", ctypes.POINTER(TransformReport), ("image", Image), ("pixelCoordinates", ctypes.POINTER(PointFloat)), ("numCoordinates", ctypes.c_int))
def imaqTransformPixelToRealWorld(image, pixelCoordinates):
    pixelCoordinates, numCoordinates = iterableToArray(pixelCoordinates, PointFloat)
    rv = _imaqTransformPixelToRealWorld(image, pixelCoordinates, numCoordinates)
    return DisposedPointer(rv)
_imaqTransformRealWorldToPixel = STDPTRFUNC("imaqTransformRealWorldToPixel", ctypes.POINTER(TransformReport), ("image", Image), ("realWorldCoordinates", ctypes.POINTER(PointFloat)), ("numCoordinates", ctypes.c_int))
def imaqTransformRealWorldToPixel(image, realWorldCoordinates):
    realWorldCoordinates, numCoordinates = iterableToArray(realWorldCoordinates, PointFloat)
    rv = _imaqTransformRealWorldToPixel(image, realWorldCoordinates, numCoordinates)
    return DisposedPointer(rv)
imaqSetSimpleCalibration2 = STDFUNC("imaqSetSimpleCalibration2", ("image", Image), ("gridDescriptor", ctypes.POINTER(GridDescriptor)))
imaqCalibrationSetAxisInfo = STDFUNC("imaqCalibrationSetAxisInfo", ("image", Image), ("axisInfo", ctypes.POINTER(CoordinateSystem)))
imaqCalibrationGetThumbnailImage = STDFUNC("imaqCalibrationGetThumbnailImage", ("templateImage", Image), ("image", Image), ("type", CalibrationThumbnailType), ("index", ctypes.c_uint))
_imaqCalibrationGetCalibrationInfo = STDPTRFUNC("imaqCalibrationGetCalibrationInfo", ctypes.POINTER(GetCalibrationInfoReport), ("image", Image), ("isGetErrorMap", ctypes.c_uint))
def imaqCalibrationGetCalibrationInfo(image, isGetErrorMap):
    rv = _imaqCalibrationGetCalibrationInfo(image, isGetErrorMap)
    return DisposedPointer(rv)
_imaqCalibrationGetCameraParameters = STDPTRFUNC("imaqCalibrationGetCameraParameters", ctypes.POINTER(GetCameraParametersReport), ("templateImage", Image))
def imaqCalibrationGetCameraParameters(templateImage):
    rv = _imaqCalibrationGetCameraParameters(templateImage)
    return DisposedPointer(rv)
imaqCalibrationCompactInformation = STDFUNC("imaqCalibrationCompactInformation", ("image", Image))
##############################################################################
# Pixel Manipulation functions
##############################################################################
imaqArrayToComplexPlane = STDFUNC("imaqArrayToComplexPlane", ("dest", Image), ("source", Image), ("newPixels", ctypes.POINTER(ctypes.c_float)), ("plane", ComplexPlane))
_imaqComplexPlaneToArray = STDPTRFUNC("imaqComplexPlaneToArray", ctypes.POINTER(ctypes.c_float), ("image", Image), ("plane", ComplexPlane), ("rect", Rect), ("rows", ctypes.POINTER(ctypes.c_int)), ("columns", ctypes.POINTER(ctypes.c_int)))
imaqExtractColorPlanes = STDFUNC("imaqExtractColorPlanes", ("image", Image), ("mode", ColorMode), ("plane1", Image), ("plane2", Image), ("plane3", Image))
imaqExtractComplexPlane = STDFUNC("imaqExtractComplexPlane", ("dest", Image), ("source", Image), ("plane", ComplexPlane))
imaqFillImage = STDFUNC("imaqFillImage", ("image", Image), ("value", PixelValue), ("mask", Image))
_imaqGetLine = STDPTRFUNC("imaqGetLine", ctypes.c_void_p, ("image", Image), ("start", Point), ("end", Point), ("numPoints", ctypes.POINTER(ctypes.c_int)))
imaqGetPixel = STDFUNC("imaqGetPixel", ("image", Image), ("pixel", Point), ("value", ctypes.POINTER(PixelValue)), out=["value"])
imaqReplaceColorPlanes = STDFUNC("imaqReplaceColorPlanes", ("dest", Image), ("source", Image), ("mode", ColorMode), ("plane1", Image), ("plane2", Image), ("plane3", Image))
imaqReplaceComplexPlane = STDFUNC("imaqReplaceComplexPlane", ("dest", Image), ("source", Image), ("newValues", Image), ("plane", ComplexPlane))
_imaqSetLine = STDFUNC("imaqSetLine", ("image", Image), ("array", ctypes.c_void_p), ("arraySize", ctypes.c_int), ("start", Point), ("end", Point))
imaqSetPixel = STDFUNC("imaqSetPixel", ("image", Image), ("coord", Point), ("value", PixelValue))
##############################################################################
# Color Matching functions
##############################################################################
_imaqLearnColor = STDPTRFUNC("imaqLearnColor", ctypes.POINTER(ColorInformation), ("image", Image), ("roi", ROI), ("sensitivity", ColorSensitivity), ("saturation", ctypes.c_int))
def imaqLearnColor(image, roi, sensitivity, saturation):
    rv = _imaqLearnColor(image, roi, sensitivity, saturation)
    return DisposedPointer(rv)
_imaqMatchColor = STDPTRFUNC("imaqMatchColor", ctypes.POINTER(ctypes.c_int), ("image", Image), ("info", ctypes.POINTER(ColorInformation)), ("roi", ROI), ("numScores", ctypes.POINTER(ctypes.c_int)))
def imaqMatchColor(image, info, roi):
    numScores = ctypes.c_int()
    rv = _imaqMatchColor(image, info, roi, ctypes.byref(numScores))
    return DisposedArray(rv, numScores.value)
##############################################################################
# Frequency Domain Analysis functions
##############################################################################
imaqAttenuate = STDFUNC("imaqAttenuate", ("dest", Image), ("source", Image), ("highlow", AttenuateMode))
imaqConjugate = STDFUNC("imaqConjugate", ("dest", Image), ("source", Image))
imaqFFT = STDFUNC("imaqFFT", ("dest", Image), ("source", Image))
imaqFlipFrequencies = STDFUNC("imaqFlipFrequencies", ("dest", Image), ("source", Image))
imaqInverseFFT = STDFUNC("imaqInverseFFT", ("dest", Image), ("source", Image))
imaqTruncate = STDFUNC("imaqTruncate", ("dest", Image), ("source", Image), ("highlow", TruncateMode), ("ratioToKeep", ctypes.c_float))
##############################################################################
# Barcode I/O functions
##############################################################################
imaqGradeDataMatrixBarcodeAIM = STDFUNC("imaqGradeDataMatrixBarcodeAIM", ("image", Image), ("report", ctypes.POINTER(AIMGradeReport)), out=["report"])
_imaqReadBarcode = STDPTRFUNC("imaqReadBarcode", ctypes.POINTER(BarcodeInfo), ("image", Image), ("type", BarcodeType), ("roi", ROI), ("validate", ctypes.c_int))
def imaqReadBarcode(image, type, roi, validate):
    rv = _imaqReadBarcode(image, type, roi, validate)
    return DisposedPointer(rv)
_imaqReadDataMatrixBarcode2 = STDPTRFUNC("imaqReadDataMatrixBarcode2", ctypes.POINTER(DataMatrixReport), ("image", Image), ("roi", ROI), ("prepareForGrading", DataMatrixGradingMode), ("descriptionOptions", ctypes.POINTER(DataMatrixDescriptionOptions)), ("sizeOptions", ctypes.POINTER(DataMatrixSizeOptions)), ("searchOptions", ctypes.POINTER(DataMatrixSearchOptions)))
def imaqReadDataMatrixBarcode2(image, roi, prepareForGrading, descriptionOptions, sizeOptions, searchOptions):
    rv = _imaqReadDataMatrixBarcode2(image, roi, prepareForGrading, descriptionOptions, sizeOptions, searchOptions)
    return DisposedPointer(rv)
_imaqReadPDF417Barcode = STDPTRFUNC("imaqReadPDF417Barcode", ctypes.POINTER(Barcode2DInfo), ("image", Image), ("roi", ROI), ("searchMode", Barcode2DSearchMode), ("numBarcodes", ctypes.POINTER(ctypes.c_uint)))
def imaqReadPDF417Barcode(image, roi, searchMode):
    numBarcodes = ctypes.c_uint()
    rv = _imaqReadPDF417Barcode(image, roi, searchMode, ctypes.byref(numBarcodes))
    return DisposedArray(rv, numBarcodes.value)
_imaqReadQRCode = STDPTRFUNC("imaqReadQRCode", ctypes.POINTER(QRCodeReport), ("image", Image), ("roi", ROI), ("reserved", QRGradingMode, IMAQ_QR_NO_GRADING), ("descriptionOptions", ctypes.POINTER(QRCodeDescriptionOptions)), ("sizeOptions", ctypes.POINTER(QRCodeSizeOptions)), ("searchOptions", ctypes.POINTER(QRCodeSearchOptions)))
def imaqReadQRCode(image, roi, reserved, descriptionOptions, sizeOptions, searchOptions):
    rv = _imaqReadQRCode(image, roi, reserved, descriptionOptions, sizeOptions, searchOptions)
    return DisposedPointer(rv)
##############################################################################
# LCD functions
##############################################################################
imaqFindLCDSegments = STDFUNC("imaqFindLCDSegments", ("roi", ROI), ("image", Image), ("options", ctypes.POINTER(LCDOptions)))
_imaqReadLCD = STDPTRFUNC("imaqReadLCD", ctypes.POINTER(LCDReport), ("image", Image), ("roi", ROI), ("options", ctypes.POINTER(LCDOptions)))
def imaqReadLCD(image, roi, options):
    rv = _imaqReadLCD(image, roi, options)
    return DisposedPointer(rv)
##############################################################################
# Shape Matching functions
##############################################################################
_imaqMatchShape = STDPTRFUNC("imaqMatchShape", ctypes.POINTER(ShapeReport), ("dest", Image), ("source", Image), ("templateImage", Image), ("scaleInvariant", ctypes.c_int), ("connectivity8", ctypes.c_int), ("tolerance", ctypes.c_double), ("numMatches", ctypes.POINTER(ctypes.c_int)))
def imaqMatchShape(dest, source, templateImage, scaleInvariant, connectivity8, tolerance):
    numMatches = ctypes.c_int()
    rv = _imaqMatchShape(dest, source, templateImage, scaleInvariant, connectivity8, tolerance, ctypes.byref(numMatches))
    return DisposedArray(rv, numMatches.value)
##############################################################################
# Contours functions
##############################################################################
imaqAddAnnulusContour = RETFUNC("imaqAddAnnulusContour", ContourID, ("roi", ROI), ("annulus", Annulus))
_imaqAddClosedContour = RETFUNC("imaqAddClosedContour", ContourID, ("roi", ROI), ("points", ctypes.POINTER(Point)), ("numPoints", ctypes.c_int))
def imaqAddClosedContour(roi, points):
    points, numPoints = iterableToArray(points, Point)
    rv = _imaqAddClosedContour(roi, points, numPoints)
    return rv
imaqAddLineContour = RETFUNC("imaqAddLineContour", ContourID, ("roi", ROI), ("start", Point), ("end", Point))
_imaqAddOpenContour = RETFUNC("imaqAddOpenContour", ContourID, ("roi", ROI), ("points", ctypes.POINTER(Point)), ("numPoints", ctypes.c_int))
def imaqAddOpenContour(roi, points):
    points, numPoints = iterableToArray(points, Point)
    rv = _imaqAddOpenContour(roi, points, numPoints)
    return rv
imaqAddOvalContour = RETFUNC("imaqAddOvalContour", ContourID, ("roi", ROI), ("boundingBox", Rect))
imaqAddPointContour = RETFUNC("imaqAddPointContour", ContourID, ("roi", ROI), ("point", Point))
imaqAddRectContour = RETFUNC("imaqAddRectContour", ContourID, ("roi", ROI), ("rect", Rect))
imaqAddRotatedRectContour2 = RETFUNC("imaqAddRotatedRectContour2", ContourID, ("roi", ROI), ("rect", RotatedRect))
imaqCopyContour = RETFUNC("imaqCopyContour", ContourID, ("destRoi", ROI), ("sourceRoi", ROI), ("id", ContourID))
imaqGetContour = RETFUNC("imaqGetContour", ContourID, ("roi", ROI), ("index", ctypes.c_uint))
imaqGetContourColor = STDFUNC("imaqGetContourColor", ("roi", ROI), ("id", ContourID), ("contourColor", ctypes.POINTER(RGBValue)), out=["contourColor"])
imaqGetContourCount = STDFUNC("imaqGetContourCount", ("roi", ROI))
_imaqGetContourInfo2 = STDPTRFUNC("imaqGetContourInfo2", ctypes.POINTER(ContourInfo2), ("roi", ROI), ("id", ContourID))
def imaqGetContourInfo2(roi, id):
    rv = _imaqGetContourInfo2(roi, id)
    return DisposedPointer(rv)
imaqMoveContour = STDFUNC("imaqMoveContour", ("roi", ROI), ("id", ContourID), ("deltaX", ctypes.c_int), ("deltaY", ctypes.c_int))
imaqRemoveContour = STDFUNC("imaqRemoveContour", ("roi", ROI), ("id", ContourID))
imaqSetContourColor = STDFUNC("imaqSetContourColor", ("roi", ROI), ("id", ContourID), ("color", ctypes.POINTER(RGBValue)))
##############################################################################
# Regions of Interest functions
##############################################################################
imaqConstructROI2 = STDFUNC("imaqConstructROI2", ("image", Image), ("roi", ROI), ("initialTool", Tool), ("tools", ctypes.POINTER(ToolWindowOptions)), ("options", ctypes.POINTER(ConstructROIOptions2)), ("okay", ctypes.POINTER(ctypes.c_int)), out=["okay"])
imaqCreateROI = STDPTRFUNC("imaqCreateROI", ROI)
imaqGetROIBoundingBox = STDFUNC("imaqGetROIBoundingBox", ("roi", ROI), ("boundingBox", ctypes.POINTER(Rect)), out=["boundingBox"])
imaqGetROIColor = STDFUNC("imaqGetROIColor", ("roi", ROI), ("roiColor", ctypes.POINTER(RGBValue)), out=["roiColor"])
imaqGetWindowROI = STDPTRFUNC("imaqGetWindowROI", ROI, ("windowNumber", ctypes.c_int))
imaqSetROIColor = STDFUNC("imaqSetROIColor", ("roi", ROI), ("color", ctypes.POINTER(RGBValue)))
imaqSetWindowROI = STDFUNC("imaqSetWindowROI", ("windowNumber", ctypes.c_int), ("roi", ROI))
##############################################################################
# Image Analysis functions
##############################################################################
imaqCentroid = STDFUNC("imaqCentroid", ("image", Image), ("centroid", ctypes.POINTER(PointFloat)), ("mask", Image))
_imaqExtractCurves = STDPTRFUNC("imaqExtractCurves", ctypes.POINTER(Curve), ("image", Image), ("roi", ROI), ("curveOptions", ctypes.POINTER(CurveOptions)), ("numCurves", ctypes.POINTER(ctypes.c_uint)))
def imaqExtractCurves(image, roi, curveOptions):
    numCurves = ctypes.c_uint()
    rv = _imaqExtractCurves(image, roi, curveOptions, ctypes.byref(numCurves))
    return DisposedArray(rv, numCurves.value)
_imaqHistogram = STDPTRFUNC("imaqHistogram", ctypes.POINTER(HistogramReport), ("image", Image), ("numClasses", ctypes.c_int), ("min", ctypes.c_float), ("max", ctypes.c_float), ("mask", Image))
def imaqHistogram(image, numClasses, min, max, mask):
    rv = _imaqHistogram(image, numClasses, min, max, mask)
    return DisposedPointer(rv)
_imaqLinearAverages2 = STDPTRFUNC("imaqLinearAverages2", ctypes.POINTER(LinearAverages), ("image", Image), ("mode", LinearAveragesMode), ("rect", Rect))
def imaqLinearAverages2(image, mode, rect):
    rv = _imaqLinearAverages2(image, mode, rect)
    return DisposedPointer(rv)
_imaqLineProfile = STDPTRFUNC("imaqLineProfile", ctypes.POINTER(LineProfile), ("image", Image), ("start", Point), ("end", Point))
def imaqLineProfile(image, start, end):
    rv = _imaqLineProfile(image, start, end)
    return DisposedPointer(rv)
_imaqQuantify = STDPTRFUNC("imaqQuantify", ctypes.POINTER(QuantifyReport), ("image", Image), ("mask", Image))
def imaqQuantify(image, mask):
    rv = _imaqQuantify(image, mask)
    return DisposedPointer(rv)
##############################################################################
# Threshold functions
##############################################################################
_imaqAutoThreshold2 = STDPTRFUNC("imaqAutoThreshold2", ctypes.POINTER(ThresholdData), ("dest", Image), ("source", Image), ("numClasses", ctypes.c_int), ("method", ThresholdMethod), ("mask", Image))
def imaqAutoThreshold2(dest, source, numClasses, method, mask):
    rv = _imaqAutoThreshold2(dest, source, numClasses, method, mask)
    return DisposedPointer(rv)
imaqLocalThreshold = STDFUNC("imaqLocalThreshold", ("dest", Image), ("source", Image), ("windowWidth", ctypes.c_uint), ("windowHeight", ctypes.c_uint), ("method", LocalThresholdMethod), ("deviationWeight", ctypes.c_double), ("type", ObjectType), ("replaceValue", ctypes.c_float))
imaqMagicWand = STDFUNC("imaqMagicWand", ("dest", Image), ("source", Image), ("coord", Point), ("tolerance", ctypes.c_float), ("connectivity8", ctypes.c_int), ("replaceValue", ctypes.c_float))
_imaqMultithreshold = STDFUNC("imaqMultithreshold", ("dest", Image), ("source", Image), ("ranges", ctypes.POINTER(ThresholdData)), ("numRanges", ctypes.c_int))
def imaqMultithreshold(dest, source, ranges):
    ranges, numRanges = iterableToArray(ranges, ThresholdData)
    _imaqMultithreshold(dest, source, ranges, numRanges)
imaqThreshold = STDFUNC("imaqThreshold", ("dest", Image), ("source", Image), ("rangeMin", ctypes.c_float), ("rangeMax", ctypes.c_float), ("useNewValue", ctypes.c_int), ("newValue", ctypes.c_float))
##############################################################################
# Memory Management functions
##############################################################################
##############################################################################
# Pattern Matching functions
##############################################################################
_imaqDetectCircles = STDPTRFUNC("imaqDetectCircles", ctypes.POINTER(CircleMatch), ("image", Image), ("circleDescriptor", ctypes.POINTER(CircleDescriptor)), ("curveOptions", ctypes.POINTER(CurveOptions)), ("shapeDetectionOptions", ctypes.POINTER(ShapeDetectionOptions)), ("roi", ROI), ("numMatchesReturned", ctypes.POINTER(ctypes.c_int)))
def imaqDetectCircles(image, circleDescriptor, curveOptions, shapeDetectionOptions, roi):
    numMatchesReturned = ctypes.c_int()
    rv = _imaqDetectCircles(image, circleDescriptor, curveOptions, shapeDetectionOptions, roi, ctypes.byref(numMatchesReturned))
    return DisposedArray(rv, numMatchesReturned.value)
_imaqDetectEllipses = STDPTRFUNC("imaqDetectEllipses", ctypes.POINTER(EllipseMatch), ("image", Image), ("ellipseDescriptor", ctypes.POINTER(EllipseDescriptor)), ("curveOptions", ctypes.POINTER(CurveOptions)), ("shapeDetectionOptions", ctypes.POINTER(ShapeDetectionOptions)), ("roi", ROI), ("numMatchesReturned", ctypes.POINTER(ctypes.c_int)))
def imaqDetectEllipses(image, ellipseDescriptor, curveOptions, shapeDetectionOptions, roi):
    numMatchesReturned = ctypes.c_int()
    rv = _imaqDetectEllipses(image, ellipseDescriptor, curveOptions, shapeDetectionOptions, roi, ctypes.byref(numMatchesReturned))
    return DisposedArray(rv, numMatchesReturned.value)
_imaqDetectLines = STDPTRFUNC("imaqDetectLines", ctypes.POINTER(LineMatch), ("image", Image), ("lineDescriptor", ctypes.POINTER(LineDescriptor)), ("curveOptions", ctypes.POINTER(CurveOptions)), ("shapeDetectionOptions", ctypes.POINTER(ShapeDetectionOptions)), ("roi", ROI), ("numMatchesReturned", ctypes.POINTER(ctypes.c_int)))
def imaqDetectLines(image, lineDescriptor, curveOptions, shapeDetectionOptions, roi):
    numMatchesReturned = ctypes.c_int()
    rv = _imaqDetectLines(image, lineDescriptor, curveOptions, shapeDetectionOptions, roi, ctypes.byref(numMatchesReturned))
    return DisposedArray(rv, numMatchesReturned.value)
_imaqDetectRectangles = STDPTRFUNC("imaqDetectRectangles", ctypes.POINTER(RectangleMatch), ("image", Image), ("rectangleDescriptor", ctypes.POINTER(RectangleDescriptor)), ("curveOptions", ctypes.POINTER(CurveOptions)), ("shapeDetectionOptions", ctypes.POINTER(ShapeDetectionOptions)), ("roi", ROI), ("numMatchesReturned", ctypes.POINTER(ctypes.c_int)))
def imaqDetectRectangles(image, rectangleDescriptor, curveOptions, shapeDetectionOptions, roi):
    numMatchesReturned = ctypes.c_int()
    rv = _imaqDetectRectangles(image, rectangleDescriptor, curveOptions, shapeDetectionOptions, roi, ctypes.byref(numMatchesReturned))
    return DisposedArray(rv, numMatchesReturned.value)
_imaqGetGeometricFeaturesFromCurves = STDPTRFUNC("imaqGetGeometricFeaturesFromCurves", ctypes.POINTER(FeatureData), ("curves", ctypes.POINTER(Curve)), ("numCurves", ctypes.c_uint), ("featureTypes", ctypes.POINTER(FeatureType)), ("numFeatureTypes", ctypes.c_uint), ("numFeatures", ctypes.POINTER(ctypes.c_uint)))
def imaqGetGeometricFeaturesFromCurves(curves, featureTypes):
    curves, numCurves = iterableToArray(curves, Curve)
    featureTypes, numFeatureTypes = iterableToArray(featureTypes, FeatureType)
    numFeatures = ctypes.c_uint()
    rv = _imaqGetGeometricFeaturesFromCurves(curves, numCurves, featureTypes, numFeatureTypes, ctypes.byref(numFeatures))
    return DisposedArray(rv, numFeatures.value)
_imaqGetGeometricTemplateFeatureInfo = STDPTRFUNC("imaqGetGeometricTemplateFeatureInfo", ctypes.POINTER(FeatureData), ("pattern", Image), ("numFeatures", ctypes.POINTER(ctypes.c_uint)))
def imaqGetGeometricTemplateFeatureInfo(pattern):
    numFeatures = ctypes.c_uint()
    rv = _imaqGetGeometricTemplateFeatureInfo(pattern, ctypes.byref(numFeatures))
    return DisposedArray(rv, numFeatures.value)
imaqLearnColorPattern = STDFUNC("imaqLearnColorPattern", ("image", Image), ("options", ctypes.POINTER(LearnColorPatternOptions)))
imaqLearnGeometricPattern = STDFUNC("imaqLearnGeometricPattern", ("image", Image), ("originOffset", PointFloat), ("curveOptions", ctypes.POINTER(CurveOptions)), ("advancedLearnOptions", ctypes.POINTER(LearnGeometricPatternAdvancedOptions)), ("mask", Image))
_imaqLearnMultipleGeometricPatterns = STDPTRFUNC("imaqLearnMultipleGeometricPatterns", MultipleGeometricPattern, ("patterns", ctypes.POINTER(Image)), ("numberOfPatterns", ctypes.c_uint), ("labels", ctypes.POINTER(String255)))
def imaqLearnMultipleGeometricPatterns(patterns, labels):
    patterns, numberOfPatterns = iterableToArray(patterns, Image)
    rv = _imaqLearnMultipleGeometricPatterns(patterns, numberOfPatterns, labels)
    return rv
imaqLearnPattern3 = STDFUNC("imaqLearnPattern3", ("image", Image), ("learningMode", LearningMode), ("advancedOptions", ctypes.POINTER(LearnPatternAdvancedOptions)), ("mask", Image))
_imaqMatchColorPattern = STDPTRFUNC("imaqMatchColorPattern", ctypes.POINTER(PatternMatch), ("image", Image), ("pattern", Image), ("options", ctypes.POINTER(MatchColorPatternOptions)), ("searchRect", Rect), ("numMatches", ctypes.POINTER(ctypes.c_int)))
def imaqMatchColorPattern(image, pattern, options, searchRect):
    numMatches = ctypes.c_int()
    rv = _imaqMatchColorPattern(image, pattern, options, searchRect, ctypes.byref(numMatches))
    return DisposedArray(rv, numMatches.value)
_imaqMatchGeometricPattern2 = STDPTRFUNC("imaqMatchGeometricPattern2", ctypes.POINTER(GeometricPatternMatch2), ("image", Image), ("pattern", Image), ("curveOptions", ctypes.POINTER(CurveOptions)), ("matchOptions", ctypes.POINTER(MatchGeometricPatternOptions)), ("advancedMatchOptions", ctypes.POINTER(MatchGeometricPatternAdvancedOptions2)), ("roi", ROI), ("numMatches", ctypes.POINTER(ctypes.c_int)))
def imaqMatchGeometricPattern2(image, pattern, curveOptions, matchOptions, advancedMatchOptions, roi):
    numMatches = ctypes.c_int()
    rv = _imaqMatchGeometricPattern2(image, pattern, curveOptions, matchOptions, advancedMatchOptions, roi, ctypes.byref(numMatches))
    return DisposedArray(rv, numMatches.value)
_imaqMatchMultipleGeometricPatterns = STDPTRFUNC("imaqMatchMultipleGeometricPatterns", ctypes.POINTER(GeometricPatternMatch2), ("image", Image), ("multiplePattern", MultipleGeometricPattern), ("roi", ROI), ("numMatches", ctypes.POINTER(ctypes.c_int)))
def imaqMatchMultipleGeometricPatterns(image, multiplePattern, roi):
    numMatches = ctypes.c_int()
    rv = _imaqMatchMultipleGeometricPatterns(image, multiplePattern, roi, ctypes.byref(numMatches))
    return DisposedArray(rv, numMatches.value)
_imaqReadMultipleGeometricPatternFile = STDPTRFUNC("imaqReadMultipleGeometricPatternFile", MultipleGeometricPattern, ("fileName", ctypes.c_char_p), ("description", String255))
_imaqRefineMatches = STDPTRFUNC("imaqRefineMatches", ctypes.POINTER(PatternMatch), ("image", Image), ("pattern", Image), ("candidatesIn", ctypes.POINTER(PatternMatch)), ("numCandidatesIn", ctypes.c_int), ("options", ctypes.POINTER(MatchPatternOptions)), ("advancedOptions", ctypes.POINTER(MatchPatternAdvancedOptions)), ("numCandidatesOut", ctypes.POINTER(ctypes.c_int)))
def imaqRefineMatches(image, pattern, candidatesIn, options, advancedOptions):
    candidatesIn, numCandidatesIn = iterableToArray(candidatesIn, PatternMatch)
    numCandidatesOut = ctypes.c_int()
    rv = _imaqRefineMatches(image, pattern, candidatesIn, numCandidatesIn, options, advancedOptions, ctypes.byref(numCandidatesOut))
    return DisposedArray(rv, numCandidatesOut.value)
imaqSetMultipleGeometricPatternsOptions = STDFUNC("imaqSetMultipleGeometricPatternsOptions", ("multiplePattern", MultipleGeometricPattern), ("label", ctypes.c_char_p), ("curveOptions", ctypes.POINTER(CurveOptions)), ("matchOptions", ctypes.POINTER(MatchGeometricPatternOptions)), ("advancedMatchOptions", ctypes.POINTER(MatchGeometricPatternAdvancedOptions2)))
imaqWriteMultipleGeometricPatternFile = STDFUNC("imaqWriteMultipleGeometricPatternFile", ("multiplePattern", MultipleGeometricPattern), ("fileName", ctypes.c_char_p), ("description", ctypes.c_char_p))
_imaqMatchGeometricPattern3 = STDPTRFUNC("imaqMatchGeometricPattern3", ctypes.POINTER(GeometricPatternMatch3), ("image", Image), ("pattern", Image), ("curveOptions", ctypes.POINTER(CurveOptions)), ("matchOptions", ctypes.POINTER(MatchGeometricPatternOptions)), ("advancedMatchOptions", ctypes.POINTER(MatchGeometricPatternAdvancedOptions3)), ("roi", ROI), ("numMatches", ctypes.POINTER(ctypes.c_size_t)))
def imaqMatchGeometricPattern3(image, pattern, curveOptions, matchOptions, advancedMatchOptions, roi):
    numMatches = ctypes.c_size_t()
    rv = _imaqMatchGeometricPattern3(image, pattern, curveOptions, matchOptions, advancedMatchOptions, roi, ctypes.byref(numMatches))
    return DisposedArray(rv, numMatches.value)
imaqLearnGeometricPattern2 = STDFUNC("imaqLearnGeometricPattern2", ("image", Image), ("originOffset", PointFloat), ("angleOffset", ctypes.c_double), ("curveOptions", ctypes.POINTER(CurveOptions)), ("advancedLearnOptions", ctypes.POINTER(LearnGeometricPatternAdvancedOptions2)), ("mask", Image))
_imaqMatchPattern3 = STDPTRFUNC("imaqMatchPattern3", ctypes.POINTER(PatternMatch), ("image", Image), ("pattern", Image), ("options", ctypes.POINTER(MatchPatternOptions)), ("advancedOptions", ctypes.POINTER(MatchPatternAdvancedOptions)), ("roi", ROI), ("numMatches", ctypes.POINTER(ctypes.c_int)))
def imaqMatchPattern3(image, pattern, options, advancedOptions, roi):
    numMatches = ctypes.c_int()
    rv = _imaqMatchPattern3(image, pattern, options, advancedOptions, roi, ctypes.byref(numMatches))
    return DisposedArray(rv, numMatches.value)
##############################################################################
# Overlay functions
##############################################################################
imaqClearOverlay = STDFUNC("imaqClearOverlay", ("image", Image), ("group", ctypes.c_char_p))
imaqCopyOverlay = STDFUNC("imaqCopyOverlay", ("dest", Image), ("source", Image), ("group", ctypes.c_char_p))
imaqGetOverlayProperties = STDFUNC("imaqGetOverlayProperties", ("image", Image), ("group", ctypes.c_char_p), ("transformBehaviors", ctypes.POINTER(TransformBehaviors)), out=["transformBehaviors"])
_imaqMergeOverlay = STDFUNC("imaqMergeOverlay", ("dest", Image), ("source", Image), ("palette", ctypes.POINTER(RGBValue)), ("numColors", ctypes.c_uint), ("group", ctypes.c_char_p))
def imaqMergeOverlay(dest, source, palette, group):
    palette, numColors = iterableToArray(palette, RGBValue)
    _imaqMergeOverlay(dest, source, palette, numColors, group)
imaqOverlayArc = STDFUNC("imaqOverlayArc", ("image", Image), ("arc", ctypes.POINTER(ArcInfo)), ("color", ctypes.POINTER(RGBValue)), ("drawMode", DrawMode), ("group", ctypes.c_char_p))
_imaqOverlayBitmap = STDFUNC("imaqOverlayBitmap", ("image", Image), ("destLoc", Point), ("bitmap", ctypes.POINTER(RGBValue)), ("numCols", ctypes.c_uint), ("numRows", ctypes.c_uint), ("group", ctypes.c_char_p))
_imaqOverlayClosedContour = STDFUNC("imaqOverlayClosedContour", ("image", Image), ("points", ctypes.POINTER(Point)), ("numPoints", ctypes.c_int), ("color", ctypes.POINTER(RGBValue)), ("drawMode", DrawMode), ("group", ctypes.c_char_p))
def imaqOverlayClosedContour(image, points, color, drawMode, group):
    points, numPoints = iterableToArray(points, Point)
    _imaqOverlayClosedContour(image, points, numPoints, color, drawMode, group)
imaqOverlayLine = STDFUNC("imaqOverlayLine", ("image", Image), ("start", Point), ("end", Point), ("color", ctypes.POINTER(RGBValue)), ("group", ctypes.c_char_p))
imaqOverlayMetafile = STDFUNC("imaqOverlayMetafile", ("image", Image), ("metafile", ctypes.c_void_p), ("rect", Rect), ("group", ctypes.c_char_p))
_imaqOverlayOpenContour = STDFUNC("imaqOverlayOpenContour", ("image", Image), ("points", ctypes.POINTER(Point)), ("numPoints", ctypes.c_int), ("color", ctypes.POINTER(RGBValue)), ("group", ctypes.c_char_p))
def imaqOverlayOpenContour(image, points, color, group):
    points, numPoints = iterableToArray(points, Point)
    _imaqOverlayOpenContour(image, points, numPoints, color, group)
imaqOverlayOval = STDFUNC("imaqOverlayOval", ("image", Image), ("boundingBox", Rect), ("color", ctypes.POINTER(RGBValue)), ("drawMode", DrawMode), ("group", ctypes.c_char_p), out=["group"])
_imaqOverlayPoints = STDFUNC("imaqOverlayPoints", ("image", Image), ("points", ctypes.POINTER(Point)), ("numPoints", ctypes.c_int), ("colors", ctypes.POINTER(RGBValue)), ("numColors", ctypes.c_int), ("symbol", PointSymbol), ("userSymbol", ctypes.POINTER(UserPointSymbol)), ("group", ctypes.c_char_p))
def imaqOverlayPoints(image, points, colors, symbol, userSymbol, group):
    points, numPoints = iterableToArray(points, Point)
    colors, numColors = iterableToArray(colors, RGBValue)
    _imaqOverlayPoints(image, points, numPoints, colors, numColors, symbol, userSymbol, group)
imaqOverlayRect = STDFUNC("imaqOverlayRect", ("image", Image), ("rect", Rect), ("color", ctypes.POINTER(RGBValue)), ("drawMode", DrawMode), ("group", ctypes.c_char_p))
imaqOverlayROI = STDFUNC("imaqOverlayROI", ("image", Image), ("roi", ROI), ("symbol", PointSymbol), ("userSymbol", ctypes.POINTER(UserPointSymbol)), ("group", ctypes.c_char_p))
imaqOverlayText = STDFUNC("imaqOverlayText", ("image", Image), ("origin", Point), ("text", ctypes.c_char_p), ("color", ctypes.POINTER(RGBValue)), ("options", ctypes.POINTER(OverlayTextOptions)), ("group", ctypes.c_char_p))
imaqSetOverlayProperties = STDFUNC("imaqSetOverlayProperties", ("image", Image), ("group", ctypes.c_char_p), ("transformBehaviors", ctypes.POINTER(TransformBehaviors)))
##############################################################################
# OCR functions
##############################################################################
imaqCreateCharSet = STDPTRFUNC("imaqCreateCharSet", CharSet)
imaqDeleteChar = STDFUNC("imaqDeleteChar", ("set", CharSet), ("index", ctypes.c_int))
imaqGetCharCount = STDFUNC("imaqGetCharCount", ("set", CharSet))
_imaqGetCharInfo2 = STDPTRFUNC("imaqGetCharInfo2", ctypes.POINTER(CharInfo2), ("set", CharSet), ("index", ctypes.c_int))
def imaqGetCharInfo2(set, index):
    rv = _imaqGetCharInfo2(set, index)
    return DisposedPointer(rv)
imaqReadOCRFile = STDFUNC("imaqReadOCRFile", ("fileName", ctypes.c_char_p), ("set", CharSet), ("setDescription", String255), ("readOptions", ctypes.POINTER(ReadTextOptions)), ("processingOptions", ctypes.POINTER(OCRProcessingOptions)), ("spacingOptions", ctypes.POINTER(OCRSpacingOptions)))
_imaqReadText3 = STDPTRFUNC("imaqReadText3", ctypes.POINTER(ReadTextReport3), ("image", Image), ("set", CharSet), ("roi", ROI), ("readOptions", ctypes.POINTER(ReadTextOptions)), ("processingOptions", ctypes.POINTER(OCRProcessingOptions)), ("spacingOptions", ctypes.POINTER(OCRSpacingOptions)))
def imaqReadText3(image, set, roi, readOptions, processingOptions, spacingOptions):
    rv = _imaqReadText3(image, set, roi, readOptions, processingOptions, spacingOptions)
    return DisposedPointer(rv)
imaqRenameChar = STDFUNC("imaqRenameChar", ("set", CharSet), ("index", ctypes.c_int), ("newCharValue", ctypes.c_char_p))
imaqSetReferenceChar = STDFUNC("imaqSetReferenceChar", ("set", CharSet), ("index", ctypes.c_int), ("isReferenceChar", ctypes.c_int))
imaqTrainChars = STDFUNC("imaqTrainChars", ("image", Image), ("set", CharSet), ("index", ctypes.c_int), ("charValue", ctypes.c_char_p), ("roi", ROI), ("processingOptions", ctypes.POINTER(OCRProcessingOptions)), ("spacingOptions", ctypes.POINTER(OCRSpacingOptions)))
_imaqVerifyPatterns = STDPTRFUNC("imaqVerifyPatterns", ctypes.POINTER(ctypes.c_int), ("image", Image), ("set", CharSet), ("expectedPatterns", ctypes.POINTER(String255)), ("patternCount", ctypes.c_int), ("roi", ROI), ("numScores", ctypes.POINTER(ctypes.c_int)))
def imaqVerifyPatterns(image, set, expectedPatterns, roi):
    expectedPatterns, patternCount = iterableToArray(expectedPatterns, String255)
    numScores = ctypes.c_int()
    rv = _imaqVerifyPatterns(image, set, expectedPatterns, patternCount, roi, ctypes.byref(numScores))
    return DisposedArray(rv, numScores.value)
_imaqVerifyText = STDPTRFUNC("imaqVerifyText", ctypes.POINTER(ctypes.c_int), ("image", Image), ("set", CharSet), ("expectedString", ctypes.c_char_p), ("roi", ROI), ("numScores", ctypes.POINTER(ctypes.c_int)))
def imaqVerifyText(image, set, expectedString, roi):
    numScores = ctypes.c_int()
    rv = _imaqVerifyText(image, set, expectedString, roi, ctypes.byref(numScores))
    return DisposedArray(rv, numScores.value)
imaqWriteOCRFile = STDFUNC("imaqWriteOCRFile", ("fileName", ctypes.c_char_p), ("set", CharSet), ("setDescription", ctypes.c_char_p), ("readOptions", ctypes.POINTER(ReadTextOptions)), ("processingOptions", ctypes.POINTER(OCRProcessingOptions)), ("spacingOptions", ctypes.POINTER(OCRSpacingOptions)))
##############################################################################
# Geometric Matching functions
##############################################################################
_imaqExtractContour = STDPTRFUNC("imaqExtractContour", ctypes.POINTER(ExtractContourReport), ("image", Image), ("roi", ROI), ("direction", ExtractContourDirection), ("curveParams", ctypes.POINTER(CurveParameters)), ("connectionConstraintParams", ctypes.POINTER(ConnectionConstraint)), ("numOfConstraints", ctypes.c_uint), ("selection", ExtractContourSelection), ("contourImage", Image))
def imaqExtractContour(image, roi, direction, curveParams, connectionConstraintParams, numOfConstraints, selection, contourImage):
    rv = _imaqExtractContour(image, roi, direction, curveParams, connectionConstraintParams, numOfConstraints, selection, contourImage)
    return DisposedPointer(rv)
imaqContourOverlay = STDFUNC("imaqContourOverlay", ("image", Image), ("contourImage", Image), ("pointsSettings", ctypes.POINTER(ContourOverlaySettings)), ("eqnSettings", ctypes.POINTER(ContourOverlaySettings)), ("groupName", ctypes.c_char_p))
_imaqContourComputeCurvature = STDPTRFUNC("imaqContourComputeCurvature", ctypes.POINTER(ContourComputeCurvatureReport), ("contourImage", Image), ("kernel", ctypes.c_uint))
def imaqContourComputeCurvature(contourImage, kernel):
    rv = _imaqContourComputeCurvature(contourImage, kernel)
    return DisposedPointer(rv)
_imaqContourClassifyCurvature = STDPTRFUNC("imaqContourClassifyCurvature", ctypes.POINTER(CurvatureAnalysisReport), ("contourImage", Image), ("kernel", ctypes.c_uint), ("curvatureClasses", ctypes.POINTER(RangeLabel)), ("numCurvatureClasses", ctypes.c_uint))
def imaqContourClassifyCurvature(contourImage, kernel, curvatureClasses):
    curvatureClasses, numCurvatureClasses = iterableToArray(curvatureClasses, RangeLabel)
    rv = _imaqContourClassifyCurvature(contourImage, kernel, curvatureClasses, numCurvatureClasses)
    return DisposedPointer(rv)
_imaqContourComputeDistances = STDPTRFUNC("imaqContourComputeDistances", ctypes.POINTER(ComputeDistancesReport), ("targetImage", Image), ("templateImage", Image), ("matchSetupData", ctypes.POINTER(SetupMatchPatternData)), ("smoothingKernel", ctypes.c_uint))
def imaqContourComputeDistances(targetImage, templateImage, matchSetupData, smoothingKernel):
    rv = _imaqContourComputeDistances(targetImage, templateImage, matchSetupData, smoothingKernel)
    return DisposedPointer(rv)
_imaqContourClassifyDistances = STDPTRFUNC("imaqContourClassifyDistances", ctypes.POINTER(ClassifyDistancesReport), ("targetImage", Image), ("templateImage", Image), ("matchSetupData", ctypes.POINTER(SetupMatchPatternData)), ("smoothingKernel", ctypes.c_uint), ("distanceRanges", ctypes.POINTER(RangeLabel)), ("numDistanceRanges", ctypes.c_uint))
def imaqContourClassifyDistances(targetImage, templateImage, matchSetupData, smoothingKernel, distanceRanges):
    distanceRanges, numDistanceRanges = iterableToArray(distanceRanges, RangeLabel)
    rv = _imaqContourClassifyDistances(targetImage, templateImage, matchSetupData, smoothingKernel, distanceRanges, numDistanceRanges)
    return DisposedPointer(rv)
_imaqContourInfo = STDPTRFUNC("imaqContourInfo", ctypes.POINTER(ContourInfoReport), ("contourImage", Image))
def imaqContourInfo(contourImage):
    rv = _imaqContourInfo(contourImage)
    return DisposedPointer(rv)
_imaqContourSetupMatchPattern = STDPTRFUNC("imaqContourSetupMatchPattern", ctypes.POINTER(SetupMatchPatternData), ("matchMode", ctypes.POINTER(MatchMode)), ("enableSubPixelAccuracy", ctypes.c_uint), ("curveParams", ctypes.POINTER(CurveParameters)), ("useLearnCurveParameters", ctypes.c_uint), ("rangeSettings", ctypes.POINTER(RangeSettingDouble)), ("numRangeSettings", ctypes.c_uint))
def imaqContourSetupMatchPattern(matchMode, enableSubPixelAccuracy, curveParams, useLearnCurveParameters, rangeSettings):
    rangeSettings, numRangeSettings = iterableToArray(rangeSettings, RangeSettingDouble)
    rv = _imaqContourSetupMatchPattern(matchMode, enableSubPixelAccuracy, curveParams, useLearnCurveParameters, rangeSettings, numRangeSettings)
    return DisposedPointer(rv)
_imaqContourAdvancedSetupMatchPattern = STDFUNC("imaqContourAdvancedSetupMatchPattern", ("matchSetupData", ctypes.POINTER(SetupMatchPatternData)), ("geometricOptions", ctypes.POINTER(GeometricAdvancedSetupDataOption)), ("numGeometricOptions", ctypes.c_uint))
def imaqContourAdvancedSetupMatchPattern(matchSetupData, geometricOptions):
    geometricOptions, numGeometricOptions = iterableToArray(geometricOptions, GeometricAdvancedSetupDataOption)
    _imaqContourAdvancedSetupMatchPattern(matchSetupData, geometricOptions, numGeometricOptions)
_imaqContourFitLine = STDPTRFUNC("imaqContourFitLine", ctypes.POINTER(ContourFitLineReport), ("image", Image), ("pixelRadius", ctypes.c_double))
def imaqContourFitLine(image, pixelRadius):
    rv = _imaqContourFitLine(image, pixelRadius)
    return DisposedPointer(rv)
_imaqContourFitCircle = STDPTRFUNC("imaqContourFitCircle", ctypes.POINTER(PartialCircle), ("image", Image), ("pixelRadius", ctypes.c_double), ("rejectOutliers", ctypes.c_int))
def imaqContourFitCircle(image, pixelRadius, rejectOutliers):
    rv = _imaqContourFitCircle(image, pixelRadius, rejectOutliers)
    return DisposedPointer(rv)
_imaqContourFitEllipse = STDPTRFUNC("imaqContourFitEllipse", ctypes.POINTER(PartialEllipse), ("image", Image), ("pixelRadius", ctypes.c_double), ("rejectOutliers", ctypes.c_int))
def imaqContourFitEllipse(image, pixelRadius, rejectOutliers):
    rv = _imaqContourFitEllipse(image, pixelRadius, rejectOutliers)
    return DisposedPointer(rv)
_imaqContourFitSpline = STDPTRFUNC("imaqContourFitSpline", ctypes.POINTER(ContourFitSplineReport), ("image", Image), ("degree", ctypes.c_int), ("numberOfControlPoints", ctypes.c_int))
def imaqContourFitSpline(image, degree, numberOfControlPoints):
    rv = _imaqContourFitSpline(image, degree, numberOfControlPoints)
    return DisposedPointer(rv)
_imaqContourFitPolynomial = STDPTRFUNC("imaqContourFitPolynomial", ctypes.POINTER(ContourFitPolynomialReport), ("image", Image), ("order", ctypes.c_int))
def imaqContourFitPolynomial(image, order):
    rv = _imaqContourFitPolynomial(image, order)
    return DisposedPointer(rv)
##############################################################################
# Edge Detection functions
##############################################################################
_imaqFindCircularEdge2 = STDPTRFUNC("imaqFindCircularEdge2", ctypes.POINTER(FindCircularEdgeReport), ("image", Image), ("roi", ROI), ("baseSystem", ctypes.POINTER(CoordinateSystem)), ("newSystem", ctypes.POINTER(CoordinateSystem)), ("edgeOptions", ctypes.POINTER(FindCircularEdgeOptions)), ("circleFitOptions", ctypes.POINTER(CircleFitOptions)))
def imaqFindCircularEdge2(image, roi, baseSystem, newSystem, edgeOptions, circleFitOptions):
    rv = _imaqFindCircularEdge2(image, roi, baseSystem, newSystem, edgeOptions, circleFitOptions)
    return DisposedPointer(rv)
_imaqFindConcentricEdge2 = STDPTRFUNC("imaqFindConcentricEdge2", ctypes.POINTER(FindConcentricEdgeReport), ("image", Image), ("roi", ROI), ("baseSystem", ctypes.POINTER(CoordinateSystem)), ("newSystem", ctypes.POINTER(CoordinateSystem)), ("edgeOptions", ctypes.POINTER(FindConcentricEdgeOptions)), ("concentricEdgeFitOptions", ctypes.POINTER(ConcentricEdgeFitOptions)))
def imaqFindConcentricEdge2(image, roi, baseSystem, newSystem, edgeOptions, concentricEdgeFitOptions):
    rv = _imaqFindConcentricEdge2(image, roi, baseSystem, newSystem, edgeOptions, concentricEdgeFitOptions)
    return DisposedPointer(rv)
##############################################################################
# Morphology Reconstruction functions
##############################################################################
_imaqGrayMorphologyReconstruct = STDFUNC("imaqGrayMorphologyReconstruct", ("dstImage", Image), ("srcImage", Image), ("markerImage", Image), ("points", ctypes.POINTER(PointFloat)), ("numOfPoints", ctypes.c_int), ("operation", MorphologyReconstructOperation), ("structuringElement", ctypes.POINTER(StructuringElement)), ("roi", ROI))
def imaqGrayMorphologyReconstruct(dstImage, srcImage, markerImage, points, operation, structuringElement, roi):
    points, numOfPoints = iterableToArray(points, PointFloat)
    _imaqGrayMorphologyReconstruct(dstImage, srcImage, markerImage, points, numOfPoints, operation, structuringElement, roi)
_imaqMorphologyReconstruct = STDFUNC("imaqMorphologyReconstruct", ("dstImage", Image), ("srcImage", Image), ("markerImage", Image), ("points", ctypes.POINTER(PointFloat)), ("numOfPoints", ctypes.c_int), ("operation", MorphologyReconstructOperation), ("connectivity", Connectivity), ("roi", ROI))
def imaqMorphologyReconstruct(dstImage, srcImage, markerImage, points, operation, connectivity, roi):
    points, numOfPoints = iterableToArray(points, PointFloat)
    _imaqMorphologyReconstruct(dstImage, srcImage, markerImage, points, numOfPoints, operation, connectivity, roi)
##############################################################################
# Texture functions
##############################################################################
imaqDetectTextureDefect = STDFUNC("imaqDetectTextureDefect", ("session", ClassifierSession), ("destImage", Image), ("srcImage", Image), ("roi", ROI), ("initialStepSize", ctypes.c_int), ("finalStepSize", ctypes.c_int), ("defectPixelValue", ctypes.c_ubyte), ("minClassificationScore", ctypes.c_double))
imaqClassificationTextureDefectOptions = STDFUNC("imaqClassificationTextureDefectOptions", ("session", ClassifierSession), ("windowOptions", ctypes.POINTER(WindowSize)), ("waveletOptions", ctypes.POINTER(WaveletOptions)), ("bandsUsed", ctypes.POINTER(ctypes.c_void_p)), ("numBandsUsed", ctypes.POINTER(ctypes.c_int)), ("cooccurrenceOptions", ctypes.POINTER(CooccurrenceOptions)), ("setOperation", ctypes.c_ubyte), out=["bandsUsed", "numBandsUsed"])
imaqCooccurrenceMatrix = STDFUNC("imaqCooccurrenceMatrix", ("srcImage", Image), ("roi", ROI), ("levelPixel", ctypes.c_int), ("displacementVec", ctypes.POINTER(DisplacementVector)), ("featureOptionArray", ctypes.c_void_p), ("featureOptionArraySize", ctypes.c_uint), ("cooccurrenceMatrixArray", ctypes.POINTER(ctypes.c_void_p)), ("coocurrenceMatrixRows", ctypes.POINTER(ctypes.c_int)), ("coocurrenceMatrixCols", ctypes.POINTER(ctypes.c_int)), ("featureVectorArray", ctypes.POINTER(ctypes.c_void_p)), ("featureVectorArraySize", ctypes.POINTER(ctypes.c_int)), out=["featureOptionArray", "cooccurrenceMatrixArray", "coocurrenceMatrixRows", "coocurrenceMatrixCols", "featureVectorArray", "featureVectorArraySize"])
_imaqExtractTextureFeatures = STDPTRFUNC("imaqExtractTextureFeatures", ctypes.POINTER(ExtractTextureFeaturesReport), ("srcImage", Image), ("roi", ROI), ("windowOptions", ctypes.POINTER(WindowSize)), ("waveletOptions", ctypes.POINTER(WaveletOptions)), ("waveletBands", ctypes.c_void_p), ("numWaveletBands", ctypes.c_uint), ("cooccurrenceOptions", ctypes.POINTER(CooccurrenceOptions)), ("useWindow", ctypes.c_ubyte))
def imaqExtractTextureFeatures(srcImage, roi, windowOptions, waveletOptions, waveletBands, numWaveletBands, cooccurrenceOptions, useWindow):
    rv = _imaqExtractTextureFeatures(srcImage, roi, windowOptions, waveletOptions, waveletBands, numWaveletBands, cooccurrenceOptions, useWindow)
    return DisposedPointer(rv)
_imaqExtractWaveletBands = STDPTRFUNC("imaqExtractWaveletBands", ctypes.POINTER(WaveletBandsReport), ("srcImage", Image), ("waveletOptions", ctypes.POINTER(WaveletOptions)), ("waveletBands", ctypes.c_void_p), ("numWaveletBands", ctypes.c_uint))
def imaqExtractWaveletBands(srcImage, waveletOptions, waveletBands, numWaveletBands):
    rv = _imaqExtractWaveletBands(srcImage, waveletOptions, waveletBands, numWaveletBands)
    return DisposedPointer(rv)
##############################################################################
# Regions of Interest Manipulation functions
##############################################################################
_imaqMaskToROI = STDPTRFUNC("imaqMaskToROI", ROI, ("mask", Image), ("withinLimit", ctypes.POINTER(ctypes.c_int)))
def imaqMaskToROI(mask):
    withinLimit = ctypes.c_int()
    rv = _imaqMaskToROI(mask, ctypes.byref(withinLimit))
    return rv, withinLimit.value
_imaqROIProfile = STDPTRFUNC("imaqROIProfile", ctypes.POINTER(ROIProfile), ("image", Image), ("roi", ROI))
def imaqROIProfile(image, roi):
    rv = _imaqROIProfile(image, roi)
    return DisposedPointer(rv)
imaqROIToMask = STDFUNC("imaqROIToMask", ("mask", Image), ("roi", ROI), ("fillValue", ctypes.c_int), ("imageModel", Image), ("inSpace", ctypes.POINTER(ctypes.c_int)), out=["inSpace"])
imaqTransformROI2 = STDFUNC("imaqTransformROI2", ("roi", ROI), ("baseSystem", ctypes.POINTER(CoordinateSystem)), ("newSystem", ctypes.POINTER(CoordinateSystem)))
_imaqLabelToROI = STDPTRFUNC("imaqLabelToROI", ctypes.POINTER(LabelToROIReport), ("image", Image), ("labelsIn", ctypes.POINTER(ctypes.c_uint)), ("numLabelsIn", ctypes.c_uint), ("maxNumVectors", ctypes.c_int), ("isExternelEdges", ctypes.c_int))
def imaqLabelToROI(image, labelsIn, maxNumVectors, isExternelEdges):
    labelsIn, numLabelsIn = iterableToArray(labelsIn, ctypes.c_uint)
    rv = _imaqLabelToROI(image, labelsIn, numLabelsIn, maxNumVectors, isExternelEdges)
    return DisposedPointer(rv)
##############################################################################
# Morphology functions
##############################################################################
imaqGrayMorphology = STDFUNC("imaqGrayMorphology", ("dest", Image), ("source", Image), ("method", MorphologyMethod), ("structuringElement", ctypes.POINTER(StructuringElement)))
##############################################################################
# Classification functions
##############################################################################
_imaqAddClassifierSample = STDFUNC("imaqAddClassifierSample", ("image", Image), ("session", ClassifierSession), ("roi", ROI), ("sampleClass", ctypes.c_char_p), ("featureVector", ctypes.POINTER(ctypes.c_double)), ("vectorSize", ctypes.c_uint))
def imaqAddClassifierSample(image, session, roi, sampleClass):
    featureVector, vectorSize = iterableToArray(featureVector, ctypes.c_double)
    _imaqAddClassifierSample(image, session, roi, sampleClass, featureVector, vectorSize)
_imaqAdvanceClassify = STDPTRFUNC("imaqAdvanceClassify", ctypes.POINTER(ClassifierReportAdvanced), ("image", Image), ("session", ClassifierSession), ("roi", ROI), ("featureVector", ctypes.POINTER(ctypes.c_double)), ("vectorSize", ctypes.c_uint))
def imaqAdvanceClassify(image, session, roi):
    featureVector, vectorSize = iterableToArray(featureVector, ctypes.c_double)
    rv = _imaqAdvanceClassify(image, session, roi, featureVector, vectorSize)
    return DisposedPointer(rv)
_imaqClassify = STDPTRFUNC("imaqClassify", ctypes.POINTER(ClassifierReport), ("image", Image), ("session", ClassifierSession), ("roi", ROI), ("featureVector", ctypes.POINTER(ctypes.c_double)), ("vectorSize", ctypes.c_uint))
def imaqClassify(image, session, roi):
    featureVector, vectorSize = iterableToArray(featureVector, ctypes.c_double)
    rv = _imaqClassify(image, session, roi, featureVector, vectorSize)
    return DisposedPointer(rv)
imaqCreateClassifier = STDPTRFUNC("imaqCreateClassifier", ClassifierSession, ("type", ClassifierType))
imaqDeleteClassifierSample = STDFUNC("imaqDeleteClassifierSample", ("session", ClassifierSession), ("index", ctypes.c_int))
_imaqGetClassifierAccuracy = STDPTRFUNC("imaqGetClassifierAccuracy", ctypes.POINTER(ClassifierAccuracyReport), ("session", ClassifierSession))
def imaqGetClassifierAccuracy(session):
    rv = _imaqGetClassifierAccuracy(session)
    return DisposedPointer(rv)
_imaqGetClassifierSampleInfo = STDPTRFUNC("imaqGetClassifierSampleInfo", ctypes.POINTER(ClassifierSampleInfo), ("session", ClassifierSession), ("index", ctypes.c_int), ("numSamples", ctypes.POINTER(ctypes.c_int)))
def imaqGetClassifierSampleInfo(session, index):
    numSamples = ctypes.c_int()
    rv = _imaqGetClassifierSampleInfo(session, index, ctypes.byref(numSamples))
    return DisposedPointer(rv), numSamples.value
imaqGetColorClassifierOptions = STDFUNC("imaqGetColorClassifierOptions", ("session", ClassifierSession), ("options", ctypes.POINTER(ColorOptions)), out=["options"])
imaqGetNearestNeighborOptions = STDFUNC("imaqGetNearestNeighborOptions", ("session", ClassifierSession), ("options", ctypes.POINTER(NearestNeighborOptions)), out=["options"])
imaqGetParticleClassifierOptions2 = STDFUNC("imaqGetParticleClassifierOptions2", ("session", ClassifierSession), ("preprocessingOptions", ctypes.POINTER(ParticleClassifierPreprocessingOptions2)), ("options", ctypes.POINTER(ParticleClassifierOptions)))
_imaqReadClassifierFile = STDPTRFUNC("imaqReadClassifierFile", ClassifierSession, ("session", ClassifierSession), ("fileName", ctypes.c_char_p), ("mode", ReadClassifierFileMode), ("type", ctypes.POINTER(ClassifierType)), ("engine", ctypes.POINTER(ClassifierEngineType)), ("description", String255))
def imaqReadClassifierFile(session, fileName, mode, description):
    type = ClassifierType(0)
    engine = ClassifierEngineType(0)
    rv = _imaqReadClassifierFile(session, fileName, mode, ctypes.byref(type), ctypes.byref(engine), description)
    return rv, type, engine
imaqRelabelClassifierSample = STDFUNC("imaqRelabelClassifierSample", ("session", ClassifierSession), ("index", ctypes.c_int), ("newClass", ctypes.c_char_p))
imaqSetParticleClassifierOptions2 = STDFUNC("imaqSetParticleClassifierOptions2", ("session", ClassifierSession), ("preprocessingOptions", ctypes.POINTER(ParticleClassifierPreprocessingOptions2)), ("options", ctypes.POINTER(ParticleClassifierOptions)))
imaqSetColorClassifierOptions = STDFUNC("imaqSetColorClassifierOptions", ("session", ClassifierSession), ("options", ctypes.POINTER(ColorOptions)))
_imaqTrainNearestNeighborClassifier = STDPTRFUNC("imaqTrainNearestNeighborClassifier", ctypes.POINTER(NearestNeighborTrainingReport), ("session", ClassifierSession), ("options", ctypes.POINTER(NearestNeighborOptions)))
def imaqTrainNearestNeighborClassifier(session, options):
    rv = _imaqTrainNearestNeighborClassifier(session, options)
    return DisposedPointer(rv)
imaqWriteClassifierFile = STDFUNC("imaqWriteClassifierFile", ("session", ClassifierSession), ("fileName", ctypes.c_char_p), ("mode", WriteClassifierFileMode), ("description", String255))
##############################################################################
# Measure Distances functions
##############################################################################
_imaqClampMax2 = STDPTRFUNC("imaqClampMax2", ctypes.POINTER(ClampMax2Report), ("image", Image), ("roi", ROI), ("baseSystem", ctypes.POINTER(CoordinateSystem)), ("newSystem", ctypes.POINTER(CoordinateSystem)), ("curveSettings", ctypes.POINTER(CurveOptions)), ("clampSettings", ctypes.POINTER(ClampSettings)), ("clampOverlaySettings", ctypes.POINTER(ClampOverlaySettings)))
def imaqClampMax2(image, roi, baseSystem, newSystem, curveSettings, clampSettings, clampOverlaySettings):
    rv = _imaqClampMax2(image, roi, baseSystem, newSystem, curveSettings, clampSettings, clampOverlaySettings)
    return DisposedPointer(rv)
##############################################################################
# Inspection functions
##############################################################################
imaqCompareGoldenTemplate = STDFUNC("imaqCompareGoldenTemplate", ("image", Image), ("goldenTemplate", Image), ("brightDefects", Image), ("darkDefects", Image), ("alignment", ctypes.POINTER(InspectionAlignment)), ("options", ctypes.POINTER(InspectionOptions)))
imaqLearnGoldenTemplate = STDFUNC("imaqLearnGoldenTemplate", ("goldenTemplate", Image), ("originOffset", PointFloat), ("mask", Image))
##############################################################################
# Obsolete functions
##############################################################################
imaqRotate = STDFUNC("imaqRotate", ("dest", Image), ("source", Image), ("angle", ctypes.c_float), ("fill", PixelValue), ("method", InterpolationMethod))
imaqWritePNGFile = STDFUNC("imaqWritePNGFile", ("image", Image), ("fileName", ctypes.c_char_p), ("compressionSpeed", ctypes.c_uint), ("colorTable", ctypes.POINTER(RGBValue), None))
_imaqSelectParticles = STDPTRFUNC("imaqSelectParticles", ctypes.POINTER(ParticleReport), ("image", Image), ("reports", ctypes.POINTER(ParticleReport)), ("reportCount", ctypes.c_int), ("rejectBorder", ctypes.c_int), ("criteria", ctypes.POINTER(SelectParticleCriteria)), ("criteriaCount", ctypes.c_int), ("selectedCount", ctypes.POINTER(ctypes.c_int)))
def imaqSelectParticles(image, reports, reportCount, rejectBorder, criteria, criteriaCount):
    selectedCount = ctypes.c_int()
    rv = _imaqSelectParticles(image, reports, reportCount, rejectBorder, criteria, criteriaCount, ctypes.byref(selectedCount))
    return DisposedArray(rv, selectedCount.value)
imaqParticleFilter = STDFUNC("imaqParticleFilter", ("dest", Image), ("source", Image), ("criteria", ctypes.POINTER(ParticleFilterCriteria)), ("criteriaCount", ctypes.c_int), ("rejectMatches", ctypes.c_int), ("connectivity8", ctypes.c_int))
_imaqGetParticleInfo = STDPTRFUNC("imaqGetParticleInfo", ctypes.POINTER(ParticleReport), ("image", Image), ("connectivity8", ctypes.c_int), ("mode", ParticleInfoMode), ("reportCount", ctypes.POINTER(ctypes.c_int)))
def imaqGetParticleInfo(image, connectivity8, mode):
    reportCount = ctypes.c_int()
    rv = _imaqGetParticleInfo(image, connectivity8, mode, ctypes.byref(reportCount))
    return DisposedArray(rv, reportCount.value)
imaqCalcCoeff = STDFUNC("imaqCalcCoeff", ("image", Image), ("report", ctypes.POINTER(ParticleReport)), ("parameter", MeasurementValue), ("coefficient", ctypes.POINTER(ctypes.c_float)), out=["coefficient"])
_imaqEdgeTool = STDPTRFUNC("imaqEdgeTool", ctypes.POINTER(EdgeReport), ("image", Image), ("points", ctypes.POINTER(Point)), ("numPoints", ctypes.c_int), ("options", ctypes.POINTER(EdgeOptions)), ("numEdges", ctypes.POINTER(ctypes.c_int)))
def imaqEdgeTool(image, points, numPoints, options):
    numEdges = ctypes.c_int()
    rv = _imaqEdgeTool(image, points, numPoints, options, ctypes.byref(numEdges))
    return DisposedArray(rv, numEdges.value)
_imaqCircles = STDPTRFUNC("imaqCircles", ctypes.POINTER(CircleReport), ("dest", Image), ("source", Image), ("minRadius", ctypes.c_float), ("maxRadius", ctypes.c_float), ("numCircles", ctypes.POINTER(ctypes.c_int)))
def imaqCircles(dest, source, minRadius, maxRadius):
    numCircles = ctypes.c_int()
    rv = _imaqCircles(dest, source, minRadius, maxRadius, ctypes.byref(numCircles))
    return DisposedArray(rv, numCircles.value)
imaqLabel = STDFUNC("imaqLabel", ("dest", Image), ("source", Image), ("connectivity8", ctypes.c_int), ("particleCount", ctypes.POINTER(ctypes.c_int)), out=["particleCount"])
_imaqFitEllipse = STDFUNC("imaqFitEllipse", ("points", ctypes.POINTER(PointFloat)), ("numPoints", ctypes.c_int), ("ellipse", ctypes.POINTER(BestEllipse)))
def imaqFitEllipse(points):
    points, numPoints = iterableToArray(points, PointFloat)
    ellipse = BestEllipse()
    _imaqFitEllipse(points, numPoints, ctypes.byref(ellipse))
    return ellipse.value
_imaqFitCircle = STDFUNC("imaqFitCircle", ("points", ctypes.POINTER(PointFloat)), ("numPoints", ctypes.c_int), ("circle", ctypes.POINTER(BestCircle)))
def imaqFitCircle(points):
    points, numPoints = iterableToArray(points, PointFloat)
    circle = BestCircle()
    _imaqFitCircle(points, numPoints, ctypes.byref(circle))
    return circle.value
imaqChangeColorSpace = RETFUNC("imaqChangeColorSpace", Color, ("sourceColor", ctypes.POINTER(Color)), ("sourceSpace", ColorMode), ("destSpace", ColorMode))
_imaqMatchPattern = STDPTRFUNC("imaqMatchPattern", ctypes.POINTER(PatternMatch), ("image", Image), ("pattern", Image), ("options", ctypes.POINTER(MatchPatternOptions)), ("searchRect", Rect), ("numMatches", ctypes.POINTER(ctypes.c_int)))
def imaqMatchPattern(image, pattern, options, searchRect):
    numMatches = ctypes.c_int()
    rv = _imaqMatchPattern(image, pattern, options, searchRect, ctypes.byref(numMatches))
    return DisposedArray(rv, numMatches.value)
imaqConvex = STDFUNC("imaqConvex", ("dest", Image), ("source", Image))
imaqIsVisionInfoPresent = STDFUNC("imaqIsVisionInfoPresent", ("image", Image), ("type", VisionInfoType), ("present", ctypes.POINTER(ctypes.c_int)), out=["present"])
imaqLineGaugeTool = STDFUNC("imaqLineGaugeTool", ("image", Image), ("start", Point), ("end", Point), ("method", LineGaugeMethod), ("edgeOptions", ctypes.POINTER(EdgeOptions)), ("reference", ctypes.POINTER(CoordinateTransform)), ("distance", ctypes.POINTER(ctypes.c_float)), out=["distance"])
_imaqBestCircle = STDFUNC("imaqBestCircle", ("points", ctypes.POINTER(PointFloat)), ("numPoints", ctypes.c_int), ("center", ctypes.POINTER(PointFloat)), ("radius", ctypes.POINTER(ctypes.c_double)))
def imaqBestCircle(points):
    points, numPoints = iterableToArray(points, PointFloat)
    center = PointFloat()
    radius = ctypes.c_double()
    _imaqBestCircle(points, numPoints, ctypes.byref(center), ctypes.byref(radius))
    return center.value, radius.value
imaqSavePattern = STDFUNC("imaqSavePattern", ("pattern", Image), ("fileName", ctypes.c_char_p))
imaqLoadPattern = STDFUNC("imaqLoadPattern", ("pattern", Image), ("fileName", ctypes.c_char_p))
imaqTransformROI = STDFUNC("imaqTransformROI", ("roi", ROI), ("originStart", Point), ("angleStart", ctypes.c_float), ("originFinal", Point), ("angleFinal", ctypes.c_float))
imaqCoordinateReference = STDFUNC("imaqCoordinateReference", ("points", ctypes.POINTER(Point)), ("mode", ReferenceMode), ("origin", ctypes.POINTER(Point)), ("angle", ctypes.POINTER(ctypes.c_float)), out=["origin", "angle"])
_imaqGetContourInfo = STDPTRFUNC("imaqGetContourInfo", ctypes.POINTER(ContourInfo), ("roi", ROI), ("id", ContourID))
def imaqGetContourInfo(roi, id):
    rv = _imaqGetContourInfo(roi, id)
    return DisposedPointer(rv)
imaqSetWindowOverlay = STDFUNC("imaqSetWindowOverlay", ("windowNumber", ctypes.c_int), ("overlay", Overlay))
imaqCreateOverlayFromROI = STDPTRFUNC("imaqCreateOverlayFromROI", Overlay, ("roi", ROI))
imaqCreateOverlayFromMetafile = STDPTRFUNC("imaqCreateOverlayFromMetafile", Overlay, ("metafile", ctypes.c_void_p))
imaqSetCalibrationInfo = STDFUNC("imaqSetCalibrationInfo", ("image", Image), ("unit", CalibrationUnit), ("xDistance", ctypes.c_float), ("yDistance", ctypes.c_float))
_imaqGetCalibrationInfo = STDFUNC("imaqGetCalibrationInfo", ("image", Image), ("unit", ctypes.POINTER(CalibrationUnit)), ("xDistance", ctypes.POINTER(ctypes.c_float)), ("yDistance", ctypes.POINTER(ctypes.c_float)))
def imaqGetCalibrationInfo(image):
    unit = CalibrationUnit(0)
    xDistance = ctypes.c_float()
    yDistance = ctypes.c_float()
    _imaqGetCalibrationInfo(image, ctypes.byref(unit), ctypes.byref(xDistance), ctypes.byref(yDistance))
    return unit, xDistance.value, yDistance.value
imaqConstructROI = STDFUNC("imaqConstructROI", ("image", Image), ("roi", ROI), ("initialTool", Tool), ("tools", ctypes.POINTER(ToolWindowOptions)), ("options", ctypes.POINTER(ConstructROIOptions)), ("okay", ctypes.POINTER(ctypes.c_int)), out=["okay"])
imaqGetParticleClassifierOptions = STDFUNC("imaqGetParticleClassifierOptions", ("session", ClassifierSession), ("preprocessingOptions", ctypes.POINTER(ParticleClassifierPreprocessingOptions)), ("options", ctypes.POINTER(ParticleClassifierOptions)), out=["preprocessingOptions", "options"])
imaqZoomWindow = STDFUNC("imaqZoomWindow", ("windowNumber", ctypes.c_int), ("xZoom", ctypes.c_int), ("yZoom", ctypes.c_int), ("center", Point))
imaqGetWindowZoom = STDFUNC("imaqGetWindowZoom", ("windowNumber", ctypes.c_int), ("xZoom", ctypes.POINTER(ctypes.c_int)), ("yZoom", ctypes.POINTER(ctypes.c_int)), out=["xZoom", "yZoom"])
imaqParticleFilter3 = STDFUNC("imaqParticleFilter3", ("dest", Image), ("source", Image), ("criteria", ctypes.POINTER(ParticleFilterCriteria2)), ("criteriaCount", ctypes.c_int), ("options", ctypes.POINTER(ParticleFilterOptions)), ("roi", ROI), ("numParticles", ctypes.POINTER(ctypes.c_int)), out=["numParticles"])
_imaqReadText2 = STDPTRFUNC("imaqReadText2", ctypes.POINTER(ReadTextReport2), ("image", Image), ("set", CharSet), ("roi", ROI), ("readOptions", ctypes.POINTER(ReadTextOptions)), ("processingOptions", ctypes.POINTER(OCRProcessingOptions)), ("spacingOptions", ctypes.POINTER(OCRSpacingOptions)))
def imaqReadText2(image, set, roi, readOptions, processingOptions, spacingOptions):
    rv = _imaqReadText2(image, set, roi, readOptions, processingOptions, spacingOptions)
    return DisposedPointer(rv)
imaqLearnPattern2 = STDFUNC("imaqLearnPattern2", ("image", Image), ("learningMode", LearningMode), ("advancedOptions", ctypes.POINTER(LearnPatternAdvancedOptions)))
imaqConvolve = STDFUNC("imaqConvolve", ("dest", Image), ("source", Image), ("kernel", ctypes.POINTER(ctypes.c_float)), ("matrixRows", ctypes.c_int), ("matrixCols", ctypes.c_int), ("normalize", ctypes.c_float), ("mask", Image))
imaqDivideConstant = STDFUNC("imaqDivideConstant", ("dest", Image), ("source", Image), ("value", PixelValue))
imaqDivide = STDFUNC("imaqDivide", ("dest", Image), ("sourceA", Image), ("sourceB", Image))
_imaqEdgeTool3 = STDPTRFUNC("imaqEdgeTool3", ctypes.POINTER(EdgeReport2), ("image", Image), ("roi", ROI), ("processType", EdgeProcess), ("edgeOptions", ctypes.POINTER(EdgeOptions2)))
def imaqEdgeTool3(image, roi, processType, edgeOptions):
    rv = _imaqEdgeTool3(image, roi, processType, edgeOptions)
    return DisposedPointer(rv)
_imaqConcentricRake = STDPTRFUNC("imaqConcentricRake", ctypes.POINTER(ConcentricRakeReport), ("image", Image), ("roi", ROI), ("direction", ConcentricRakeDirection), ("process", EdgeProcess), ("options", ctypes.POINTER(RakeOptions)))
def imaqConcentricRake(image, roi, direction, process, options):
    rv = _imaqConcentricRake(image, roi, direction, process, options)
    return DisposedPointer(rv)
_imaqSpoke = STDPTRFUNC("imaqSpoke", ctypes.POINTER(SpokeReport), ("image", Image), ("roi", ROI), ("direction", SpokeDirection), ("process", EdgeProcess), ("options", ctypes.POINTER(SpokeOptions)))
def imaqSpoke(image, roi, direction, process, options):
    rv = _imaqSpoke(image, roi, direction, process, options)
    return DisposedPointer(rv)
imaqLearnPattern = STDFUNC("imaqLearnPattern", ("image", Image), ("learningMode", LearningMode))
imaqLookup = STDFUNC("imaqLookup", ("dest", Image), ("source", Image), ("table", ctypes.POINTER(ctypes.c_short)), ("mask", Image))
_imaqMatchPattern2 = STDPTRFUNC("imaqMatchPattern2", ctypes.POINTER(PatternMatch), ("image", Image), ("pattern", Image), ("options", ctypes.POINTER(MatchPatternOptions)), ("advancedOptions", ctypes.POINTER(MatchPatternAdvancedOptions)), ("searchRect", Rect), ("numMatches", ctypes.POINTER(ctypes.c_int)))
def imaqMatchPattern2(image, pattern, options, advancedOptions, searchRect):
    numMatches = ctypes.c_int()
    rv = _imaqMatchPattern2(image, pattern, options, advancedOptions, searchRect, ctypes.byref(numMatches))
    return DisposedArray(rv, numMatches.value)
imaqSetParticleClassifierOptions = STDFUNC("imaqSetParticleClassifierOptions", ("session", ClassifierSession), ("preprocessingOptions", ctypes.POINTER(ParticleClassifierPreprocessingOptions)), ("options", ctypes.POINTER(ParticleClassifierOptions)))
imaqCopyCalibrationInfo = STDFUNC("imaqCopyCalibrationInfo", ("dest", Image), ("source", Image))
_imaqParticleFilter2 = STDFUNC("imaqParticleFilter2", ("dest", Image), ("source", Image), ("criteria", ctypes.POINTER(ParticleFilterCriteria2)), ("criteriaCount", ctypes.c_int), ("rejectMatches", ctypes.c_int), ("connectivity8", ctypes.c_int), ("numParticles", ctypes.POINTER(ctypes.c_int)))
def imaqParticleFilter2(dest, source, criteria, rejectMatches, connectivity8):
    criteria, criteriaCount = iterableToArray(criteria, ParticleFilterCriteria2)
    numParticles = ctypes.c_int()
    _imaqParticleFilter2(dest, source, criteria, criteriaCount, rejectMatches, connectivity8, ctypes.byref(numParticles))
    return numParticles.value
_imaqEdgeTool2 = STDPTRFUNC("imaqEdgeTool2", ctypes.POINTER(EdgeReport), ("image", Image), ("points", ctypes.POINTER(Point)), ("numPoints", ctypes.c_int), ("process", EdgeProcess), ("options", ctypes.POINTER(EdgeOptions)), ("numEdges", ctypes.POINTER(ctypes.c_int)))
def imaqEdgeTool2(image, points, numPoints, process, options):
    numEdges = ctypes.c_int()
    rv = _imaqEdgeTool2(image, points, numPoints, process, options, ctypes.byref(numEdges))
    return DisposedArray(rv, numEdges.value)
imaqAddRotatedRectContour = RETFUNC("imaqAddRotatedRectContour", ContourID, ("roi", ROI), ("rect", RotatedRect))
_imaqReadDataMatrixBarcode = STDPTRFUNC("imaqReadDataMatrixBarcode", ctypes.POINTER(Barcode2DInfo), ("image", Image), ("roi", ROI), ("options", ctypes.POINTER(DataMatrixOptions)), ("numBarcodes", ctypes.POINTER(ctypes.c_uint)))
def imaqReadDataMatrixBarcode(image, roi, options):
    numBarcodes = ctypes.c_uint()
    rv = _imaqReadDataMatrixBarcode(image, roi, options, ctypes.byref(numBarcodes))
    return DisposedArray(rv, numBarcodes.value)
_imaqLinearAverages = STDPTRFUNC("imaqLinearAverages", ctypes.POINTER(LinearAverages), ("image", Image), ("rect", Rect))
def imaqLinearAverages(image, rect):
    rv = _imaqLinearAverages(image, rect)
    return DisposedPointer(rv)
_imaqMatchGeometricPattern = STDPTRFUNC("imaqMatchGeometricPattern", ctypes.POINTER(GeometricPatternMatch), ("image", Image), ("pattern", Image), ("curveOptions", ctypes.POINTER(CurveOptions)), ("matchOptions", ctypes.POINTER(MatchGeometricPatternOptions)), ("advancedMatchOptions", ctypes.POINTER(MatchGeometricPatternAdvancedOptions)), ("roi", ROI), ("numMatches", ctypes.POINTER(ctypes.c_int)))
def imaqMatchGeometricPattern(image, pattern, curveOptions, matchOptions, advancedMatchOptions, roi):
    numMatches = ctypes.c_int()
    rv = _imaqMatchGeometricPattern(image, pattern, curveOptions, matchOptions, advancedMatchOptions, roi, ctypes.byref(numMatches))
    return DisposedArray(rv, numMatches.value)
_imaqGetCharInfo = STDPTRFUNC("imaqGetCharInfo", ctypes.POINTER(CharInfo), ("set", CharSet), ("index", ctypes.c_int))
def imaqGetCharInfo(set, index):
    rv = _imaqGetCharInfo(set, index)
    return DisposedPointer(rv)
_imaqReadText = STDPTRFUNC("imaqReadText", ctypes.POINTER(ReadTextReport), ("image", Image), ("set", CharSet), ("roi", ROI), ("readOptions", ctypes.POINTER(ReadTextOptions)), ("processingOptions", ctypes.POINTER(OCRProcessingOptions)), ("spacingOptions", ctypes.POINTER(OCRSpacingOptions)))
def imaqReadText(image, set, roi, readOptions, processingOptions, spacingOptions):
    rv = _imaqReadText(image, set, roi, readOptions, processingOptions, spacingOptions)
    return DisposedPointer(rv)
_imaqAutoThreshold = STDPTRFUNC("imaqAutoThreshold", ctypes.POINTER(ThresholdData), ("dest", Image), ("source", Image), ("numClasses", ctypes.c_int), ("method", ThresholdMethod))
def imaqAutoThreshold(dest, source, numClasses, method):
    rv = _imaqAutoThreshold(dest, source, numClasses, method)
    return DisposedPointer(rv)
_imaqColorHistogram = STDPTRFUNC("imaqColorHistogram", ctypes.POINTER(ColorHistogramReport), ("image", Image), ("numClasses", ctypes.c_int), ("mode", ColorMode), ("mask", Image))
def imaqColorHistogram(image, numClasses, mode, mask):
    rv = _imaqColorHistogram(image, numClasses, mode, mask)
    return DisposedPointer(rv)
_imaqRake = STDPTRFUNC("imaqRake", ctypes.POINTER(RakeReport), ("image", Image), ("roi", ROI), ("direction", RakeDirection), ("process", EdgeProcess), ("options", ctypes.POINTER(RakeOptions)))
def imaqRake(image, roi, direction, process, options):
    rv = _imaqRake(image, roi, direction, process, options)
    return DisposedPointer(rv)
##############################################################################
# Purpose	  : Include file for NI-IMAQdx library support.
##############################################################################
GUIHNDL = ctypes.c_uint32
bool32 = ctypes.c_uint32
IMAQdxSession = ctypes.c_uint32
IMAQDX_MAX_API_STRING_LENGTH = 512
class IMAQdxError(Enumeration): pass
IMAQdxErrorSuccess = IMAQdxError(0x0)
IMAQdxErrorSystemMemoryFull = IMAQdxError(0xBFF69000)
IMAQdxErrorInternal = IMAQdxError(3220606977)
IMAQdxErrorInvalidParameter = IMAQdxError(3220606978)
IMAQdxErrorInvalidPointer = IMAQdxError(3220606979)
IMAQdxErrorInvalidInterface = IMAQdxError(3220606980)
IMAQdxErrorInvalidRegistryKey = IMAQdxError(3220606981)
IMAQdxErrorInvalidAddress = IMAQdxError(3220606982)
IMAQdxErrorInvalidDeviceType = IMAQdxError(3220606983)
IMAQdxErrorNotImplemented = IMAQdxError(3220606984)
IMAQdxErrorCameraNotFound = IMAQdxError(3220606985)
IMAQdxErrorCameraInUse = IMAQdxError(3220606986)
IMAQdxErrorCameraNotInitialized = IMAQdxError(3220606987)
IMAQdxErrorCameraRemoved = IMAQdxError(3220606988)
IMAQdxErrorCameraRunning = IMAQdxError(3220606989)
IMAQdxErrorCameraNotRunning = IMAQdxError(3220606990)
IMAQdxErrorAttributeNotSupported = IMAQdxError(3220606991)
IMAQdxErrorAttributeNotSettable = IMAQdxError(3220606992)
IMAQdxErrorAttributeNotReadable = IMAQdxError(3220606993)
IMAQdxErrorAttributeOutOfRange = IMAQdxError(3220606994)
IMAQdxErrorBufferNotAvailable = IMAQdxError(3220606995)
IMAQdxErrorBufferListEmpty = IMAQdxError(3220606996)
IMAQdxErrorBufferListLocked = IMAQdxError(3220606997)
IMAQdxErrorBufferListNotLocked = IMAQdxError(3220606998)
IMAQdxErrorResourcesAllocated = IMAQdxError(3220606999)
IMAQdxErrorResourcesUnavailable = IMAQdxError(3220607000)
IMAQdxErrorAsyncWrite = IMAQdxError(3220607001)
IMAQdxErrorAsyncRead = IMAQdxError(3220607002)
IMAQdxErrorTimeout = IMAQdxError(3220607003)
IMAQdxErrorBusReset = IMAQdxError(3220607004)
IMAQdxErrorInvalidXML = IMAQdxError(3220607005)
IMAQdxErrorFileAccess = IMAQdxError(3220607006)
IMAQdxErrorInvalidCameraURLString = IMAQdxError(3220607007)
IMAQdxErrorInvalidCameraFile = IMAQdxError(3220607008)
IMAQdxErrorGenICamError = IMAQdxError(3220607009)
IMAQdxErrorFormat7Parameters = IMAQdxError(3220607010)
IMAQdxErrorInvalidAttributeType = IMAQdxError(3220607011)
IMAQdxErrorDLLNotFound = IMAQdxError(3220607012)
IMAQdxErrorFunctionNotFound = IMAQdxError(3220607013)
IMAQdxErrorLicenseNotActivated = IMAQdxError(3220607014)
IMAQdxErrorCameraNotConfiguredForListener = IMAQdxError(3220607015)
IMAQdxErrorCameraMulticastNotAvailable = IMAQdxError(3220607016)
IMAQdxErrorBufferHasLostPackets = IMAQdxError(3220607017)
IMAQdxErrorGiGEVisionError = IMAQdxError(3220607018)
IMAQdxErrorNetworkError = IMAQdxError(3220607019)
IMAQdxErrorCameraUnreachable = IMAQdxError(3220607020)
IMAQdxErrorHighPerformanceNotSupported = IMAQdxError(3220607021)
IMAQdxErrorInterfaceNotRenamed = IMAQdxError(3220607022)
IMAQdxErrorNoSupportedVideoModes = IMAQdxError(3220607023)
IMAQdxErrorSoftwareTriggerOverrun = IMAQdxError(3220607024)
IMAQdxErrorTestPacketNotReceived = IMAQdxError(3220607025)
IMAQdxErrorCorruptedImageReceived = IMAQdxError(3220607026)
IMAQdxErrorCameraConfigurationHasChanged = IMAQdxError(3220607027)
IMAQdxErrorCameraInvalidAuthentication = IMAQdxError(3220607028)
IMAQdxErrorUnknownHTTPError = IMAQdxError(3220607029)
IMAQdxErrorKernelDriverUnavailable = IMAQdxError(3220607030)
IMAQdxErrorPixelFormatDecoderUnavailable = IMAQdxError(3220607031)
IMAQdxErrorFirmwareUpdateNeeded = IMAQdxError(3220607032)
IMAQdxErrorFirmwareUpdateRebootNeeded = IMAQdxError(3220607033)
IMAQdxErrorLightingCurrentOutOfRange = IMAQdxError(3220607034)
IMAQdxErrorUSB3VisionError = IMAQdxError(3220607035)
IMAQdxErrorInvalidU3VUSBDescriptor = IMAQdxError(3220607036)
IMAQdxErrorU3VInvalidControlInterface = IMAQdxError(3220607037)
IMAQdxErrorU3VControlInterfaceError = IMAQdxError(3220607038)
IMAQdxErrorU3VInvalidEventInterface = IMAQdxError(3220607039)
IMAQdxErrorU3VEventInterfaceError = IMAQdxError(3220607040)
IMAQdxErrorU3VInvalidStreamInterface = IMAQdxError(3220607041)
IMAQdxErrorU3VStreamInterfaceError = IMAQdxError(3220607042)
IMAQdxErrorU3VUnsupportedConnectionSpeed = IMAQdxError(3220607043)
IMAQdxErrorU3VInsufficientPower = IMAQdxError(3220607044)
IMAQdxErrorU3VInvalidMaxCurrent = IMAQdxError(3220607045)
IMAQdxErrorBufferIncompleteData = IMAQdxError(3220607046)
IMAQdxErrorCameraAcquisitionConfigFailed = IMAQdxError(3220607047)
IMAQdxErrorCameraClosePending = IMAQdxError(3220607048)
IMAQdxErrorSoftwareFault = IMAQdxError(3220607049)
IMAQdxErrorCameraPropertyInvalid = IMAQdxError(3220607050)
IMAQdxErrorJumboFramesNotEnabled = IMAQdxError(3220607051)
IMAQdxErrorBayerPixelFormatNotSelected = IMAQdxError(3220607052)

##############################################################################
# Bus Type Enumeration
##############################################################################
class IMAQdxBusType(Enumeration): pass
IMAQdxBusTypeFireWire = IMAQdxBusType(0x31333934)
IMAQdxBusTypeEthernet = IMAQdxBusType(0x69707634)
IMAQdxBusTypeSimulator = IMAQdxBusType(0x2073696D)
IMAQdxBusTypeDirectShow = IMAQdxBusType(0x64736877)
IMAQdxBusTypeIP = IMAQdxBusType(0x4950636D)
IMAQdxBusTypeSmartCam2 = IMAQdxBusType(0x53436132)
IMAQdxBusTypeUSB3Vision = IMAQdxBusType(0x55534233)
IMAQdxBusTypeUVC = IMAQdxBusType(0x55564320)

##############################################################################
# Camera Control Mode Enumeration
##############################################################################
class IMAQdxCameraControlMode(Enumeration): pass
IMAQdxCameraControlModeController = IMAQdxCameraControlMode(0)
IMAQdxCameraControlModeListener = IMAQdxCameraControlMode(1)

##############################################################################
# Buffer Number Mode Enumeration
##############################################################################
class IMAQdxBufferNumberMode(Enumeration): pass
IMAQdxBufferNumberModeNext = IMAQdxBufferNumberMode(0)
IMAQdxBufferNumberModeLast = IMAQdxBufferNumberMode(1)
IMAQdxBufferNumberModeBufferNumber = IMAQdxBufferNumberMode(2)

##############################################################################
# Plug n Play Event Enumeration
##############################################################################
class IMAQdxPnpEvent(Enumeration): pass
IMAQdxPnpEventCameraAttached = IMAQdxPnpEvent(0)
IMAQdxPnpEventCameraDetached = IMAQdxPnpEvent(1)
IMAQdxPnpEventBusReset = IMAQdxPnpEvent(2)

##############################################################################
# Bayer Pattern Enumeration
##############################################################################
class IMAQdxBayerPattern(Enumeration): pass
IMAQdxBayerPatternNone = IMAQdxBayerPattern(0)
IMAQdxBayerPatternGB = IMAQdxBayerPattern(1)
IMAQdxBayerPatternGR = IMAQdxBayerPattern(2)
IMAQdxBayerPatternBG = IMAQdxBayerPattern(3)
IMAQdxBayerPatternRG = IMAQdxBayerPattern(4)
IMAQdxBayerPatternHardware = IMAQdxBayerPattern(5)

##############################################################################
# Bayer Decode Algorithm Enumeration
##############################################################################
class IMAQdxBayerAlgorithm(Enumeration): pass
IMAQdxBayerAlgorithmBilinear = IMAQdxBayerAlgorithm(0)
IMAQdxBayerAlgorithmVNG = IMAQdxBayerAlgorithm(1)

##############################################################################
# Output Image Types -- Values match Vision Development Module image types
##############################################################################
class IMAQdxOutputImageType(Enumeration): pass
IMAQdxOutputImageTypeU8 = IMAQdxOutputImageType(0)
IMAQdxOutputImageTypeI16 = IMAQdxOutputImageType(1)
IMAQdxOutputImageTypeU16 = IMAQdxOutputImageType(7)
IMAQdxOutputImageTypeRGB32 = IMAQdxOutputImageType(4)
IMAQdxOutputImageTypeRGB64 = IMAQdxOutputImageType(6)
IMAQdxOutputImageTypeAuto = IMAQdxOutputImageType(0x7FFFFFFF)

##############################################################################
# Controller Destination Mode Enumeration
##############################################################################
class IMAQdxDestinationMode(Enumeration): pass
IMAQdxDestinationModeUnicast = IMAQdxDestinationMode(0)
IMAQdxDestinationModeBroadcast = IMAQdxDestinationMode(1)
IMAQdxDestinationModeMulticast = IMAQdxDestinationMode(2)

##############################################################################
# Attribute Type Enumeration
##############################################################################
class IMAQdxAttributeType(Enumeration): pass
IMAQdxAttributeTypeU32 = IMAQdxAttributeType(0)
IMAQdxAttributeTypeI64 = IMAQdxAttributeType(1)
IMAQdxAttributeTypeF64 = IMAQdxAttributeType(2)
IMAQdxAttributeTypeString = IMAQdxAttributeType(3)
IMAQdxAttributeTypeEnum = IMAQdxAttributeType(4)
IMAQdxAttributeTypeBool = IMAQdxAttributeType(5)
IMAQdxAttributeTypeCommand = IMAQdxAttributeType(6)
IMAQdxAttributeTypeBlob = IMAQdxAttributeType(7)

##############################################################################
# Value Type Enumeration
##############################################################################
class IMAQdxValueType(Enumeration): pass
IMAQdxValueTypeU32 = IMAQdxValueType(0)
IMAQdxValueTypeI64 = IMAQdxValueType(1)
IMAQdxValueTypeF64 = IMAQdxValueType(2)
IMAQdxValueTypeString = IMAQdxValueType(3)
IMAQdxValueTypeEnumItem = IMAQdxValueType(4)
IMAQdxValueTypeBool = IMAQdxValueType(5)
IMAQdxValueTypeDisposableString = IMAQdxValueType(6)

##############################################################################
# Interface File Flags Enumeration
##############################################################################
class IMAQdxInterfaceFileFlags(Enumeration): pass
IMAQdxInterfaceFileFlagsConnected = IMAQdxInterfaceFileFlags(0x1)
IMAQdxInterfaceFileFlagsDirty = IMAQdxInterfaceFileFlags(0x2)

##############################################################################
# Overwrite Mode Enumeration
##############################################################################
class IMAQdxOverwriteMode(Enumeration): pass
IMAQdxOverwriteModeGetOldest = IMAQdxOverwriteMode(0x0)
IMAQdxOverwriteModeFail = IMAQdxOverwriteMode(0x2)
IMAQdxOverwriteModeGetNewest = IMAQdxOverwriteMode(0x3)

##############################################################################
# Incomplete Buffer Mode Enumeration
##############################################################################
class IMAQdxIncompleteBufferMode(Enumeration): pass
IMAQdxIncompleteBufferModeIgnore = IMAQdxIncompleteBufferMode(0)
IMAQdxIncompleteBufferModeFail = IMAQdxIncompleteBufferMode(1)

##############################################################################
# Lost Packet Mode Enumeration
##############################################################################
class IMAQdxLostPacketMode(Enumeration): pass
IMAQdxLostPacketModeIgnore = IMAQdxLostPacketMode(0)
IMAQdxLostPacketModeFail = IMAQdxLostPacketMode(1)

##############################################################################
# Attribute Visibility Enumeration
##############################################################################
class IMAQdxAttributeVisibility(Enumeration): pass
IMAQdxAttributeVisibilitySimple = IMAQdxAttributeVisibility(0x00001000)
IMAQdxAttributeVisibilityIntermediate = IMAQdxAttributeVisibility(0x00002000)
IMAQdxAttributeVisibilityAdvanced = IMAQdxAttributeVisibility(0x00004000)

##############################################################################
# Stream Channel Mode Enumeration
##############################################################################
class IMAQdxStreamChannelMode(Enumeration): pass
IMAQdxStreamChannelModeAutomatic = IMAQdxStreamChannelMode(0)
IMAQdxStreamChannelModeManual = IMAQdxStreamChannelMode(1)

##############################################################################
# Pixel Signedness Enumeration
##############################################################################
class IMAQdxPixelSignedness(Enumeration): pass
IMAQdxPixelSignednessUnsigned = IMAQdxPixelSignedness(0)
IMAQdxPixelSignednessSigned = IMAQdxPixelSignedness(1)
IMAQdxPixelSignednessHardware = IMAQdxPixelSignedness(2)

##############################################################################
# USB Connection Speed Enumeration
##############################################################################
class IMAQdxUSBConnectionSpeed(Enumeration): pass
IMAQdxUSBConnectionSpeedLow = IMAQdxUSBConnectionSpeed(1)
IMAQdxUSBConnectionSpeedFull = IMAQdxUSBConnectionSpeed(2)
IMAQdxUSBConnectionSpeedHigh = IMAQdxUSBConnectionSpeed(4)
IMAQdxUSBConnectionSpeedSuper = IMAQdxUSBConnectionSpeed(8)

##############################################################################
# CVI Structures
##############################################################################
##############################################################################
# Camera Information Structure
##############################################################################
class IMAQdxCameraInformation(ctypes.Structure): pass
IMAQdxCameraInformation._fields_ = [
    ("Type", ctypes.c_uint32),
    ("Version", ctypes.c_uint32),
    ("Flags", ctypes.c_uint32),
    ("SerialNumberHi", ctypes.c_uint32),
    ("SerialNumberLo", ctypes.c_uint32),
    ("BusType", IMAQdxBusType),
    ("InterfaceName", ctypes.c_char*IMAQDX_MAX_API_STRING_LENGTH),
    ("VendorName", ctypes.c_char*IMAQDX_MAX_API_STRING_LENGTH),
    ("ModelName", ctypes.c_char*IMAQDX_MAX_API_STRING_LENGTH),
    ("CameraFileName", ctypes.c_char*IMAQDX_MAX_API_STRING_LENGTH),
    ("CameraAttributeURL", ctypes.c_char*IMAQDX_MAX_API_STRING_LENGTH),
    ]
##############################################################################
# Camera File Structure
##############################################################################
class IMAQdxCameraFile(ctypes.Structure): pass
IMAQdxCameraFile._fields_ = [
    ("Type", ctypes.c_uint32),
    ("Version", ctypes.c_uint32),
    ("FileName", ctypes.c_char*IMAQDX_MAX_API_STRING_LENGTH),
    ]
##############################################################################
# Attribute Information Structure
##############################################################################
class IMAQdxAttributeInformation(ctypes.Structure): pass
IMAQdxAttributeInformation._fields_ = [
    ("Type", IMAQdxAttributeType),
    ("Readable", bool32),
    ("Writable", bool32),
    ("Name", ctypes.c_char*IMAQDX_MAX_API_STRING_LENGTH),
    ]
##############################################################################
# Enumeration Item Structure
##############################################################################
class IMAQdxEnumItem(ctypes.Structure): pass
IMAQdxEnumItem._fields_ = [
    ("Value", ctypes.c_uint32),
    ("Reserved", ctypes.c_uint32),
    ("Name", ctypes.c_char*IMAQDX_MAX_API_STRING_LENGTH),
    ]
##############################################################################
# Camera Information Structure
##############################################################################
IMAQdxVideoMode = IMAQdxEnumItem
##############################################################################
# Attributes
##############################################################################
IMAQdxAttributeBaseAddress = b"CameraInformation::BaseAddress"
IMAQdxAttributeBusType = b"CameraInformation::BusType"
IMAQdxAttributeModelName = b"CameraInformation::ModelName"
IMAQdxAttributeSerialNumberHigh = b"CameraInformation::SerialNumberHigh"
IMAQdxAttributeSerialNumberLow = b"CameraInformation::SerialNumberLow"
IMAQdxAttributeVendorName = b"CameraInformation::VendorName"
IMAQdxAttributeHostIPAddress = b"CameraInformation::HostIPAddress"
IMAQdxAttributeIPAddress = b"CameraInformation::IPAddress"
IMAQdxAttributePrimaryURLString = b"CameraInformation::PrimaryURLString"
IMAQdxAttributeSecondaryURLString = b"CameraInformation::SecondaryURLString"
IMAQdxAttributeAcqInProgress = b"StatusInformation::AcqInProgress"
IMAQdxAttributeLastBufferCount = b"StatusInformation::LastBufferCount"
IMAQdxAttributeLastBufferNumber = b"StatusInformation::LastBufferNumber"
IMAQdxAttributeLostBufferCount = b"StatusInformation::LostBufferCount"
IMAQdxAttributeLostPacketCount = b"StatusInformation::LostPacketCount"
IMAQdxAttributeRequestedResendPackets = b"StatusInformation::RequestedResendPacketCount"
IMAQdxAttributeReceivedResendPackets = b"StatusInformation::ReceivedResendPackets"
IMAQdxAttributeHandledEventCount = b"StatusInformation::HandledEventCount"
IMAQdxAttributeLostEventCount = b"StatusInformation::LostEventCount"
IMAQdxAttributeBayerGainB = b"AcquisitionAttributes::Bayer::GainB"
IMAQdxAttributeBayerGainG = b"AcquisitionAttributes::Bayer::GainG"
IMAQdxAttributeBayerGainR = b"AcquisitionAttributes::Bayer::GainR"
IMAQdxAttributeBayerPattern = b"AcquisitionAttributes::Bayer::Pattern"
IMAQdxAttributeStreamChannelMode = b"AcquisitionAttributes::Controller::StreamChannelMode"
IMAQdxAttributeDesiredStreamChannel = b"AcquisitionAttributes::Controller::DesiredStreamChannel"
IMAQdxAttributeFrameInterval = b"AcquisitionAttributes::FrameInterval"
IMAQdxAttributeIgnoreFirstFrame = b"AcquisitionAttributes::IgnoreFirstFrame"
IMAQdxAttributeOffsetX = b"OffsetX"
IMAQdxAttributeOffsetY = b"OffsetY"
IMAQdxAttributeWidth = b"Width"
IMAQdxAttributeHeight = b"Height"
IMAQdxAttributePixelFormat = b"PixelFormat"
IMAQdxAttributePacketSize = b"PacketSize"
IMAQdxAttributePayloadSize = b"PayloadSize"
IMAQdxAttributeSpeed = b"AcquisitionAttributes::Speed"
IMAQdxAttributeShiftPixelBits = b"AcquisitionAttributes::ShiftPixelBits"
IMAQdxAttributeSwapPixelBytes = b"AcquisitionAttributes::SwapPixelBytes"
IMAQdxAttributeOverwriteMode = b"AcquisitionAttributes::OverwriteMode"
IMAQdxAttributeTimeout = b"AcquisitionAttributes::Timeout"
IMAQdxAttributeVideoMode = b"AcquisitionAttributes::VideoMode"
IMAQdxAttributeBitsPerPixel = b"AcquisitionAttributes::BitsPerPixel"
IMAQdxAttributePixelSignedness = b"AcquisitionAttributes::PixelSignedness"
IMAQdxAttributeReserveDualPackets = b"AcquisitionAttributes::ReserveDualPackets"
IMAQdxAttributeReceiveTimestampMode = b"AcquisitionAttributes::ReceiveTimestampMode"
IMAQdxAttributeActualPeakBandwidth = b"AcquisitionAttributes::AdvancedEthernet::BandwidthControl::ActualPeakBandwidth"
IMAQdxAttributeDesiredPeakBandwidth = b"AcquisitionAttributes::AdvancedEthernet::BandwidthControl::DesiredPeakBandwidth"
IMAQdxAttributeDestinationMode = b"AcquisitionAttributes::AdvancedEthernet::Controller::DestinationMode"
IMAQdxAttributeDestinationMulticastAddress = b"AcquisitionAttributes::AdvancedEthernet::Controller::DestinationMulticastAddress"
IMAQdxAttributeEventsEnabled = b"AcquisitionAttributes::AdvancedEthernet::EventParameters::EventsEnabled"
IMAQdxAttributeMaxOutstandingEvents = b"AcquisitionAttributes::AdvancedEthernet::EventParameters::MaxOutstandingEvents"
IMAQdxAttributeTestPacketEnabled = b"AcquisitionAttributes::AdvancedEthernet::TestPacketParameters::TestPacketEnabled"
IMAQdxAttributeTestPacketTimeout = b"AcquisitionAttributes::AdvancedEthernet::TestPacketParameters::TestPacketTimeout"
IMAQdxAttributeMaxTestPacketRetries = b"AcquisitionAttributes::AdvancedEthernet::TestPacketParameters::MaxTestPacketRetries"
IMAQdxAttributeChunkDataDecodingEnabled = b"AcquisitionAttributes::ChunkDataDecoding::ChunkDataDecodingEnabled"
IMAQdxAttributeChunkDataDecodingMaxElementSize = b"AcquisitionAttributes::ChunkDataDecoding::MaximumChunkCopySize"
IMAQdxAttributeLostPacketMode = b"AcquisitionAttributes::AdvancedEthernet::LostPacketMode"
IMAQdxAttributeMemoryWindowSize = b"AcquisitionAttributes::AdvancedEthernet::ResendParameters::MemoryWindowSize"
IMAQdxAttributeResendsEnabled = b"AcquisitionAttributes::AdvancedEthernet::ResendParameters::ResendsEnabled"
IMAQdxAttributeResendThresholdPercentage = b"AcquisitionAttributes::AdvancedEthernet::ResendParameters::ResendThresholdPercentage"
IMAQdxAttributeResendBatchingPercentage = b"AcquisitionAttributes::AdvancedEthernet::ResendParameters::ResendBatchingPercentage"
IMAQdxAttributeMaxResendsPerPacket = b"AcquisitionAttributes::AdvancedEthernet::ResendParameters::MaxResendsPerPacket"
IMAQdxAttributeResendResponseTimeout = b"AcquisitionAttributes::AdvancedEthernet::ResendParameters::ResendResponseTimeout"
IMAQdxAttributeNewPacketTimeout = b"AcquisitionAttributes::AdvancedEthernet::ResendParameters::NewPacketTimeout"
IMAQdxAttributeMissingPacketTimeout = b"AcquisitionAttributes::AdvancedEthernet::ResendParameters::MissingPacketTimeout"
IMAQdxAttributeResendTimerResolution = b"AcquisitionAttributes::AdvancedEthernet::ResendParameters::ResendTimerResolution"
##############################################################################
# Functions
##############################################################################
IMAQdxSnap = DXFUNC("IMAQdxSnap", ("id", IMAQdxSession), ("image", Image), library=_dll2)
IMAQdxConfigureGrab = DXFUNC("IMAQdxConfigureGrab", ("id", IMAQdxSession), library=_dll2)
IMAQdxGrab = DXFUNC("IMAQdxGrab", ("id", IMAQdxSession), ("image", Image), ("waitForNextBuffer", bool32), ("actualBufferNumber", ctypes.POINTER(ctypes.c_uint32)), out=["actualBufferNumber"], library=_dll2)
_IMAQdxSequence = DXFUNC("IMAQdxSequence", ("id", IMAQdxSession), ("images", ctypes.POINTER(Image)), ("count", ctypes.c_uint32), library=_dll2)
def IMAQdxSequence(id, images):
    images, count = iterableToArray(images, ctypes.POINTER(Image))
    _IMAQdxSequence(id, images, count)
IMAQdxDiscoverEthernetCameras = DXFUNC("IMAQdxDiscoverEthernetCameras", ("address", ctypes.c_char_p), ("timeout", ctypes.c_uint32), library=_dll2)
_IMAQdxEnumerateCameras = DXFUNC("IMAQdxEnumerateCameras", ("cameraInformationArray", ctypes.POINTER(IMAQdxCameraInformation)), ("count", ctypes.POINTER(ctypes.c_uint32)), ("connectedOnly", bool32), library=_dll2)
IMAQdxResetCamera = DXFUNC("IMAQdxResetCamera", ("name", ctypes.c_char_p), ("resetAll", bool32), library=_dll2)
IMAQdxOpenCamera = DXFUNC("IMAQdxOpenCamera", ("name", ctypes.c_char_p), ("mode", IMAQdxCameraControlMode), ("id", ctypes.POINTER(IMAQdxSession)), out=["id"], library=_dll2)
IMAQdxCloseCamera = DXFUNC("IMAQdxCloseCamera", ("id", IMAQdxSession), library=_dll2)
IMAQdxConfigureAcquisition = DXFUNC("IMAQdxConfigureAcquisition", ("id", IMAQdxSession), ("continuous", bool32), ("bufferCount", ctypes.c_uint32), library=_dll2)
IMAQdxStartAcquisition = DXFUNC("IMAQdxStartAcquisition", ("id", IMAQdxSession), library=_dll2)
IMAQdxGetImage = DXFUNC("IMAQdxGetImage", ("id", IMAQdxSession), ("image", Image), ("mode", IMAQdxBufferNumberMode), ("desiredBufferNumber", ctypes.c_uint32), ("actualBufferNumber", ctypes.POINTER(ctypes.c_uint32)), out=["actualBufferNumber"], library=_dll2)
IMAQdxGetImageData = DXFUNC("IMAQdxGetImageData", ("id", IMAQdxSession), ("buffer", ctypes.c_void_p), ("bufferSize", ctypes.c_uint32), ("mode", IMAQdxBufferNumberMode), ("desiredBufferNumber", ctypes.c_uint32), ("actualBufferNumber", ctypes.POINTER(ctypes.c_uint32)), out=["actualBufferNumber"], library=_dll2)
IMAQdxStopAcquisition = DXFUNC("IMAQdxStopAcquisition", ("id", IMAQdxSession), library=_dll2)
IMAQdxUnconfigureAcquisition = DXFUNC("IMAQdxUnconfigureAcquisition", ("id", IMAQdxSession), library=_dll2)
_IMAQdxEnumerateVideoModes = DXFUNC("IMAQdxEnumerateVideoModes", ("id", IMAQdxSession), ("videoModeArray", ctypes.POINTER(IMAQdxVideoMode)), ("count", ctypes.POINTER(ctypes.c_uint32)), ("currentMode", ctypes.POINTER(ctypes.c_uint32)), library=_dll2)
_IMAQdxEnumerateAttributes = DXFUNC("IMAQdxEnumerateAttributes", ("id", IMAQdxSession), ("attributeInformationArray", ctypes.POINTER(IMAQdxAttributeInformation)), ("count", ctypes.POINTER(ctypes.c_uint32)), ("root", ctypes.c_char_p), library=_dll2)
_IMAQdxGetAttribute = DXFUNC("IMAQdxGetAttribute", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("type", IMAQdxValueType), ("value", ctypes.c_void_p), library=_dll2)
_IMAQdxGetAttributeMinimum = DXFUNC("IMAQdxGetAttributeMinimum", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("type", IMAQdxValueType), ("value", ctypes.c_void_p), library=_dll2)
_IMAQdxGetAttributeMaximum = DXFUNC("IMAQdxGetAttributeMaximum", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("type", IMAQdxValueType), ("value", ctypes.c_void_p), library=_dll2)
_IMAQdxGetAttributeIncrement = DXFUNC("IMAQdxGetAttributeIncrement", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("type", IMAQdxValueType), ("value", ctypes.c_void_p), library=_dll2)
_IMAQdxGetAttributeType = DXFUNC("IMAQdxGetAttributeType", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("type", ctypes.POINTER(IMAQdxAttributeType)), library=_dll2)
def IMAQdxGetAttributeType(id, name):
    type = IMAQdxAttributeType(0)
    _IMAQdxGetAttributeType(id, name, ctypes.byref(type))
    return type
IMAQdxIsAttributeReadable = DXFUNC("IMAQdxIsAttributeReadable", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("readable", ctypes.POINTER(bool32)), out=["readable"], library=_dll2)
IMAQdxIsAttributeWritable = DXFUNC("IMAQdxIsAttributeWritable", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("writable", ctypes.POINTER(bool32)), out=["writable"], library=_dll2)
_IMAQdxEnumerateAttributeValues = DXFUNC("IMAQdxEnumerateAttributeValues", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("list", ctypes.POINTER(IMAQdxEnumItem)), ("size", ctypes.POINTER(ctypes.c_uint32)), library=_dll2)
IMAQdxGetAttributeTooltip = DXFUNC("IMAQdxGetAttributeTooltip", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("tooltip", ctypes.c_char_p), ("length", ctypes.c_uint32), out=["tooltip"], library=_dll2)
IMAQdxGetAttributeUnits = DXFUNC("IMAQdxGetAttributeUnits", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("units", ctypes.c_char_p), ("length", ctypes.c_uint32), out=["units"], library=_dll2)
IMAQdxWriteRegister = DXFUNC("IMAQdxWriteRegister", ("id", IMAQdxSession), ("offset", ctypes.c_uint32), ("value", ctypes.c_uint32), library=_dll2)
IMAQdxReadRegister = DXFUNC("IMAQdxReadRegister", ("id", IMAQdxSession), ("offset", ctypes.c_uint32), ("value", ctypes.POINTER(ctypes.c_uint32)), out=["value"], library=_dll2)
_IMAQdxWriteMemory = DXFUNC("IMAQdxWriteMemory", ("id", IMAQdxSession), ("offset", ctypes.c_uint32), ("values", ctypes.c_char_p), ("count", ctypes.c_uint32), library=_dll2)
def IMAQdxWriteMemory(id, offset, values):
    values, count = iterableToArray(values, ctypes.c_char)
    _IMAQdxWriteMemory(id, offset, values, count)
_IMAQdxReadMemory = DXFUNC("IMAQdxReadMemory", ("id", IMAQdxSession), ("offset", ctypes.c_uint32), ("values", ctypes.c_char_p), ("count", ctypes.c_uint32), library=_dll2)
def IMAQdxReadMemory(id, offset):
    values, count = iterableToArray(values, ctypes.c_char)
    _IMAQdxReadMemory(id, offset, values, count)
IMAQdxWriteAttributes = DXFUNC("IMAQdxWriteAttributes", ("id", IMAQdxSession), ("filename", ctypes.c_char_p), library=_dll2)
IMAQdxReadAttributes = DXFUNC("IMAQdxReadAttributes", ("id", IMAQdxSession), ("filename", ctypes.c_char_p), library=_dll2)
IMAQdxResetEthernetCameraAddress = DXFUNC("IMAQdxResetEthernetCameraAddress", ("name", ctypes.c_char_p), ("address", ctypes.c_char_p), ("subnet", ctypes.c_char_p), ("gateway", ctypes.c_char_p), ("timeout", ctypes.c_uint32), library=_dll2)
_IMAQdxEnumerateAttributes2 = DXFUNC("IMAQdxEnumerateAttributes2", ("id", IMAQdxSession), ("attributeInformationArray", ctypes.POINTER(IMAQdxAttributeInformation)), ("count", ctypes.POINTER(ctypes.c_uint32)), ("root", ctypes.c_char_p), ("visibility", IMAQdxAttributeVisibility), library=_dll2)
_IMAQdxGetAttributeVisibility = DXFUNC("IMAQdxGetAttributeVisibility", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("visibility", ctypes.POINTER(IMAQdxAttributeVisibility)), library=_dll2)
def IMAQdxGetAttributeVisibility(id, name):
    visibility = IMAQdxAttributeVisibility(0)
    _IMAQdxGetAttributeVisibility(id, name, ctypes.byref(visibility))
    return visibility
_IMAQdxGetAttributeDescription = DXFUNC("IMAQdxGetAttributeDescription", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("description", ctypes.c_char_p), ("length", ctypes.c_uint32), library=_dll2)
_IMAQdxGetAttributeDisplayName = DXFUNC("IMAQdxGetAttributeDisplayName", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("displayName", ctypes.c_char_p), ("length", ctypes.c_uint32), library=_dll2)
IMAQdxDispose = DXFUNC("IMAQdxDispose", ("buffer", ctypes.c_void_p), library=_dll2)
_IMAQdxEnumerateAttributes3 = DXFUNC("IMAQdxEnumerateAttributes3", ("id", IMAQdxSession), ("attributeInformationArray", ctypes.POINTER(IMAQdxAttributeInformation)), ("count", ctypes.POINTER(ctypes.c_uint32)), ("root", ctypes.c_char_p), ("visibility", IMAQdxAttributeVisibility), library=_dll2)
# native Python versions of these are faster
def imaqMakeAnnulus(center, innerRadius, outerRadius, startAngle, endAngle):
    return Annulus(center, innerRadius, outerRadius, startAngle, endAngle)

def imaqMakePoint(xCoordinate, yCoordinate):
    return Point(xCoordinate, yCoordinate)

def imaqMakePointFloat(xCoordinate, yCoordinate):
    return PointFloat(xCoordinate, yCoordinate)

def imaqMakeRect(top, left, height, width):
    return Rect(top, left, height, width)

def imaqMakeRotatedRect(top, left, height, width, angle):
    return RotatedRect(top, left, height, width, angle)

def imaqMakeRotatedRectFromRect(rect):
    return RotatedRect(rect.top, rect.left, rect.height, rect.width, 0.0)

# custom (for now) for inout parameter
def imaqMulticoreOptions(operation, customNumCores):
    v = ctypes.c_uint(customNumCores)
    _imaqMulticoreOptions(operation, ctypes.byref(v))
    return v.value

# useful imaqMulticoreOptions aliases
def imaqGetCores():
    v = ctypes.c_uint()
    _imaqMulticoreOptions(IMAQ_GET_CORES, ctypes.byref(v))
    return v.value

def imaqSetCores(customNumCores):
    v = ctypes.c_uint(customNumCores)
    _imaqMulticoreOptions(IMAQ_SET_CORES, ctypes.byref(v))

def imaqUseMaxAvailableCores():
    v = ctypes.c_uint()
    _imaqMulticoreOptions(IMAQ_USE_MAX_AVAILABLE, ctypes.byref(v))

# custom to handle data size variance and data copy
def imaqImageToArray(image, rect=IMAQ_NO_RECT):
    cols = ctypes.c_int()
    rows = ctypes.c_int()
    d = _imaqImageToArray(image, rect, ctypes.byref(cols), ctypes.byref(rows))
    t = imaqGetImageType(image)
    data = ctypes.string_at(d, cols.value*rows.value*imaqGetBytesPerPixel(image))
    imaqDispose(d)
    return data, cols.value, rows.value

# custom to handle data copy
def imaqReadCustomData(image, key):
    size = ctypes.c_uint()
    d = _imaqReadCustomData(image, key, ctypes.byref(size))
    data = ctypes.string_at(d, size.value)
    imaqDispose(d)
    return data

# custom to handle c_byte <-> void translation
#def imaqFlatten(image, type, compression, quality):
#    size = ctypes.c_uint()
#    rv = _imaqFlatten(image, type, compression, quality, ctypes.byref(size))
#    return DisposedArray(ctypes.cast(rv, ctypes.POINTER(ctypes.c_byte)), size.value)
def imaqUnflatten(image, data):
    data, size = iterableToArray(data, ctypes.c_byte)
    _imaqUnflatten(image, data, size)

# type of pointer varies
_type_to_ctype = {
        IMAQ_IMAGE_U8: ctypes.c_byte,
        IMAQ_IMAGE_U16: ctypes.c_ushort,
        IMAQ_IMAGE_I16: ctypes.c_short,
        IMAQ_IMAGE_SGL: ctypes.c_float,
        IMAQ_IMAGE_COMPLEX: Complex,
        IMAQ_IMAGE_RGB: RGBValue,
        IMAQ_IMAGE_HSL: HSLValue,
        IMAQ_IMAGE_RGB_U64: RGBU64Value,
        }

def imaqGetLine(image, start, end):
    numPoints = ctypes.c_int()
    d = _imaqGetLine(image, start, end, ctypes.byref(numPoints))
    t = _type_to_ctype[imaqGetImageType(image)]
    return DisposedArray(ctypes.cast(d, t), numPoints)

def imaqSetLine(image, array, start, end):
    array, arraySize = iterableToArray(array,
            _type_to_ctype[imaqGetImageType(image)])
    _imaqSetLine(image, array, arraySize, start, end)

def imaqGetPixelAddress(image, pixel):
    d = _imaqGetPixelAddress(image, pixel)
    t = _type_to_ctype[imaqGetImageType(image)]
    return ctypes.cast(d, t)

# custom to handle rows*columns math
# XXX: should this try to build a 2D array (e.g. with numpy) instead?
def imaqComplexPlaneToArray(image, plane, rect):
    rows = ctypes.c_int()
    columns = ctypes.c_int()
    rv = _imaqComplexPlaneToArray(image, plane, rect, ctypes.byref(rows), ctypes.byref(columns))
    return DisposedArray(rv, rows.value*columns.value), rows.value, columns.value

# custom to copyin expectedPatterns to String255
def imaqVerifyPatterns(image, set, expectedPatterns, roi):
    numScores = ctypes.c_int()
    pat = ctypes.create_string_buffer(expectedPatterns, 256)
    rv = _imaqVerifyPatterns(image, set, pat, len(expectedPatterns), roi, ctypes.byref(numScores))
    return DisposedArray(rv, numScores.value)

# custom for output parameter array
def imaqReadFile(image, fileName):
    colorTable = (RGBValue*256)()
    numColors = ctypes.c_int()
    _imaqReadFile(image, fileName, colorTable, ctypes.byref(numColors))
    if numColors == 0:
        return []
    return ImaqArray(colorTable, numColors)

# custom for output parameter array
def imaqReadVisionFile(image, fileName):
    colorTable = (RGBValue*256)()
    numColors = ctypes.c_int()
    _imaqReadVisionFile(image, fileName, colorTable, ctypes.byref(numColors))
    if numColors == 0:
        return []
    return ImaqArray(colorTable, numColors)

# number of patterns is for both labels and patterns
def imaqLearnMultipleGeometricPatterns(patterns, labels):
    patterns, numberOfPatterns = iterableToArray(patterns, Image)
    labels = ctypes.create_string_buffer(IMAQDX_MAX_API_STRING_LENGTH*numberOfPatterns)
    ctypes.memset(labels, 0, IMAQDX_MAX_API_STRING_LENGTH*numberOfPatterns)
    if len(labels) != numberOfPatterns:
        raise ValueError("len(labels) does not match len(patterns)")
    for i, label in enumerate(labels):
        for j, ch in enumerate(label):
            labels[i*IMAQDX_MAX_API_STRING_LENGTH+j] = ch
    rv = _imaqLearnMultipleGeometricPatterns(patterns, numberOfPatterns, labels)
    return DisposedPointer(rv)

# copyin String255
def imaqReadMultipleGeometricPatternFile(fileName, description):
    description = ctypes.create_string_buffer(description, 256)
    rv = _imaqReadMultipleGeometricPatternFile(fileName, description)
    return DisposedPointer(rv)

# provided string and length
def IMAQdxGetAttributeDescription(id, name):
    description = ctypes.create_string_buffer(IMAQDX_MAX_API_STRING_LENGTH)
    _IMAQdxGetAttributeDescription(id, name, description, IMAQDX_MAX_API_STRING_LENGTH)
    return ctypes.cast(description, ctypes.c_char_p).value.decode("utf-8")

def IMAQdxGetAttributeDisplayName(id, name):
    displayName = ctypes.create_string_buffer(IMAQDX_MAX_API_STRING_LENGTH)
    _IMAQdxGetAttributeDescription(id, name, displayName, IMAQDX_MAX_API_STRING_LENGTH)
    return ctypes.cast(displayName, ctypes.c_char_p).value.decode("utf-8")

# get/set attribute in/out varies with type
def _IMAQdxAttrGetter(id, name, func):
    attrtype = IMAQdxGetAttributeType(id, name)
    if attrtype == IMAQdxAttributeTypeU32:
        value = ctypes.c_uint32()
        func(id, name, IMAQdxValueTypeU32, ctypes.byref(value))
        return value.value
    elif attrtype == IMAQdxAttributeTypeI64:
        value = ctypes.c_int64()
        func(id, name, IMAQdxValueTypeI64, ctypes.byref(value))
        return value.value
    elif attrtype == IMAQdxAttributeTypeF64:
        value = ctypes.c_double()
        func(id, name, IMAQdxValueTypeF64, ctypes.byref(value))
        return value.value
    elif attrtype == IMAQdxAttributeTypeString:
        value = (ctypes.c_char * IMAQDX_MAX_API_STRING_LENGTH)()
        func(id, name, IMAQdxValueTypeString, value)
        return ctypes.cast(value, ctypes.c_char_p).value
    elif attrtype == IMAQdxAttributeTypeEnum:
        value = IMAQdxEnumItem()
        func(id, name, IMAQdxValueTypeEnumItem, ctypes.byref(value))
        return value
    elif attrtype == IMAQdxAttributeTypeBool:
        value = bool32()
        func(id, name, IMAQdxValueTypeBool, ctypes.byref(value))
        return value.value
    else:
        raise TypeError("can't get attribute of type %s" % attrtype)

def IMAQdxGetAttribute(id, name):
    return _IMAQdxAttrGetter(id, name, _IMAQdxGetAttribute)
def IMAQdxGetAttributeMinimum(id, name):
    return _IMAQdxAttrGetter(id, name, _IMAQdxGetAttributeMinimum)
def IMAQdxGetAttributeMaximum(id, name):
    return _IMAQdxAttrGetter(id, name, _IMAQdxGetAttributeMaximum)
def IMAQdxGetAttributeIncrement(id, name):
    return _IMAQdxAttrGetter(id, name, _IMAQdxGetAttributeIncrement)

_IMAQdxSetAttribute_U32 = DXFUNC("IMAQdxSetAttribute", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("type", IMAQdxValueType), ("value", ctypes.c_uint32), library=_dll2)
_IMAQdxSetAttribute_I64 = DXFUNC("IMAQdxSetAttribute", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("type", IMAQdxValueType), ("value", ctypes.c_int64), library=_dll2)
_IMAQdxSetAttribute_F64 = DXFUNC("IMAQdxSetAttribute", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("type", IMAQdxValueType), ("value", ctypes.c_double), library=_dll2)
_IMAQdxSetAttribute_String = DXFUNC("IMAQdxSetAttribute", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("type", IMAQdxValueType), ("value", ctypes.c_char_p), library=_dll2)
_IMAQdxSetAttribute_Enum = DXFUNC("IMAQdxSetAttribute", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("type", IMAQdxValueType), ("value", IMAQdxEnumItem), library=_dll2)
_IMAQdxSetAttribute_Bool = DXFUNC("IMAQdxSetAttribute", ("id", IMAQdxSession), ("name", ctypes.c_char_p), ("type", IMAQdxValueType), ("value", bool32), library=_dll2)

def IMAQdxSetAttribute(id, name, value):
    attrtype = IMAQdxGetAttributeType(id, name)
    if attrtype == IMAQdxAttributeTypeU32:
        _IMAQdxSetAttribute_U32(id, name, IMAQdxValueTypeU32, int(value))
    elif attrtype == IMAQdxAttributeTypeI64:
        _IMAQdxSetAttribute_I64(id, name, IMAQdxValueTypeI64, int(value))
    elif attrtype == IMAQdxAttributeTypeF64:
        _IMAQdxSetAttribute_F64(id, name, IMAQdxValueTypeF64, float(value))
    elif attrtype == IMAQdxAttributeTypeString:
        _IMAQdxSetAttribute_String(id, name, IMAQdxValueTypeString, value)
    elif attrtype == IMAQdxAttributeTypeEnum:
        # also allow just the enum value or string name
        if isinstance(value, int):
            _IMAQdxSetAttribute_U32(id, name, IMAQdxValueTypeU32, value)
        elif isinstance(value, str):
            _IMAQdxSetAttribute_String(id, name, IMAQdxValueTypeString, value.encode('utf-8'))
        elif isinstance(value, bytes):
            _IMAQdxSetAttribute_String(id, name, IMAQdxValueTypeString, value)
        else:
            _IMAQdxSetAttribute_Enum(id, name, IMAQdxValueTypeEnumItem, value)
    elif attrtype == IMAQdxAttributeTypeBool:
        _IMAQdxSetAttribute_Bool(id, name, IMAQdxValueTypeBool, int(value))
    else:
        raise TypeError("can't set attribute of type %s" % attrtype)

# output array passed with inout count: call with NULL to get count.
def IMAQdxEnumerateCameras(connectedOnly):
    count = ctypes.c_uint(0)
    _IMAQdxEnumerateCameras(None, ctypes.byref(count), connectedOnly)
    cameraInformationArray = (IMAQdxCameraInformation*count.value)()
    _IMAQdxEnumerateCameras(cameraInformationArray, ctypes.byref(count), connectedOnly)
    return ImaqArray(cameraInformationArray, count.value)

def IMAQdxEnumerateVideoModes(id):
    count = ctypes.c_uint(0)
    currentMode = ctypes.c_uint()
    _IMAQdxEnumerateVideoModes(id, None, ctypes.byref(count), ctypes.byref(currentMode))
    videoModeArray = (IMAQdxVideoMode*count.value)()
    _IMAQdxEnumerateVideoModes(id, videoModeArray, ctypes.byref(count), ctypes.byref(currentMode))
    return ImaqArray(videoModeArray, count.value), currentMode

def IMAQdxEnumerateAttributes(id, root):
    count = ctypes.c_uint(0)
    _IMAQdxEnumerateAttributes2(id, None, ctypes.byref(count), root)
    attributeInformationArray = (IMAQdxAttributeInformation*count.value)()
    _IMAQdxEnumerateAttributes2(id, attributeInformationArray, ctypes.byref(count), root)
    return ImaqArray(attributeInformationArray, count.value)

def IMAQdxEnumerateAttributeValues(id, name):
    size = ctypes.c_uint(0)
    _IMAQdxEnumerateAttributeValues(id, name, None, ctypes.byref(size))
    valueList = (IMAQdxEnumItem*size.value)()
    _IMAQdxEnumerateAttributeValues(id, name, valueList, ctypes.byref(size))
    return ImaqArray(valueList, size.value)

def IMAQdxEnumerateAttributes2(id, root, visibility):
    count = ctypes.c_uint(0)
    _IMAQdxEnumerateAttributes2(id, None, ctypes.byref(count), root, visibility)
    attributeInformationArray = (IMAQdxAttributeInformation*count.value)()
    _IMAQdxEnumerateAttributes2(id, attributeInformationArray, ctypes.byref(count), root, visibility)
    return ImaqArray(attributeInformationArray, count.value)

def IMAQdxEnumerateAttributes3(id, root, visibility):
    count = ctypes.c_uint(0)
    _IMAQdxEnumerateAttributes3(id, None, ctypes.byref(count), root, visibility)
    attributeInformationArray = (IMAQdxAttributeInformation*count.value)()
    _IMAQdxEnumerateAttributes3(id, attributeInformationArray, ctypes.byref(count), root, visibility)
    return ImaqArray(attributeInformationArray, count.value)

